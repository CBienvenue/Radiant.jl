var documenterSearchIndex = {"docs":
[{"location":"api_pair_production/#Structure","page":"Pair_Production","title":"Structure","text":"","category":"section"},{"location":"api_pair_production/","page":"Pair_Production","title":"Pair_Production","text":"Radiant.Pair_Production","category":"page"},{"location":"api_pair_production/#Radiant.Pair_Production","page":"Pair_Production","title":"Radiant.Pair_Production","text":"Pair_Production\n\nStructure used to define parameters for production of multigroup pair production cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Photon,Photon) => [\"A\"],(Photon,Electron) => [\"P\"],(Photon,Positron) => [\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Photon,Photon) => [\"A\"] : absorption of incoming photon.\n(Photon,Electron) => [\"P\"] : produced electron.\n(Photon,Positron) => [\"P\"] : produced positron.\nangular_scattering_type::String=modified_dipole : type of angular scattering, which can takes the following values:\nangular_scattering_type = modified_dipole : modified dipôle distribution, based on Poskus (2019) shape functions.\nangular_scattering_type = sommerfield : Sommerfield distribution.\n\n\n\n\n\n","category":"type"},{"location":"api_pair_production/#Methods","page":"Pair_Production","title":"Methods","text":"","category":"section"},{"location":"api_pair_production/","page":"Pair_Production","title":"Pair_Production","text":"Radiant.set_interaction_types(this::Radiant.Pair_Production,interaction_types)\nRadiant.set_angular_scattering_type(this::Radiant.Pair_Production,angular_scattering_type::String)","category":"page"},{"location":"api_pair_production/#Radiant.set_interaction_types-Tuple{Pair_Production, Any}","page":"Pair_Production","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Pair_Production,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for pair production processes.\n\nInput Argument(s)\n\nthis::Pair_Production : pair production structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Photon,Photon) => [\"A\"] : absorption of incoming photon.\n(Photon,Electron) => [\"P\"] : produced electron.\n(Photon,Positron) => [\"P\"] : produced positron.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> pair_production = Pair_Production()\njulia> pair_production.set_interaction_types( Dict((Electron,Electron) => [\"S\"]) ) # Only electron scattering, with photon absorption.\n\n\n\n\n\n","category":"method"},{"location":"api_pair_production/#Radiant.set_angular_scattering_type-Tuple{Pair_Production, String}","page":"Pair_Production","title":"Radiant.set_angular_scattering_type","text":"set_angular_scattering_type(this::Pair_Production,angular_scattering_type::String)\n\nTo define the pair_production photons angular distribution.\n\nInput Argument(s)\n\nthis::Pair_Production : pair_production structure.\nangular_scattering_type::String : angular scattering type.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> pair_production = Pair_Production()\njulia> pair_production.set_angular_scattering_type(\"sommerfield\")\n\n\n\n\n\n","category":"method"},{"location":"user_guide_materials/#2-Materials","page":"2 Materials","title":"2 Materials","text":"","category":"section"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"Materials in Radiant are defined by a Radiant.Material object. Once a material has been instantiated, the elemental composition of the material can be defined with its density. For example, the following code would be use to define water:","category":"page"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"water = Material()\nwater.set_density(1.0)           # Density of 1 g/cm³\nwater.add_element(\"H\",0.1111)    # Hydrogen with mass weight of 11.11 %\nwater.add_element(\"O\",0.8889)    # Oxygen with mass weight of 88.89 %","category":"page"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"and for a monoelemental element, like aluminium, the following can be used:","category":"page"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"al = Material()\nal.add_element(\"Al\")             # Aluminium with mass weight of 100 %","category":"page"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"Note that the absence of explicit mass weight means the material is monoelemental and the absence of explicit density correspond to the material density at 20°C. The material information can be printed using println() function. For example, for the object water created before, the function println(water) generates the following output:","category":"page"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"Material:\n   ID:                           53\n   Density (g/cm³):              1.0\n   Elements in the compound:     [\"h\", \"o\"]\n   Weight fractions:             [0.1111, 0.8889]\n   State of matter:              liquid","category":"page"},{"location":"user_guide_materials/","page":"2 Materials","title":"2 Materials","text":"where the ID field correspond to an internal ID to uniquely identify the object. An empty field can take the value missing if the data is required for calculations, and simply nothing if not.","category":"page"},{"location":"theory_angular_discretization/#1.3-Angular-discretization","page":"1.3 Angular Discretization","title":"1.3 Angular discretization","text":"","category":"section"},{"location":"theory_angular_discretization/","page":"1.3 Angular Discretization","title":"1.3 Angular Discretization","text":"warning: Warning\nIncomplete - Work in progress","category":"page"},{"location":"user_guide_fixed_external_sources/#7-Fixed-External-Sources","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"","category":"section"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"A fixed external source in Radiant is represented by the Radiant.Fixed_Sources object. Once instantiated, the user can add two kinds of source to it using","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"s = Fixed_Sources(cs,geo,solvers)     # Instantiation using cross-sections, geometry and solver object\ns.add_source(surface_source)          # Adding a surface source\ns.add_source(volume_source)           # Adding a volume source","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"where surface_source and volume_source are respectively Radiant.Surface_Source and Radiant.Volume_Source objects defined in the following sections.","category":"page"},{"location":"user_guide_fixed_external_sources/#7.1-Surface-Sources","page":"7 Fixed External Sources","title":"7.1 Surface Sources","text":"","category":"section"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"A surface source is represented by the Radiant.Surface_Source object. It is defined on a boundary of the geometry. For Cartesian geometry, these boundaries are identified as x-, x+, y-, y+, z- and z+. It should be noted that the surface source is associated with the given particle ID. In 1D Cartesian geometry, the definition of the surface source can take this form","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"ss = Surface_Source()\nss.set_particle(photon)            # Set the particle\nss.set_intensity(1.0)              # Set the source intensity\nss.set_energy_group(1)             # Set the energy group\nss.set_direction([1.0,0.0,0.0])    # Set the direction using direction cosine\nss.set_location(\"X-\")              # Set location of the source","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"In 2D or 3D geometry, an additionnal term has to be added to define the size of the source on the given boundary. For example, in 2D Cartesian geometry, taking the same example, the user should add","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"ss.set_boundaries(\"y\",[2.0,3.0])   # Set the boundaries of the source along axis y","category":"page"},{"location":"user_guide_fixed_external_sources/#7.2-Volume-Sources","page":"7 Fixed External Sources","title":"7.2 Volume Sources","text":"","category":"section"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"A surface source is represented by the Radiant.Volume_Source object. It is defined within the geometry domain. For 1D Cartesian geometry, a volume source can be defined as","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"vs = Volume_Source()\nvs.set_particle(photon)\nvs.set_intensity(1.0)\nvs.set_energy_group(1)\nvs.set_boundaries(\"x\",[0.0,2.0])","category":"page"},{"location":"user_guide_fixed_external_sources/","page":"7 Fixed External Sources","title":"7 Fixed External Sources","text":"and similarly for 2D and 3D Cartesian geometry, adding boundaries along y and z axis.","category":"page"},{"location":"api_material/#Structure","page":"Material","title":"Structure","text":"","category":"section"},{"location":"api_material/","page":"Material","title":"Material","text":"Radiant.Radiant.Material","category":"page"},{"location":"api_material/#Radiant.Material","page":"Material","title":"Radiant.Material","text":"Material\n\nStructure used to define a material and its properties.\n\nMandatory field(s)\n\nname::String : name (or identifier) of the Material structure.\ndensity::Float64 : density [in g/cm³].\nelements::Vector{String} : vector of the element in the composition of the material.\nweight_fractions::Vector{Float64} : vector of the weight fraction for each element in the composition of the material.\n\nOptional field(s) - with default values\n\nstate_of_matter::String = \"solid\" : state of the matter.\n\n\n\n\n\n","category":"type"},{"location":"api_material/#Methods","page":"Material","title":"Methods","text":"","category":"section"},{"location":"api_material/","page":"Material","title":"Material","text":"Radiant.set_density(this::Radiant.Material,density::Real)\nRadiant.set_state_of_matter(this::Radiant.Material,state_of_matter::String)\nRadiant.add_element(this::Radiant.Material,symbol::String,weight_fraction::Real)","category":"page"},{"location":"api_material/#Radiant.set_density-Tuple{Material, Real}","page":"Material","title":"Radiant.set_density","text":"set_density(this::Material,density::Real)\n\nTo set the density of the material.\n\nInput Argument(s)\n\nthis::Material : material.\ndensity::Real : density [in g/cm³].\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> mat.set_density(19.3)\n\n\n\n\n\n","category":"method"},{"location":"api_material/#Radiant.set_state_of_matter-Tuple{Material, String}","page":"Material","title":"Radiant.set_state_of_matter","text":"set_state_of_matter(this::Material,state_of_matter::String)\n\nTo set the state of the matter (solid or liquid or gaz).\n\nInput Argument(s)\n\nthis::Material : material.\nstate_of_matter::String : state of matter, which value is given by \"solid\", \"liquid\" or \"gaz\".\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> mat.set_state_of_matter(\"liquid\")\n\n\n\n\n\n","category":"method"},{"location":"api_material/#Radiant.add_element-Tuple{Material, String, Real}","page":"Material","title":"Radiant.add_element","text":"add_element(this::Material,symbol::String,weight_fraction::Real=1)\n\nTo add an element which is part of the composition of the material.\n\nInput Argument(s)\n\nthis::Material : material.\nsymbol::String : element symbol, with value such as \"H\", \"He\", etc.\nweight_fraction::Real : weight fraction of the element in the material (between 0 and 1).\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> water.add_element(\"H\",0.1111)\njulia> water.add_element(\"O\",0.8889)\n\n\n\n\n\n","category":"method"},{"location":"theory_references/","page":"References","title":"References","text":"E. E. Lewis and W. F. Miller. Computational methods of neutron transport (John Wiley and Sons, Inc., New York, NY, 1984).\n\n\n\nA. Hébert. Applied reactor physics (Presses inter Polytechnique, 2009).\n\n\n\nL. Lorence Jr, J. Morel and G. Valdez. Physics guide to CEPXS: a multigroup coupled electron-photon cross-section generating code (Sandia National Lab.(SNL-NM), Albuquerque, NM (United States), 1989).\n\n\n\nJ. Morel. Fokker-Planck calculations using standard discrete ordinates transport codes. Nuclear Science and Engineering 79, 340–356 (1981).\n\n\n\nG. Pomraning. The Fokker-Planck operator as an asymptotic limit. Mathematical Models and Methods in Applied Sciences 2, 21–36 (1992).\n\n\n\nS. B. Uilkema. Proton therapy planning using the SN method with the Fokker–Planck approximation. Delft University of Technology (2012).\n\n\n\nG. Pomraning. Higher order fokker-planck operators. Nuclear science and engineering 124, 390–397 (1996).\n\n\n\nE. Olbrant and M. Frank. Generalized Fokker–Planck theory for electron and photon transport in biological tissues: application to radiotherapy. Computational and mathematical methods in medicine 11, 313–339 (2010).\n\n\n\nK. Przybylski and J. Ligou. Numerical analysis of the Boltzmann equation including Fokker-Planck terms. Nuclear Science and Engineering 81, 92–109 (1982).\n\n\n\nY. Azmy, E. Sartori, E. W. Larsen and J. E. Morel. Advances in discrete-ordinates methodology. Nuclear computational science: A century in review, 1–84 (2010).\n\n\n\nJ. S. Hesthaven and T. Warburton. Nodal discontinuous Galerkin methods: algorithms, analysis, and applications (Springer Science & Business Media, 2007).\n\n\n\nF. Salvat, J. M. Fernández-Varea, J. Sempau and others. PENELOPE-2006: A code system for Monte Carlo simulation of electron and photon transport. In: Workshop proceedings, Vol. 4 (Citeseer, 2006); p. 7.\n\n\n\nJ. H. Hubbell, W. J. Veigele, E. Briggs, R. Brown, D. Cromer and d. R. Howerton. Atomic form factors, incoherent scattering functions, and photon scattering cross sections. Journal of physical and chemical reference data 4, 471–538 (1975).\n\n\n\nD. T. Cromer. Anomalous dispersion corrections computed from self-consistent field relativistic Dirac–Slater wave functions. Acta Crystallographica 18, 17–23 (1965).\n\n\n\nL. Kissel, B. Zhou, S. Roy, S. Sen Gupta and R. Pratt. The validity of form-factor, modified-form-factor and anomalous-scattering-factor approximations in elastic scattering calculations. Acta Crystallographica Section A: Foundations of Crystallography 51, 271–288 (1995).\n\n\n\nO. Iwamoto, N. Iwamoto, S. Kunieda, F. Minato, S. Nakayama, Y. Abe, K. Tsubakihara, S. Okumura, C. Ishizuka, T. Yoshida and others. Japanese evaluated nuclear data library version 5: JENDL-5, journal of nuclear science and technology 60, 1–60 (2023).\n\n\n\nD. E. Cullen, M. Chen, J. Hubbell, S. Perkins, E. Plechaty, J. Rathkopf and J. Scofield. Tables and graphs of photon-interaction cross sections from 10 eV to 100 GeV derived from the LLNL evaluated photon data library (EPDL) (Lawrence Livermore National Lab., CA (USA), 1989).\n\n\n\nD. Brusa, G. Stutz, J. Riveros, J. Fernández-Varea and F. Salvat. Fast sampling algorithm for the simulation of photon Compton scattering. Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment 379, 167–175 (1996).\n\n\n\nW. Heitler. The quantum theory of radiation (Courier Corporation, 1984).\n\n\n\nD. E. Cullen, J. H. Hubbell and L. Kissel. EPDL97: the evaluated photo data library97 version (Lawrence Livermore National Lab.(LLNL), Livermore, CA (United States), 1997).\n\n\n\nF. Sauter. Über den atomaren Photoeffekt in der K-Schale nach der relativistischen Wellenmechanik Diracs. Annalen der Physik 403, 454–488 (1931).\n\n\n\nJ. Baró, M. Roteta, J. Fernández-Varea and F. Salvat. Analytical cross sections for Monte Carlo simulation of photon transport. Radiation physics and chemistry 44, 531–552 (1994).\n\n\n\nY.-S. Tsai. Pair production and bremsstrahlung of charged leptons. Reviews of Modern Physics 46, 815 (1974).\n\n\n\nH. Davies, H. Bethe and L. Maximon. Theory of bremsstrahlung and pair production. II. Integral cross section for pair production. Physical Review 93, 788 (1954).\n\n\n\nI. Kawrakow and D. Rogers. The EGSnrc code system. NRC Report PIRS-701, NRC, Ottawa (2021).\n\n\n\nJ. M. Fernández-Varea, F. Salvat, M. Dingfelder and D. Liljequist. A relativistic optical-data model for inelastic scattering of electrons and positrons in condensed matter. Nuclear Instruments and Methods in Physics Research Section B: Beam Interactions with Materials and Atoms 229, 187–218 (2005).\n\n\n\nC. Møller. Zur theorie des durchgangs schneller elektronen durch materie. Annalen der Physik 406, 531–585 (1932).\n\n\n\nH. Bhabha. The scattering of positrons by electrons with exchange on Dirac’s theory of the positron. Proceedings of the Royal Society of London. Series A-Mathematical and Physical Sciences 154, 195–206 (1936).\n\n\n\nS. M. Seltzer. Cross sections for bremsstrahlung production and electron-impact ionization. In: Monte Carlo transport of electrons and photons (Springer, 1988); pp. 81–114.\n\n\n\nS. Perkins and D. Cullen. The Livermore electron impact ionization data base (Lawrence Livermore National Lab.(LLNL), Livermore, CA (United States), 1989).\n\n\n\nF. Salvat and J. Fernández-Varea. Semiempirical cross sections for the simulation of the energy loss of electrons and positrons in matter. Nuclear Instruments and Methods in Physics Research Section B: Beam Interactions with Materials and Atoms 63, 255–269 (1992).\n\n\n\nF. Salvat. Bethe stopping-power formula and its corrections. Physical Review A 106, 032809 (2022).\n\n\n\nF. Salvat, L. Barjuan and P. Andreo. Inelastic collisions of fast charged particles with atoms: Bethe asymptotic formulas and shell corrections. Physical Review A 105, 042813 (2022).\n\n\n\nJ. H. Scofield. K-and L-shell ionization of atoms by relativistic electrons. Physical Review A 18, 963 (1978).\n\n\n\nF. Salvat and J. M. Fernández-Varea. Overview of physical interaction models for photon and electron transport used in Monte Carlo codes. Metrologia 46, S112 (2009).\n\n\n\nS. Perkins. Tables and Graphs of Atomic Subshell and Relaxation Data Derived from the LLNL Evaluated Atomic Data Library (EADL), Z = 1-100 (Lawrence Livermore National Laboratory, 1991).\n\n\n\nF. Salvat and P. Andreo. SBETHE: Stopping powers of materials for swift charged particles from the corrected Bethe formula. Computer Physics Communications 287, 108697 (2023).\n\n\n\nS. M. Seltzer and M. J. Berger. Evaluation of the collision stopping power of elements and compounds for electrons and positrons. The International Journal of Applied Radiation and Isotopes 33, 1189–1218 (1982).\n\n\n\nS. Seltzer, J. Fernandez-Varea, P. Andreo, P. Bergstrom, D. Burns, I. Krajcar Bronić, C. Ross and F. Salvat. Key data for ionizing-radiation dosimetry: measurement standards and applications, ICRU Report 90 (ICRU, 2016).\n\n\n\nF. Rohrlich and B. Carlson. Positron-electron differences in energy loss and multiple scattering. Physical review 93, 38 (1954).\n\n\n\nU. Fano. Atomic theory of electromagnetic interactions in dense materials. Physical Review 103, 1202 (1956).\n\n\n\nM. Inokuti and D. Y. Smith. Fermi density effect on the stopping power of metallic aluminum. Physical Review B 25, 61 (1982).\n\n\n\nR. M. Sternheimer. The density effect for the ionization loss in various materials. Physical Review 88, 851 (1952).\n\n\n\nT. Lijian, H. Qing and L. Zhengming. Analytic fitting to the Mott cross section of electrons. Radiation Physics and Chemistry 45, 235–245 (1995).\n\n\n\nM. Boschini, C. Consolandi, M. Gervasi, S. Giani, D. Grandi, V. Ivanchenko, P. Nieminem, S. Pensotti, P. Rancoita and M. Tacconi. An expression for the Mott cross section of electrons and positrons on nuclei with Z up to 118. Radiation Physics and Chemistry 90, 39–66 (2013).\n\n\n\nI. Kawrakow. Improved modeling of multiple scattering in the voxel Monte Carlo model. Medical physics 24, 505–517 (1997).\n\n\n\nS. M. Seltzer. An overview of ETRAN Monte Carlo methods. Monte Carlo transport of electrons and photons, 153–181 (1988).\n\n\n\nG. Moliere. Theorie der streuung schneller geladener teilchen i. einzelstreuung am abgeschirmten coulomb-feld. Zeitschrift für Naturforschung A 2, 133–145 (1947).\n\n\n\nU. Fano. Inelastic collisions and the Moliere theory of multiple scattering. Physical Review 93, 117 (1954).\n\n\n\nX. A. Li and D. Rogers. Electron mass scattering powers: Monte Carlo and analytical calculations. Medical Physics 22, 531–541 (1995).\n\n\n\nW. Koepf. Hypergeometric summation. Vieweg, Braunschweig/Wiesbaden 5 (1998).\n\n\n\nI. S. Gradshteyn and I. M. Ryzhik. Table of integrals, series, and products (Academic press, 2014).\n\n\n\nM. Landesman and J. Morel. Angular Fokker-Planck decomposition and representation techniques. Nuclear Science and Engineering 103, 1–11 (1989).\n\n\n\nJ. Morel. On the validity of the extended transport cross-section correction for low-energy electron transport. Nuclear Science and Engineering 71, 64–71 (1979).\n\n\n\nC. R. Drumm, W. C. Fan, L. Lorence and J. Liscum-Powell. An analysis of the extended-transport correction with application to electron beam transport. Nuclear science and engineering 155, 355–366 (2007).\n\n\n\nJ. E. Morel. A hybrid collocation-Galerkin-Sn method for solving the Boltzmann transport equation. Nuclear Science and Engineering 101, 72–87 (1989).\n\n\n\nS. M. Seltzer and M. J. Berger. Bremsstrahlung energy spectra from electrons with kinetic energy 1 keV–10 GeV incident on screened nuclei and orbital electrons of neutral atoms with Z= 1–100. Atomic data and nuclear data tables 35, 345–418 (1986).\n\n\n\nE. Acosta, X. Llovet and F. Salvat. Monte Carlo simulation of bremsstrahlung emission by electrons. Applied Physics Letters 80, 3228–3230 (2002).\n\n\n\nL. Kissel, C. Quarles and R. Pratt. Shape functions for atomic-field bremsstrahlung from electrons of kinetic energy 1–500 keV on selected neutral atoms 1 le Z le 92. Atomic data and nuclear data tables 28, 381–460 (1983).\n\n\n\nL. Kim, R. Pratt, S. Seltzer and M. Berger. Ratio of positron to electron bremsstrahlung energy loss: an approximate scaling law. Physical Review A 33, 3002 (1986).\n\n\n\nF. Salvat, J. Fernández-Varea, J. Sempau and X. Llovet. Monte Carlo simulation of bremsstrahlung emission by electrons. Radiation Physics and Chemistry 75, 1201–1219 (2006).\n\n\n\nA. Poškus. Shape functions and singly differential cross sections of bremsstrahlung at electron energies from 10 eV to 3 MeV for Z= 1–100. Atomic Data and Nuclear Data Tables 129, 101277 (2019).\n\n\n\nW. R. Nelson, H. Hirayama and D. W. Rogers. EGS4 code system (Stanford Linear Accelerator Center, Menlo Park, CA (USA), 1985).\n\n\n\nG. Collaboration and others. Physics reference manual (CERN, Switzerland, 2016).\n\n\n\nA. Naceur, C. Bienvenue, P. Romano, C. Chilian and J.-F. Carrier. Extending deterministic transport capabilities for very-high and ultra-high energy electron beams. Scientific Reports 14, 2796 (2024).\n\n\n\nA. Hébert and A. Naceur. Implementation of the ELECTR module in NJOY. In: EPJ Web of Conferences, Vol. 284 (EDP Sciences, 2023); p. 11001.\n\n\n\nA. Elbert and A. Laforgia. An inequality for Legendre polynomials. Journal of Mathematical Physics 35, 1348–1360 (1994).\n\n\n\nC. Bienvenue and A. Hébert. High-order diamond differencing schemes for the Boltzmann Fokker–Planck equation in 1D and 2D Cartesian geometries. Annals of Nuclear Energy 171, 109032 (2022).\n\n\n\nG. B. Arfken, H. J. Weber and F. E. Harris. Mathematical methods for physicists: a comprehensive guide (Academic press, 2011).\n\n\n\nF. G. Tricomi. Sugli zeri dei polinomi sferici ed ultrasferici. Annali di Matematica Pura ed Applicata 31, 93–97 (1950).\n\n\n\nN. Hale and A. Townsend. Fast and accurate computation of Gauss–Legendre and Gauss–Jacobi quadrature nodes and weights. SIAM Journal on Scientific Computing 35, A652–A674 (2013).\n\n\n\nB. G. Carlson. A method of characteristics and other improvements in solution methods for the transport equation. Nuclear science and engineering 61, 408–425 (1976).\n\n\n\nJ. Bezanson, A. Edelman, S. Karpinski and V. B. Shah. Julia: A fresh approach to numerical computing. SIAM review 59, 65–98 (2017).\n\n\n\n","category":"page"},{"location":"theory_transport_equation/#1.1-The-Steady-State-Transport-Equation","page":"1.1 The Transport Equation","title":"1.1 The Steady-State Transport Equation","text":"","category":"section"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"The linear Boltzmann transport equation (BTE) describes the statistical behavior of particles, like neutrons, photons, or electrons, as they move through and interact with a medium. It is derived based on the enforcement of particle conservation under a few assumptions: 1) the transported particles interact independently, without collective effects or correlations between them, 2) the medium are isotropic in space, and 3) the material and external sources properties does not evolve over time. The derivation of this transport equation can be found in many nuclear engineering textbooks, such as Lewis and Miller [1] or Hébert [2]. For many applications, there is no evolution in time of the variables (i.e. sources or material properties) over time. In such case, the steady-state form of the transport equation is employed.","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"note: Note\nRadiant deals only with steady-state conditions. ","category":"page"},{"location":"theory_transport_equation/#1.1.1-The-steady-state-Linear-Boltzmann-Transport-Equation","page":"1.1 The Transport Equation","title":"1.1.1 The steady-state Linear Boltzmann Transport Equation","text":"","category":"section"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Let E be the particle kinetic energy, mathbfr = (xyz) be the particle position in mathbbR^3, mathbfOmega = (muphi) = (muetaxi) be the moving particle direction, where mu is the principal direction cosine aligned with the x-axis, phi is the azimuthal angle, while eta and xi are the secondary direction cosines under the constraint mu^2+eta^2+xi^2 = 1. Let","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"mathbbS^2 = leftmathbfOmega = (muetaxi) in mathbbR^3  leftleftmathbfOmegarightright = 1right","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"be the unit sphere. Let P be the set of particles to be considered. The steady-state linear BTE for a particle p in P is given by","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"mathbfOmega cdot nabla Phi_p(mathbfrmathbfOmegaE) + Sigma_t^p(mathbfrE) Phi_p(mathbfrmathbfOmegaE) = Q_p^textttB(mathbfrmathbfOmegaE) + Q_p^textttext(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"which solution is given by Phi_p(mathbfrmathbfOmegaE), the angular flux for particle p. It is defined as the product of the population density n_p(mathbfrmathbfOmegaE) and the particle speed v_p(E), i.e.","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Phi_p(mathbfrmathbfOmegaE) = v_p(E) n_p(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"The variable Sigma_t^p(mathbfrE) is the macroscopic total cross-section for particle p. There is also two sources terms, 1) the external fixed volume source, Q_p^textttext(mathbfrmathbfOmegaE), which can represent a radioactive source within the medium for example, and the source associated with the Boltzmann operator, which account for both the particle scattering and production in the medium, that is given by","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Q_p^textttB(mathbfrmathbfOmegaE) = sum_p in P int_mathbbS^2d^2Omegaint_0^inftydE Sigma_s^prightarrow p(mathbfrErightarrow EmathbfOmegarightarrowmathbfOmega) Phi_p(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"where Sigma_s^prightarrow p(mathbfrErightarrow EmathbfOmegarightarrowmathbfOmega) is the macroscopic double differential scattering cross-section describing the probability of a particle p with energy E and direction mathbfOmega to yield a particle p with energy E and direction mathbfOmega. Due to the assumed isotropic properties of the medium, the scattering cross-sections only dependent on the scattering angle mathbfOmegacdotmathbfOmega such as the Boltzmann operator can be rewritten as","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Q_p^textttB(mathbfrmathbfOmegaE) = frac12pisum_p in P int_mathbbS^2d^2Omegaint_0^inftydE Sigma_s^prightarrow p(mathbfrErightarrow EmathbfOmegacdotmathbfOmega) Phi_p(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"The integrated flux for particle p is given by integrating the angular flux over the unit sphere","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Phi_p(mathbfrE) = int_mathbbS^2d^2Omega Phi_p(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"This integrated flux is useful to compute so-called reaction rates, such as energy or charge deposition.","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"note: Note\nRadiant only deals with medium exhibiting isotropic properties. ","category":"page"},{"location":"theory_transport_equation/#1.1.2-The-Fokker-Planck-Equation","page":"1.1 The Transport Equation","title":"1.1.2 The Fokker-Planck Equation","text":"","category":"section"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"While successful with neutral particles such as neutrons and photons in reactor physics, the steady-state BTE becomes inefficient for charged particle transport. This failure is due to the highly forward-peaked scattering of charged particles, the large amount of scattering events due to interactions with atomic electrons in the medium, and the small amount of energy lost in each of these scattering events. An accurate discretization of the energy domain would require an astronomical number of energy meshes to capture these small energy losses effectively [3].","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Under the assumption of forward-peaked and small energy-loss processes, it is possible to derive an alternate form of the Boltzmann operator. Indeed, using Taylor expansion in the direction cosine and energy variables, the Boltzmann operator reduces to the Fokker-Planck (FP) operator. The steady-state FP equation for a particle p in P is given by [4, 5]","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"mathbfOmega cdot nabla Phi_p(mathbfrmathbfOmegaE) + Sigma_a^p(mathbfrE) Phi_p(mathbfrmathbfOmegaE) = Q_p^textttFP(mathbfrmathbfOmegaE) + Q_p^textttext(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"where Sigma_a^p(mathbfrE) is the macroscopic absorption cross-section for particle p and where the FP operator is given by","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Q^textttFP_p(mathbfrmathbfOmegaE) = Q^textttCSD_p(mathbfrmathbfOmegaE) + Q^textttAFP_p(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"where the continuous slowing-down (CSD) operator is given by","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Q^textttCSD_p(mathbfrmathbfOmegaE) = fracpartialpartial Eleft S^p(mathbfrE)Phi_p(mathbfrmathbfOmegaE) vphantomfracpartialpartial E right","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"and the angular Fokker-Planck (AFP) operator is given by","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Q^textttAFP_p(mathbfrmathbfOmegaE) = T^p(mathbfrE) leftfracpartialpartial muleft(1-mu^2right)fracpartialpartial mu + frac11-mu^2fracpartial^2partialphi^2rightPhi_p(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"where S^p(mathbfrE) is the stopping power and T^p(mathbfrE) is the momentum transfer, which are given by [5]","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"S^p(mathbfrE) = int_mathbbS^2d^2Omega int_0^inftydE (E-E) Sigma_s^prightarrow p(mathbfrErightarrow EmathbfOmegacdotmathbfOmega) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"T^p(mathbfrE) = int_mathbbS^2d^2Omega int_0^inftydE (1-mu) Sigma_s^prightarrow p(mathbfrErightarrow EmathbfOmegacdotmathbfOmega) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"A higher-order FP term from the Taylor expansion is often kept, which is the energy straggling operator, and is important to obtain more accurate results [4, 6]. Generalized FP operators also have been developed [7, 8]. While this equation performs well with very fast or heavily charged particles [6], electrons and positrons often change direction when interacting. These large deflections often come with large energy transfers, which cannot be ignored without making significant errors.","category":"page"},{"location":"theory_transport_equation/#1.1.3-The-Boltzmann-Fokker-Planck-Equation","page":"1.1 The Transport Equation","title":"1.1.3 The Boltzmann Fokker-Planck Equation","text":"","category":"section"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"Przybylski and Ligou [9] proposed to divide the scattering events into two domains: soft, which consists of small change of direction and energy-loss, and catastrophic, for large change of direction and energy-loss. The catastrophic interactions are treated with the Boltzmann operator, while the soft interactions are treated with the FP operator. The two domains are defined as a function of the particle energy E by a threshold function E_c(E) le E, over which interactions are considered soft and under which they are considered catastrophic. The steady-state Boltzmann Fokker-Planck (BFP) equation is given by","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"mathbfOmega cdot nabla Phi_p(mathbfrmathbfOmegaE) + Sigma_t^p(mathbfrE) Phi_p(mathbfrmathbfOmegaE) = Q_p^textttB(mathbfrmathbfOmegaE) + Q_p^textttFP(mathbfrmathbfOmegaE) + Q_p^textttext(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"The definition of the cross-sections, stopping powers and momentum transfers change from the BTE and FP equation defined previously. The total and scattering cross-sections are limited to catastrophic events, while the stopping powers and momentum transfers are limited to soft events [10].","category":"page"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"It can be appreciated that the BFP can be seen as a generalization of both BTE and FP equation. The threshold function E_c(E) le E can be choosen, for a given interaction, as 1) E_c(E) = E, which reduces the BFP to the BTE equation, or 2) E_c(E) = 0, which reduces the BFP to the FP equation. Therefore, in the following sections, the discretization will be restricted to the BFP equation since it also encompasses the BTE and FP. Otherwise, the choice of E_c(E) depends on the needs for a given interaction and will be discussed further in the following sections.","category":"page"},{"location":"theory_transport_equation/#1.1.4-The-Lorentz-Force-in-Presence-of-External-Electromagnetic-Fields","page":"1.1 The Transport Equation","title":"1.1.4 The Lorentz Force in Presence of External Electromagnetic Fields","text":"","category":"section"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"note: Note\nRadiant does not have any capabilities for external electromagnetic fields yet.","category":"page"},{"location":"theory_transport_equation/#1.1.5-The-Adjoint-Linear-Transport-Equation","page":"1.1 The Transport Equation","title":"1.1.5 The Adjoint Linear Transport Equation","text":"","category":"section"},{"location":"theory_transport_equation/","page":"1.1 The Transport Equation","title":"1.1 The Transport Equation","text":"note: Note\nRadiant does not containts any adjoint capabilities yet.","category":"page"},{"location":"api_photoelectric/#Structure","page":"Photoelectric","title":"Structure","text":"","category":"section"},{"location":"api_photoelectric/","page":"Photoelectric","title":"Photoelectric","text":"Radiant.Photoelectric","category":"page"},{"location":"api_photoelectric/#Radiant.Photoelectric","page":"Photoelectric","title":"Radiant.Photoelectric","text":"Photoelectric\n\nStructure used to define parameters for production of multigroup photoelectric cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Photon,Photon) => [\"A\"],(Photon,Electron) => [\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Photon,Photon) => [\"A\"] : absorption of incoming photon.\n(Photon,Electron) => [\"P\"] : produced photo-electron.\n\n\n\n\n\n","category":"type"},{"location":"api_photoelectric/#Methods","page":"Photoelectric","title":"Methods","text":"","category":"section"},{"location":"api_photoelectric/","page":"Photoelectric","title":"Photoelectric","text":"Radiant.set_model(this::Radiant.Photoelectric,model::String)\nRadiant.set_interaction_types(this::Radiant.Photoelectric,interaction_types)","category":"page"},{"location":"api_photoelectric/#Radiant.set_model-Tuple{Photoelectric, String}","page":"Photoelectric","title":"Radiant.set_model","text":"set_model(this::Photoelectric,model::String)\n\nTo define the photoelectric model.\n\nInput Argument(s)\n\nthis::Photoelectric : photoelectric structure.\nmodel::String : cross-section model:\njendl5 : evaluated subshell-dependent cross-sections.\nbiggs_lighthill : Biggs and Lighthill cross-sections.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> photoelectric = Photoelectric()\njulia> photoelectric.set_model(\"biggs_lighthill\")\n\n\n\n\n\n","category":"method"},{"location":"api_photoelectric/#Radiant.set_interaction_types-Tuple{Photoelectric, Any}","page":"Photoelectric","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Photoelectric,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for photoelectric processes.\n\nInput Argument(s)\n\nthis::Photoelectric : photoelectric structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Photon,Photon) => [\"A\"] : absorption of incoming photon.\n(Photon,Electron) => [\"P\"] : produced photo-electron.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> photoelectric = Photoelectric()\njulia> photoelectric.set_interaction_types( Dict((Photon,Photon) => [\"A\"],(Photon,Electron) => [\"P\"]) ) # Full photoelectric phenomenon (default case).\n\n\n\n\n\n","category":"method"},{"location":"api_fluorescence/#Structure","page":"Fluorescence","title":"Structure","text":"","category":"section"},{"location":"api_fluorescence/","page":"Fluorescence","title":"Fluorescence","text":"Radiant.Fluorescence","category":"page"},{"location":"api_fluorescence/#Radiant.Fluorescence","page":"Fluorescence","title":"Radiant.Fluorescence","text":"Fluorescence\n\nStructure used to define parameters for production of multigroup fluorescence cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\nηmin::Float64=0.001 : minimum probability of the production of specific fluorescence photon following electron cascades.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Photon,Photon) => [\"P\"],(Electron,Photon) => [\"P\"],(Positron,Photon) => [\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Photon,Photon) => [\"P\"] : production of fluorescence following incident photon ionization of subshells (by photoelectric effect).\n(Electron,Photon) => [\"P\"] : production of fluorescence following incident electrons ionization of subshells (by Møller interaction).\n(Positron,Photon) => [\"P\"] : production of fluorescence following incident positrons ionization of subshells (by Bhabha interaction).\n\n\n\n\n\n","category":"type"},{"location":"api_fluorescence/#Methods","page":"Fluorescence","title":"Methods","text":"","category":"section"},{"location":"api_fluorescence/","page":"Fluorescence","title":"Fluorescence","text":"Radiant.set_interaction_types(this::Radiant.Fluorescence,interaction_types)\nRadiant.set_minimum_probability(this::Radiant.Fluorescence,ηmin::Real)","category":"page"},{"location":"api_fluorescence/#Radiant.set_interaction_types-Tuple{Fluorescence, Any}","page":"Fluorescence","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Fluorescence,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for fluorescence processes.\n\nInput Argument(s)\n\nthis::Fluorescence : fluorescence structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Photon,Photon) => [\"P\"] : production of fluorescence following incident photon ionization of subshells (by photoelectric effect).\n(Electron,Photon) => [\"P\"] : production of fluorescence following incident electrons ionization of subshells (by Møller interaction).\n(Positron,Photon) => [\"P\"] : production of fluorescence following incident positrons ionization of subshells (by Bhabha interaction).\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> fluorescence = Fluorescence()\njulia> fluorescence.set_interaction_types( Dict((Electron,Photon) => [\"P\"]) ) # Only cascades following Møller interactions.\n\n\n\n\n\n","category":"method"},{"location":"api_fluorescence/#Radiant.set_minimum_probability-Tuple{Fluorescence, Real}","page":"Fluorescence","title":"Radiant.set_minimum_probability","text":"set_minimum_probability(this::Fluorescence,ηmin::Real)\n\nTo define the minimum probability of a specific fluorescence production.\n\nInput Argument(s)\n\nthis::Fluorescence : fluorescence structure.\nηmin::Real : minimum probability of a specific fluorescence production.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> fluorescence = Fluorescence()\njulia> fluorescence.set_minimum_probability(0.1) # Only fluorescence photons with probability greater than 10%.\n\n\n\n\n\n","category":"method"},{"location":"theory_energy_discretization/#1.2-Energy-discretization","page":"1.2 Energy Discretization","title":"1.2 Energy discretization","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The energy domain of the transport equation is discretized using finite-element methods. This discretization defines the structure of the atomic data (cross-sections, stopping powers and momentum transfer) to be prepared for transport calculation.","category":"page"},{"location":"theory_energy_discretization/#1.2.1-Classical-Galerkin-Method-of-Weighted-Residuals","page":"1.2 Energy Discretization","title":"1.2.1 Classical Galerkin Method of Weighted Residuals","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"<figure>\n    <img src=\"../energy_groups.png\" alt=\"drawing\" style=\"width: min(550px, 100vw);\"/>\n    <figcaption> Figure 1: Energy Discretization.</figcaption>\n</figure>","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The energy domain is divided G meshes, often refered to as energy group. The convention where g = 1 corresponds to the highest energy group is used. The midpoint energy of the group g is E_g, its width is Delta E_g, and its upper and lower boundaries are respectively E_g-12 and E_g+12, as shown in Fig.1. The lower energy boundary of the lowest energy group, E_G+12, is called the cutoff energy. Particles that scatter or are produced under this energy cutoff are considered to be absorbed locally. It also means that charge and energy are deposited locally. This energy should be chosen carefully, being low enough to ensure that the absorbed particle mean free path is lower than the spatial meshes' width to be realistic.","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The classical multigroup method can be applied assuming that the angular flux is separable in energy, as describe in Lewis and Miller [1]. It also can be developed as a special case of the classical Galerkin method of weighted residuals [11] applied to the energy domain. The change of variable","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"u = frac2E-E_g-12-E_g+122Delta E_g in -1212","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"can be applied to the energy variable E to simplify the application of the method. The BFP equation then becomes","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"beginsplit underbracemathbfOmega cdot nabla Phi_p(mathbfrmathbfOmegau)_mathsfA + underbraceSigma_t^p(mathbfru) Phi_p(mathbfrmathbfOmegau)_mathsfB + underbracefrac-1Delta E_g fracpartialpartial uleft S^p(mathbfru)Phi_p(mathbfrmathbfOmegau) vphantomfracpartialpartial u right_mathsfC  = underbraceQ_p^textttAFP(mathbfrmathbfOmegau)_mathsfD + underbraceQ_p^textttB(mathbfrmathbfOmegau)_mathsfE + underbraceQ_p^textttext(mathbfrmathbfOmegau)_mathsfF endsplit","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"where the energy derivative in the CSD operator have also been affected by this change of variable. The angular flux in group g is expanded up to the M order, namely","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Phi_pg(mathbfrmathbfOmegau) = sum_m=0^M tildeP_m(u) Phi_pg^(m)(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"such as the moment of the angular flux are given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Phi_pg^(m)(mathbfrmathbfOmega) = int_-12^12du tildeP_m(u) Phi_pg(mathbfrmathbfOmegau) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Nonetheless, the total cross-sections, the scattering cross-sections, the momentum transfers and the stopping powers are also expanded up to the M order,","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Sigma_tg^p(mathbfru) = sum_m=0^M tildeP_m(u) Sigma_tg^p(m)(mathbfr)","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Sigma_sgrightarrow g^prightarrow p(mathbfrmathbfOmegacdotmathbfOmegauu) = frac1Delta E_g sum_m=0^M sum_m=0^M tildeP_m(u) tildeP_m(u) Sigma_sgrightarrow g^prightarrow p(mrightarrow m)(mathbfrmathbfOmegacdotmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"T_g^p(mathbfru) = sum_m=0^M tildeP_m(u) T_g^p(m)(mathbfr)","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"S_g^p(mathbfru) = sum_m=0^M tildeP_m(u) S_g^p(m)(mathbfr)","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"such as their m-th moments are given respectively by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Sigma_tg^p(m)(mathbfr) = int_-12^12du tildeP_m(u) Sigma_tg^p(mathbfru)","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Sigma_sgrightarrow g^prightarrow p(mrightarrow m)(mathbfrmathbfOmegacdotmathbfOmega) = Delta E_g int_-12^12du tildeP_m(u)int_-12^12du tildeP_m(u) Sigma_sgrightarrow g^prightarrow p(mathbfrmathbfOmegacdotmathbfOmegauu) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"T_g^p(m)(mathbfr) = int_-12^12du tildeP_m(u) T_g^p(mathbfru)","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"S_g^p(m)(mathbfr) = int_-12^12du tildeP_m(u) S_g^p(mathbfru)","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The goal is to express the BFP equation as a function of these moments, which can be calculated beforehand. Multiplying the BFP equation by the normalized Legendre polynomials P_m(u) and integrating over u in -1212, the m-th moment of the BFP equation, term-per-term, become ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left mathsfA right = mathbfOmega cdot nabla Phi_pg^(m)(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left  mathsfB right = sqrt2m+1 sum_j_2=0^M sum_j_3=0^M sqrt2j_2+1sqrt2j_3+1 mathcalW_mj_2j_3 Sigma_tg^p(j_2)(mathbfr) Phi_pg^(j_3)(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"beginsplit left  mathsfC right = -fracsqrt2m+1Delta E_g left S^p_g-12(mathbfr)Phi_pg-12(mathbfrmathbfOmega) - (-1)^m S^p_g+12(mathbfr)Phi_pg+12(mathbfrmathbfOmega) right  left- sum_j_1=0^m-1 frac2j_1+12 left 1 - (-1)^m-j_1-1 right sum_j_2=0^M sum_j_3=0^M sqrt2j_2+1sqrt2j_3+1 mathcalW_j_1j_2j_3 S_g^p(j_2)(mathbfr)Phi_pg^(j_3)(mathbfrmathbfOmega) right endsplit","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left  mathsfD right = sqrt2m+1 sum_j_2=0^M sum_j_3=0^M sqrt2j_2+1sqrt2j_3+1 mathcalW_mj_2j_3 T_g^p(j_2)(mathbfr) nabla^2_OmegaPhi_pg^(j_3)(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left  mathsfE right = frac12pi sum_p in P int_mathbbS^2d^2Omega sum_g=1^G+1 sum_m=0^M Sigma_sgrightarrow g^prightarrow p(mrightarrow m)(mathbfrmathbfOmegacdotmathbfOmega) Phi_pg^(m)(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"and leftmathsfFright is calculated depending on the definition of the fixed external source inside the medium volume. The function mathcalW_j_1j_2j_3 is defined as","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"mathcalW_j_1j_2j_3 = frac12int_-1^1dx P_j_1(x) P_j_2(x) P_j_3(x) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The variables S^p_gpm12(mathbfr) and Phi_pgpm12(mathbfrmathbfOmega) are the stopping powers and angular flux at the higher (index g-1/2) and lower (index g+1/2) boundaries. These incoming and outgoing flux at energy group boundaries requires to define a closure relation, which will be defined later.","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"warning: Warning\nRADIANT does not include yet all the capabilities for generalized (M  0) Galerkin discretization in energy. It includes generalization for any M only for the CSD term, while also assuming that the stopping powers moments are given by S_g^p(0)(mathbfr) = frac12 left S^p_g-12(mathbfr) + S^p_g+12(mathbfr)rightS_g^p(1)(mathbfr) = frac12sqrt3 left S^p_g-12(mathbfr) - S^p_g+12(mathbfr)right andS_g^p(m)(mathbfr) = 0 quad forall  m ge 2 For all other terms, the following multigroup discretisation is used.","category":"page"},{"location":"theory_energy_discretization/#1.2.2-Multigroup-Discretization","page":"1.2 Energy Discretization","title":"1.2.2 Multigroup Discretization","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The multigroup discetization is the most employed energy discretization method. It is assumed that the particles define in the same energy group share the same energy and averaged energy-dependent variables. The classical multigroup method can be obtained assuming that the angular flux is separable in energy, as describe in Lewis and Miller [1]. It also correspond to taking the Galerkin method of weighted residuals up to order M = 0. The group-averaged angular flux in group g is therefore given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Phi_pg(mathbfrmathbfOmegaE) = Phi_pg(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"with","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Phi_pg(mathbfrmathbfOmega) = frac1Delta E_g int_E_g+12^E_g-12dE Phi_pg(mathbfrmathbfOmegaE) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"where the order index (0) is and will omitted in the following section. The group-averaged total cross-sections, scattering cross-sections, momentum transfers and stopping powers are then given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Sigma_tg^p(mathbfr) = frac1Delta E_gint_E_g+12^E_g-12dE Sigma_tg^p(mathbfrE) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Sigma_sgrightarrow g^prightarrow p(mathbfrmathbfOmegacdotmathbfOmega) = frac1Delta E_g int_E_g+12^E_g-12dE int_E_g+12^E_g-12dE Sigma_sgrightarrow g^prightarrow p(mathbfrErightarrow EmathbfOmegacdotmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"T_g^p(mathbfr) = frac1Delta E_gint_E_g+12^E_g-12dE  T_g^p(mathbfrE) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"S_g^p(mathbfr) = frac1Delta E_gint_E_g+12^E_g-12dE  S_g^p(mathbfrE) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"Because of the energy derivative, transport calculations also requires boundary values of the stopping powers, namely","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"S_g-12^p(mathbfr) = S^p(mathbfrE_g-12) quadtextandquad S_g+12^p(mathbfr) = S^p(mathbfrE_g+12) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The zeroth-th moment of the BFP equation, term-per-term, is given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left mathsfA right = mathbfOmega cdot nabla Phi_pg(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left  mathsfB right = Sigma_tg^p(mathbfr) Phi_pg(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"beginsplit left  mathsfC right = -frac1Delta E_g left S^p_g-12(mathbfr)Phi_pg-12(mathbfrmathbfOmega) - S^p_g+12(mathbfr)Phi_pg+12(mathbfrmathbfOmega) right endsplit","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left  mathsfD right = T_g^p(mathbfr) nabla^2_OmegaPhi_pg(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"left  mathsfE right = frac12pi sum_p in P int_mathbbS^2d^2Omega sum_g=1^G+1 Sigma_sgrightarrow g^prightarrow p(mathbfrmathbfOmegacdotmathbfOmega) Phi_pg(mathbfrmathbfOmega) ","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"and leftmathsfFright is calculated depending on the definition of the fixed external source inside the medium volume.","category":"page"},{"location":"theory_energy_discretization/#1.2.3-Energy-Group-Structure","page":"1.2 Energy Discretization","title":"1.2.3 Energy Group Structure","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The energy domain can be discretized using three pieces of information: the number of groups, G, the mid-point energy of the highest energy group, E_1, and the cutoff energy E_G+12.","category":"page"},{"location":"theory_energy_discretization/#1.2.3.1-Linear-Structure","page":"1.2 Energy Discretization","title":"1.2.3.1 Linear Structure","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The linear structure is characterized by same-size energy group. The mathbftor containing its energy boundaries is given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"mathbfE = left E_G+12 + frack(E_12-E_G+12)G mid k = 012G right","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"where the higher bound of the maximum energy group is given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"E_12 = E_1 + fracE_1-E_G+122G+1 ","category":"page"},{"location":"theory_energy_discretization/#1.2.3.2-Logarithmic-Structure","page":"1.2 Energy Discretization","title":"1.2.3.2 Logarithmic Structure","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The logarithmic structure is given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"mathbfE = left 10^log_10E_G+12 + frack(log_10E_12-log_10E_G+12)G mid k = 012G right","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The higher bound of the maximum energy group is given by solving","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"2E_1 - E_12 - 10^log_10E_12 - left(log_10E_12-log_10E_G+12right)G = 0","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"using a root-finding algorithm.","category":"page"},{"location":"theory_energy_discretization/#1.2.4-Definition-of-soft-and-catastrophic-interactions","page":"1.2 Energy Discretization","title":"1.2.4 Definition of soft and catastrophic interactions","text":"","category":"section"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"<figure>\n    <img src=\"../soft_catas_cutoff.jpg\" alt=\"drawing\" style=\"width: min(750px, 100vw);\"/>\n    <figcaption> Figure 2: Definition of soft and catastrophic interactions.</figcaption>\n</figure>","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"The definition of soft and catastrophic domains on the energy spectrum at group boundaries are shown in Fig.2, where two points (EE_c(E)) are defined as (E_g-12E_g+12) and (E_g+12E_g+32) for any group g, with the additional definition E_G+32 = 0. A smooth transition between these two coordinates is required and is set to be linear in E. The resulting energy dividing the soft and catastrophic domains, for E in E_g-12E_g+12, is given by","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"E_c(E) = left(fracE_g+12-E_g+32E_g-12-E_g+12right) E - fracE_g+12^2-E_g-12E_g+32E_g-12-E_g+12","category":"page"},{"location":"theory_energy_discretization/","page":"1.2 Energy Discretization","title":"1.2 Energy Discretization","text":"for any 1 le g le G.","category":"page"},{"location":"user_guide_transport_calculations/#8-Transport-Calculations","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"","category":"section"},{"location":"user_guide_transport_calculations/#8.1-Executing-Transport-Calculations","page":"8 Transport Calculations","title":"8.1 Executing Transport Calculations","text":"","category":"section"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"A Radiant.Computation_Unit object has been defined in Radiant in order to launch transport calculation by putting together cross-sections, geometry, solvers and sources information. Once instantiated, the user can add these component and run the computation unit, for example:","category":"page"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"c1 = Computation_Unit()\nc1.set_cross_sections(cs)   # Set the cross-section object\nc1.set_geometry(geo)        # Set the geometry object\nc1.set_solvers(solvers)     # Set the solvers\nc1.set_sources(s)           # Set the sources\nc1.run()                    # Execute the transport calculations","category":"page"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"This method ensure the completeness and consistency of the given data.","category":"page"},{"location":"user_guide_transport_calculations/#8.2-Analyzing-Results","page":"8 Transport Calculations","title":"8.2 Analyzing Results","text":"","category":"section"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"When transport calculations are done, the results are saved inside the Radiant.Computation_Unit object. It can be accessed using method, for example","category":"page"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"x = c1.get_voxels_position(\"x\")\nenergy_deposition = c1.get_energy_deposition()\ncharge_deposition = c1.get_charge_deposition()","category":"page"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"to obtain the voxels mid-point along axis x and the corresponding energy or charge deposition. The flux solution for each particle can be accesses using","category":"page"},{"location":"user_guide_transport_calculations/","page":"8 Transport Calculations","title":"8 Transport Calculations","text":"E_electron = c1.get_energies(electron)\nflux_electron = c1.get_flux(electron)","category":"page"},{"location":"theory_impact_ionization/#2.2.1-Impact-Ionization","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"When travelling through the medium, an electron or a positron ionizes atomic electrons in impact ionization. When an inner-shell electron is ionized, a relaxation cascade is initiated. This interaction is the dominant energy-loss phenomenon up to a few MeV for electrons and positrons [26]. The BFP formalism is also used to treat impact ionization. The catastrophic cross-sections are defined by subshell-dependant Møller [27] and Bhabha [28] models, for electrons and positrons respectively, based on models developed by Seltzer [29, 30] and Salvat et al. [26, 31]. The soft stopping powers are developed based on the state-of-the-art stopping power models of Salvat and Andreo [32].","category":"page"},{"location":"theory_impact_ionization/#2.2.1.1-Catastrophic-Inelastic-Cross-Section","page":"2.2.1 Impact Ionization","title":"2.2.1.1 Catastrophic Inelastic Cross-Section","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"he total inelastic cross-section describes the interaction of an incoming electron (p=texttte-) or positron (p=texttte+) with an atomic electron. Such interaction results in the scattering of the incoming particle (p=texttte- or p=texttte+) and the production of knock-on electrons (p=texttte-). The impact ionization is the sum of three components: the close collisions, the distance collisions and a density effect term [30]. Distance collisions consist of the interaction of the incident electron or positron perturbing field, which can ionize atomic electrons and be interpreted as virtual photons producing photoionization [29]. Since catastrophic collisions do not deal with small energy losses and distant collisions result in such energy transfer, they are neglected in the catastrophic cross-section model [33]. The density effect component accounts for the material dielectric polarization and can also be neglected in catastrophic cross-sections since by inspection, the corresponding Scofield cross-section [30, 34] is important only when small energy losses occur.","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The collisional inelastic differential cross-section in energy of the knock-on electron in a monoelemental material i is given by the sum of the differential cross-section per electron subshell k [3, 12, 35]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"sigma_s^i(Erightarrow W) = sum_k=1^N_textttshells Z_ik sigma_s^ik(Erightarrow W) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"where Z_ik is the mean number of electrons in subshells k for element i, E is the incoming electron or positron energy, E is the scattered electron or positron energy and W = E - U_ik - E is the knock-on electron energy, where U_ik is the binding energy of the k^textth subshell. The values of Z_ik and U_ik are extracted from the Evaluated Atomic Data Library (EADL) [36]. The close interaction cross-section is given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"sigma_s^ik(Erightarrow W) = dfrac2pi r_e^2beta^2 F^pm_ik(EW) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"where the subshell-dependant Møller factor, for electrons, is given by [27, 29]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"F^-_ik(EW) = frac1(W+U_ik)^2 + frac1(E-W)^2 + frac1(E+1)^2 - frac(2E+1)(E+1)^2(E-W)(W+U_ik)","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"and the subshell-dependant Bhabha factor, for positrons, is given by [28]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"beginsplit\n    F^+_ik(EW) =  dfrac1(W+U_ik)^2left 1 - b_1left(fracW+U_ikEright) + b_2left(fracW+U_ikEright)^2 right  left- b_3left(fracW+U_ikEright)^3 + b_4left(fracW+U_ikEright)^4 right \n  endsplit","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"with","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"beginsplit\n        b_1 = left(fracgamma-1gammaright)^2 frac2(gamma+1)^2-1gamma^2-1    b_2 = left(fracgamma-1gammaright)^2 frac3(gamma+1)^2+1(gamma+1)^2   b_3 = left(fracgamma-1gammaright)^2 frac2gamma(gamma-1)(gamma+1)^2    b_4 = left(fracgamma-1gammaright)^2 frac(gamma-1)^2(gamma+1)^2 \n    endsplit","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The scattering angles for the incoming particle and knock-on electron are respectively [3]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"mu_p = sqrtfracE(E+2)E(E+2) quad textand quad mu_s = sqrtfracW(E+2)E(W+2)  ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"and their double differential cross-sections are respectively given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"sigma_s(Erightarrow Emu) = dfrac12pisigma_s(Erightarrow E)delta(mu-mu_p)","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"and","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"sigma_s(Erightarrow Wmu) = dfrac12pisigma_s(Erightarrow W)delta(mu-mu_s) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The maximum energy of knock-on for incoming electron and positron, which results from classical kinematics and the indistinguishability of electrons, are given respectively by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"W_textttmax^- = fracE-U_ik2 quad textand quad  W_textttmax^+ = E-U_ik ","category":"page"},{"location":"theory_impact_ionization/#2.2.1.1.1-Scattering-cross-sections-for-incoming-electrons-or-positrons","page":"2.2.1 Impact Ionization","title":"2.2.1.1.1 Scattering cross-sections for incoming electrons or positrons","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The Legendre moments of the differential scattering cross-sections are given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"sigma_sell^ik(Erightarrow E) = 2piint_-1^1dmuP_ell(mu)sigma_s^ik(Erightarrow Emu) = P_ell(mu_p)sigma_s^ik(Erightarrow E) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The macroscopic Legendre moments of the scattering cross-sections for particle scattering from group g are therefore given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"Sigma_sellg^texttte rightarrow texttte(E) = sum_i=1^N_e mathcalN_ni f_i sum_k=1^N_textttshells Z_ik displaystyleint_maxleftE_g+12W_textttmax^pmright^minleftE_g-12E_c(E)E-U_ikrightdE sigma_sell^ik(Erightarrow E) mathcalH_b ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"This equation is evaluated using numerical quadrature.","category":"page"},{"location":"theory_impact_ionization/#2.2.1.1.2-Scattering-cross-sections-for-knock-on-electrons","page":"2.2.1 Impact Ionization","title":"2.2.1.1.2 Scattering cross-sections for knock-on electrons","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The Legendre moments of the differential scattering cross-sections are given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"sigma_sell^ik(Erightarrow W) = 2piint_-1^1dmuP_ell(mu)sigma_s^ik(Erightarrow Wmu) = P_ell(mu_s)sigma_s^ik(Erightarrow W) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"Sigma_sellg^texttte rightarrow texttte-(E) = sum_i=1^N_e mathcalN_ni f_i sum_k=1^N_textttshells Z_ik displaystyleint_E_g+12^minleftE_g-12W_textttmax^pmrightdWsigma_sell^ik(Erightarrow W)  mathcalH_b ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"This equation is evaluated using numerical quadrature.","category":"page"},{"location":"theory_impact_ionization/#2.2.1.1.3-Catastrophic-total-cross-sections","page":"2.2.1 Impact Ionization","title":"2.2.1.1.3 Catastrophic total cross-sections","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The catastrophic inelastic total cross-sections are defined by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"Sigma_t^texttte(E) = sum_i=1^N_e mathcalN_ni f_i sum_k=1^N_textttshells Z_ik int_E-E_c(E)^W_textttmax^pm dW  sigma_s0^ik(Erightarrow W) mathcalH_b ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"which is evaluated analytically.","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"\\subsubsection{Absorption cross-sections for incoming positrons} The inelastic catastrophic absorption cross-sections for inelastic interaction with incoming positrons, which include both soft and catastrophic contributions and are required for annihilation calculations, are given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"Sigma_a^textttinel(E) = sum_i=1^N_e mathcalN_ni f_i sum_k=1^N_textttshells Z_ik int_E-minleftE_G+12E_cright^W_textttmax^+ dW  sigma_s0^ik(Erightarrow W) mathcalH_b ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"which is evaluated analytically.","category":"page"},{"location":"theory_impact_ionization/#2.2.1.2-Soft-stopping-powers","page":"2.2.1 Impact Ionization","title":"2.2.1.2 Soft stopping powers","text":"","category":"section"},{"location":"theory_impact_ionization/#2.2.1.2.1-Total-stopping-power","page":"2.2.1 Impact Ionization","title":"2.2.1.2.1 Total stopping power","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The total collisional stopping powers of electron and positron for any compound, in m_ec^2 times textcm^-1, are given by the density- and shell-corrected Bethe formula [37]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"S_t(E) = frac2pi r_e^2beta^2 mathcalN_e^texttteff left lnleftfracE+22left(fracEI^texttteffright)^2right  + f^(pm) - delta_F - 2mathcalC(E) right ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"where E is the energy of the incoming electron or positron, mathcalN_e^texttteff is the effective electron density in the medium given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"mathcalN_e^texttteff = sum_i=1^N_e mathcalN_ni f_iZ_i ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"with f_i is the weight percent of the i^textth-element of the compound, Z_i is the atomic number of the i^textth-element of the compound. delta_F is the Fermi density effect, defined in the next subsection, and mathcalC(E) is the shell correction, extracted from SBETHE program files [37], a state-of-the-art program to compute stopping power of charged particle. I^texttteff is the effective mean excitation energy of the compound is given by [12]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"I^texttteff = expleftfrac1Z^texttteffdisplaystylesum_i=1^N_e f_iZ_i log(I_i)right  quad textwith quad Z^texttteff = sum_i=1^N_e f_iZ_i ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"where the mean excitation energy of the i^textth-element of the compound is I_i (tabulated by Seltzer and Berger [38]), unless more accurate value is provided. For water, I^texttteff = 78 eV is used, as recommended by the ICRU report 90 [32, 39]. The electron factor f^(-) is given by [40]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"f^(-) = 1 - beta^2 - frac(2E+1)(E+1)^2ln(2) + frac18left(fracEE+1right)^2","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"and the positron factor f^(+) is given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"f^(+) = 2ln(2) - fracbeta^212left23 + frac14E+2 + frac10(E+2)^2 + frac4(E+2)^3right ","category":"page"},{"location":"theory_impact_ionization/#2.2.1.2.2-Fermi-density-effect","page":"2.2.1 Impact Ionization","title":"2.2.1.2.2 Fermi density effect","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The following calculation of the Fermi density effect is the same as described in SBETHE and the same used in the Monte Carlo transport code PENELOPE [12]. It is based on the formula from Fano [41, 42], which is","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"delta_F = frac1Z^texttteffsum_i=1^N_esum_k=1^N_textttshells f_iZ_iklnleft(1+fracL^2W_ik^2right) - fracL^2Omega_p^2(1-beta^2) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"where L is given by solving","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"(1-beta^2) = fracOmega_p^2Z^texttteffsum_i=1^N_esum_k=1^N_textttshellsfracf_iZ_ikW_ik^2+L^2 ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"which can be done using the Newton-bisection method. The plasma energy is given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"Omega_p^2 = 4pimathcalN_e^texttteffhbar^2 c^2r_e^2","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"and the resonance energy in the i^textttth-subshell is [43]","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"W_ik = sqrt(aU_ik)^2+frac23fracZ_ikZ_iOmega_p^2 ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"where a is given by solving","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"Z_ilnleft(I^texttteffright) = sum_k=1^N_textttshells Z_iklnleft(sqrt(aU_ik)^2+frac23fracZ_ikZ_iOmega_p^2right) ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"again using the Newton-bisection method.","category":"page"},{"location":"theory_impact_ionization/#2.2.1.2.3-Soft-stopping-powers","page":"2.2.1 Impact Ionization","title":"2.2.1.2.3 Soft stopping powers","text":"","category":"section"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"The inelastic collisional soft stopping power, S^texttte(E), is given by removing the catastrophic stopping power from the total stopping power. It is given by","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"S^texttte(E) = S_t(E) - sum_i=1^N_e mathcalN_ni f_i sum_k=1^N_textttshells Z_ik displaystyleint_E-E_c(E)^W_textttmax^pmdW (W+U_ik) sigma_s0^ik(Erightarrow W) mathcalH_b ","category":"page"},{"location":"theory_impact_ionization/","page":"2.2.1 Impact Ionization","title":"2.2.1 Impact Ionization","text":"which is evaluated analytically.","category":"page"},{"location":"api_annihilation/#Structure","page":"Annihilation","title":"Structure","text":"","category":"section"},{"location":"api_annihilation/","page":"Annihilation","title":"Annihilation","text":"Radiant.Annihilation","category":"page"},{"location":"api_annihilation/#Radiant.Annihilation","page":"Annihilation","title":"Radiant.Annihilation","text":"Annihilation\n\nStructure used to define parameters for production of multigroup annihilation cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Positron,Positron) => [\"A\"],(Positron,Photon) => [\"P₋\",\"P₊\",\"P_inel\",\"P_brems\"],(Photon,Photon) => [\"P_pp\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Positron,Positron) => [\"A\"] : absorption of the incoming positron.\n(Positron,Photon) => [\"P₋\"] : production of the lowest energy photon following annihilation.\n(Positron,Photon) => [\"P₊\"] : production of the highest energy photon following annihilation.\n(Positron,Photon) => [\"P_inel\"] : production of annihilation photons from inelastic collisional positrons absorption following scattering under the cutoff energy.\n(Positron,Photon) => [\"P_brems\"] : production of annihilation photons from Bremsstrahlung positrons absorption following scattering under the cutoff energy.\n(Photon,Photon) => [\"P_pp\"] : production of annihilation photons from absorption of positrons following their production under the cutoff energy.\n\n\n\n\n\n","category":"type"},{"location":"api_annihilation/#Methods","page":"Annihilation","title":"Methods","text":"","category":"section"},{"location":"api_annihilation/","page":"Annihilation","title":"Annihilation","text":"Radiant.set_interaction_types(this::Radiant.Annihilation,interaction_types)","category":"page"},{"location":"api_annihilation/#Radiant.set_interaction_types-Tuple{Annihilation, Any}","page":"Annihilation","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Annihilation,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for annihilation processes.\n\nInput Argument(s)\n\nthis::Annihilation : annihilation structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Positron,Positron) => [\"A\"] : absorption of the incoming positron.\n(Positron,Photon) => [\"P₋\"] : production of the lowest energy photon following annihilation.\n(Positron,Photon) => [\"P₊\"] : production of the highest energy photon following annihilation.\n(Positron,Photon) => [\"P_inel\"] : production of annihilation photons from inelastic collisional positrons absorption following scattering under the cutoff energy.\n(Positron,Photon) => [\"P_brems\"] : production of annihilation photons from Bremsstrahlung positrons absorption following scattering under the cutoff energy.\n(Photon,Photon) => [\"P_pp\"] : production of annihilation photons from absorption of positrons following their production under the cutoff energy.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> annihilation = Annihilation()\njulia> annihilation.set_interaction_types( Dict((Positron,Positron) => [\"A\"]) ) # Annihilation is set to be only absorption of positrons without any production of photons\n\n\n\n\n\n","category":"method"},{"location":"theory_sweeping_process/#1.6-Sweeping-Process","page":"1.6 Sweeping Process","title":"1.6 Sweeping Process","text":"","category":"section"},{"location":"theory_sweeping_process/","page":"1.6 Sweeping Process","title":"1.6 Sweeping Process","text":"warning: Warning\nIncomplete - Work in progress","category":"page"},{"location":"user_guide_cross_sections/#4-Cross-sections","page":"4 Cross-Sections","title":"4 Cross-sections","text":"","category":"section"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"A cross-sections library in Radiant is represented by the Radiant.Cross_Sections object. Once instantiated, its properties can be configured, and the necessary computations to format for particle transport can be performed.","category":"page"},{"location":"user_guide_cross_sections/#4.1-Generating-Cross-Sections-from-Physics-Models","page":"4 Cross-Sections","title":"4.1 Generating Cross-Sections from Physics Models","text":"","category":"section"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"Radiant provides robust capabilities to produce accurate cross-sections for coupled or uncoupled transport of photons, electrons, and positrons. These cross-sections are derived from physics models and tabulated data. To generate them, several mandatory fields need to be specified:","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"cs = Cross_Sections()                    # Instantiate the cross-sections library\ncs.set_source(\"physics-models\")          # Specify cross-sections generation from physics models\ncs.set_materials(material_list)          # Define the list of materials\ncs.set_particles(particles_list)         # Define the list of particles\ncs.set_energy(10.0)                      # Set the midpoint energy of the highest energy group\ncs.set_cutoff(0.001)                     # Set the cutoff energy\ncs.set_number_of_groups(10)              # Set the number of energy groups\ncs.set_group_structure(\"log\")            # Define the energy group structure\ncs.set_interactions(interactions_list)   # Define the list of physics interactions\ncs.set_legendre_order(7)                 # Specify the Legendre moments order for scattering cross-sections\ncs.build()                               # Compute and build the transfer matrix for transport calculations","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"where","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"material_list is a vector composed of Radiant.Material objects,\nparticles_list is a vector composed of Radiant.Particle objects,\ninteractions_list is a vector composed of Radiant.Interaction objects,","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"for example:","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"material_list = [water]\nparticles_list = [electron, photon]\ninteractions_list = [Inelastic_Leptons(),Elastic_Leptons(),Compton()]","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"Particle-Specific Group Definitions: Radiant supports particle-specific group configurations. The number of energy groups and the energy group structure can differ for each particle. For instance, if three particles are defined, their group settings might be configured as follows:","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"cs.set_number_of_groups([10,30])                  # Set the number of groups\ncs.set_group_structure(\"log\",\"linear\")            # Set the group structure","category":"page"},{"location":"user_guide_cross_sections/#4.2-Generate-Custom-Cross-Sections","page":"4 Cross-Sections","title":"4.2 Generate Custom Cross-Sections","text":"","category":"section"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"note: Note\nThe capabilities to produce custom cross-sections are very limited at the moment.","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"Radiant provides some custom cross-sections capabilities. To generate them, several mandatory fields need to be specified:","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"cs = Cross_Sections()                     # Instantiate the cross-sections library\ncs.set_source(\"custom\")                   # Specify custom cross-sections\ncs.set_materials([mat1,mat2,mat3,mat4])   # Define the list of materials\ncs.set_particles([custom_particle])       # Define the list of particles\ncs.set_absorption([50.0,5.0,0.0,0.1])     # Define the absorption cross-section per material\ncs.set_scattering([0.0,0.0,0.0,0.9])      # Define the scattering (isotropic) cross-section per material\ncs.build()                                # Compute and build the transfer matrix for transport calculations","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"These custom cross-sections capabilities are useful to test discretization schemes.","category":"page"},{"location":"user_guide_cross_sections/#4.3-Read-and-Write-Cross-Sections-from-FMAC-M-files","page":"4 Cross-Sections","title":"4.3 Read and Write Cross-Sections from FMAC-M files","text":"","category":"section"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"Radiant is able to read and to write FMAC-M files. To read FMAC-M files and generate the formatted cross-sections for calculations:","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"cs = Cross_Sections()             # Instantiate the cross-sections library\ncs.set_source(\"fmac-m\")           # Specify the source of data as FMAC-M file\ncs.set_file(\"./fmac_m_file.txt\")  # Set the location and name of the FMAC-M file\ncs.set_materials([water,al])      # Associate the data with material object.  \ncs.build()","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"To write an FMAC-M file, it simply consists of","category":"page"},{"location":"user_guide_cross_sections/","page":"4 Cross-Sections","title":"4 Cross-Sections","text":"cs.write(\"./fmac_m_file.txt\")     # Write the FMAC-M file. ","category":"page"},{"location":"theory_polynomials/#3.1-Polynomials","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"","category":"section"},{"location":"theory_polynomials/#3.1.1-Legendre-polynomials","page":"3.1 Polynomials","title":"3.1.1 Legendre polynomials","text":"","category":"section"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The Legendre polynomials, noted P_ell(x) for ell ge 0, are a complete and orthogonal system defined over x in -11 such as","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"int_-1^1dxP_ell(x)P_ell(x) = frac22ell+1delta_ellell","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"where delta_ellell is the Kronecker delta. They also can be defined as the eigenfunctions of the Legendre's differential equation","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"fracddxleft(1-x^2)fracddxrightP_ell(x) = -ell(ell+1)P_ell(x)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The Legendre polynomials can be calculated using the Bonnet's recursion formula with","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"P_ell(x) = begincases 1  ell = 0  x  ell = 1  leftdfrac2ell-1ellrightxP_ell-1(x) - leftdfracell-1ellrightP_ell-2(x)  ell ge 2 endcases","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"It can be shown that the Legendre polynomials are bounded by [67]","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"leftP_ell(x)right le 1","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The ell-order Legendre moments of a function f(x) can be defined as","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"f_ell = int_-1^1 dx P_ell(x)f(x)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"and, if the function f(x) is positive, triangle inequality applied to integral and using the Legendre polynomial upper bound, we can show the following inequality for ell ge 1 Legendre moments","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"fracleftf_ellrightf_0 = fracleft displaystyleint_-1^1 dx P_ell(x)f(x) right f_0 le fracdisplaystyleint_-1^1 dx leftP_ell(x)rightf(x)f_0 le 1","category":"page"},{"location":"theory_polynomials/#3.1.2-Normalized-Legendre-polynomials","page":"3.1 Polynomials","title":"3.1.2 Normalized Legendre polynomials","text":"","category":"section"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The normalized Legendre polynomials, noted tildeP_ell(x) for ell ge 0, are a complete and orthogonal system defined over x in -1212 such as","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"int_-12^12dxtildeP_ell(x)tildeP_ell(x) = delta_ellell","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"They can be calculated using the following recursion formula [68]","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"tildeP_ell(x) = begincases 1  ell = 0  2sqrt3x  ell = 1  2sqrtdfrac2ell+12ell-1leftdfrac2ell-1ellrightxtildeP_ell-1(x) - sqrtdfrac2ell+12ell-3leftdfracell-1ellrighttildeP_ell-2(x)  ell ge 2 endcases","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"An upper bound for the size of the normalized Legendre polynomial can be derived from the one of the classical Legendre polynomial and is given by","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"lefttildeP_ell(x)right le sqrt2ell+1","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The ell-order normalized Legendre moments of a function f(x) can be defined as","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"f_ell = int_-1^1 dx tildeP_ell(x)f(x)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"and, if the function f(x) is positive, triangle inequality applied to integral and using the normalized Legendre polynomial upper bound, we can show the following inequality for ell ge 1 Legendre moments","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"fracleftf_ellrightf_0 = fracleft displaystyleint_-12^12 dx tildeP_ell(x)f(x) right f_0 le fracdisplaystyleint_-12^12 dx lefttildeP_ell(x)rightf(x)f_0 le sqrt2ell+1","category":"page"},{"location":"theory_polynomials/#3.1.3-Associated-Legendre-polynomials-(Ferrer-definition)","page":"3.1 Polynomials","title":"3.1.3 Associated Legendre polynomials (Ferrer definition)","text":"","category":"section"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The associated Legendre polynomials, using the Ferrer definition in which the factor (-1)^m is absent, is given by","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"P_ell^m(x) = (1-x^2)^m2fracd^mdx^mP_ell(x) quad  0 le m le ell ","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"To compute this term numerically, one can initially use the following identity (from [69], Eq.~15.93)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"P_m^m(x) = (1-x^2)^m2 (2m-1) = (1-x^2)^m2 prod_k=1^m(2k+1)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"If ell = m, then computation is over, otherwise, one should use this second identity (from [69], Eq.~15.94)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"P^m_m+1(x) = (2m+1)xP_m^m(x)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"If ell = m+1, then computation is over, otherwise, this third identity (from [69], Eq.~15.88) iteratively can, since m le ell, be use for all other case","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"P^m_ell(x) = frac(2ell-1)xP^m_ell-1(x)-(ell+m-1)P^m_ell-2(x)ell-m","category":"page"},{"location":"theory_polynomials/#3.1.4-Real-spherical-harmonics","page":"3.1 Polynomials","title":"3.1.4 Real spherical harmonics","text":"","category":"section"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The real spherical harmonics, noted R_ell^m(muphi) for ell ge 0 and m  ell, are a complete and orthogonal system defined over mu in -11 and phi in 02pi such as","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"int_4pid^2Omega R_ell^m(vecOmega) R_ell^m(vecOmega) = frac4pi2ell+1delta_ellelldelta_mm","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"They also can be defined as the eigenfunctions of the Laplace equation given by","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"leftfracpartialpartial muleft(1-mu^2)fracpartialpartial muright + frac11-mu^2fracpartial^2partialphi^2rightR_ell^m = -ell(ell+1)R_ell^m","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"The real spherical harmonics are given by [2]","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"R_ell^m(vecOmega) = sqrt(2-delta_m0)frac(ell-leftmright)(ell+leftmright) P_ell^leftmright(mu) mathcalT_m(phi)","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"with ","category":"page"},{"location":"theory_polynomials/","page":"3.1 Polynomials","title":"3.1 Polynomials","text":"mathcalT_m(phi) = begincases cosmphi quad m ge 0  sinleftmrightphi quad m  0 endcases","category":"page"},{"location":"api_auger/#Structure","page":"Auger ","title":"Structure","text":"","category":"section"},{"location":"api_auger/","page":"Auger ","title":"Auger ","text":"Radiant.Auger","category":"page"},{"location":"api_auger/#Radiant.Auger","page":"Auger ","title":"Radiant.Auger","text":"Auger\n\nStructure used to define parameters for production of multigroup annihilation cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\nηmin::Float64 = 0.001 : minimum probability of the production of specific Auger electrons following electron cascades.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Photon,Electron) => [\"P\"],(Electron,Electron) => [\"P\"],(Positron,Electron) => [\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Photon,Electron) => [\"P\"] : production of Auger electron following incident photon ionization of subshells (by photoelectric effect).\n(Electron,Electron) => [\"P\"] : production of Auger electron following incident electrons ionization of subshells (by Møller interaction).\n(Positron,Electron) => [\"P\"] : production of Auger electron following incident positrons ionization of subshells (by Bhabha interaction).\n\n\n\n\n\n","category":"type"},{"location":"api_auger/#Methods","page":"Auger ","title":"Methods","text":"","category":"section"},{"location":"api_auger/","page":"Auger ","title":"Auger ","text":"Radiant.set_interaction_types(this::Radiant.Auger,interaction_types)\nRadiant.set_minimum_probability(this::Radiant.Auger,ηmin::Real)","category":"page"},{"location":"api_auger/#Radiant.set_interaction_types-Tuple{Auger, Any}","page":"Auger ","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Auger,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for Auger processes.\n\nInput Argument(s)\n\nthis::Auger : Auger structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Photon,Electron) => [\"P\"] : production of Auger electron following incident photon ionization of subshells (by photoelectric effect).\n(Electron,Electron) => [\"P\"] : production of Auger electron following incident electrons ionization of subshells (by Møller interaction).\n(Positron,Electron) => [\"P\"] : production of Auger electron following incident positrons ionization of subshells (by Bhabha interaction).\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> auger = Auger()\njulia> auger.set_interaction_types( Dict((Electron,Electron) => [\"P\"]) ) # Only cascades following Møller interactions.\n\n\n\n\n\n","category":"method"},{"location":"api_auger/#Radiant.set_minimum_probability-Tuple{Auger, Real}","page":"Auger ","title":"Radiant.set_minimum_probability","text":"set_minimum_probability(this::Auger,ηmin::Real)\n\nTo define the minimum probability of a specific Auger electron production.\n\nInput Argument(s)\n\nthis::Auger : Auger structure.\nηmin::Real : minimum probability of a specific Auger electron production.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> auger = Auger()\njulia> auger.set_minimum_probability(0.1) # Only Auger electron with probability greater than 10%.\n\n\n\n\n\n","category":"method"},{"location":"#Radiant","page":"Radiant","title":"Radiant","text":"","category":"section"},{"location":"","page":"Radiant","title":"Radiant","text":"Radiant is a package that performs deterministic transport of ionizing radiation in matter. It specializes in the coupled transport of photons, electrons, and positrons with kinetic energies between 1 keV and 900 MeV.","category":"page"},{"location":"#Installation","page":"Radiant","title":"Installation","text":"","category":"section"},{"location":"","page":"Radiant","title":"Radiant","text":"For Installation Instructions, please refer to the User's Guide.","category":"page"},{"location":"#Overview-of-Features","page":"Radiant","title":"Overview of Features","text":"","category":"section"},{"location":"#Multigroup-Cross-Sections","page":"Radiant","title":"Multigroup Cross-Sections","text":"","category":"section"},{"location":"","page":"Radiant","title":"Radiant","text":"Production of multigroup cross-sections for ionizing radiation\nParticles : photons | electrons | positrons\nInteractions : Photoelectric effect | Compton scattering | Pair production | Rayleigh scattering | Elastic scattering of leptons | Impact ionization | Bremsstrahlung | Annihilation | Relaxation (fluorescence and Auger electrons)\nEnergy : 1 keV to 900 MeV\nEnergy discretization: Linear | Logarithmic\nCompound materials\nCustom cross-sections\nRead and write cross-sections files","category":"page"},{"location":"#Deterministic-Solver","page":"Radiant","title":"Deterministic Solver","text":"","category":"section"},{"location":"","page":"Radiant","title":"Radiant","text":"Solver : Boltzmann transport equation | Boltzmann Fokker-Planck equation | Coupled transport of particles\nMedium : Cartesian geometry in 1D, 2D and 3D | Heterogeneous medium | Void boundary conditions\nFixed external sources : Isotropic volume sources | Monodirectional surface sources\nAngular discretization\nDiscrete ordinates method\nGalerkin quadrature method\nAngular Fokker-Planck discretization : Moment-preserving | Finite-difference\nQuadratures : Gauss-Legendre | Gauss-Lobatto | Gauss-Chebychev product | Carlson's level-symmetric | Lebedev\nSpatial discretization : Generalized diamond difference schemes | Generalized discontinuous Galerkin schemes | Adaptive weighted schemes\nEnergy discretization : Multigroup method | Continuous slowing-down discretization (same as spatial)\nAcceleration methods : Livolant acceleration","category":"page"},{"location":"#Examples","page":"Radiant","title":"Examples","text":"","category":"section"},{"location":"","page":"Radiant","title":"Radiant","text":"Examples for the Radiant package can be found in the GitHub repository Radiant - Examples.","category":"page"},{"location":"api_compton/#Structure","page":"Compton","title":"Structure","text":"","category":"section"},{"location":"api_compton/","page":"Compton","title":"Compton","text":"Radiant.Compton","category":"page"},{"location":"api_compton/#Radiant.Compton","page":"Compton","title":"Radiant.Compton","text":"Compton\n\nStructure used to define parameters for production of multigroup Compton cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Photon,Photon) => [\"S\"],(Photon,Electron) => [\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Photon,Photon) => [\"S\"] : scattering of incident photon following Compton interaction.\n(Photon,Electron) => [\"P\"] : produced electron following Compton interaction.\n\n\n\n\n\n","category":"type"},{"location":"api_compton/#Methods","page":"Compton","title":"Methods","text":"","category":"section"},{"location":"api_compton/","page":"Compton","title":"Compton","text":"Radiant.set_interaction_types(this::Radiant.Compton,interaction_types)","category":"page"},{"location":"api_compton/#Radiant.set_interaction_types-Tuple{Compton, Any}","page":"Compton","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Compton,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for Compton processes.\n\nInput Argument(s)\n\nthis::Compton : compton structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Photon,Photon)   => [\"S\"] : scattering of incident photon following Compton interaction.\n(Photon,Electron) => [\"P\"] : produced electron following Compton interaction.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> compton = Compton()\njulia> compton.set_interaction_types( Dict((Photon,Photon) => [\"S\"]) ) # Electron are absorbed following Compton interaction.\n\n\n\n\n\n","category":"method"},{"location":"api_inelastic_leptons/#Structure","page":"Inelastic_Leptons","title":"Structure","text":"","category":"section"},{"location":"api_inelastic_leptons/","page":"Inelastic_Leptons","title":"Inelastic_Leptons","text":"Radiant.Inelastic_Leptons","category":"page"},{"location":"api_inelastic_leptons/#Radiant.Inelastic_Leptons","page":"Inelastic_Leptons","title":"Radiant.Inelastic_Leptons","text":"Inelastic_Leptons\n\nStructure used to define parameters for production of multigroup inelastic collisional cross-sections for leptons.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Positron,Positron) => [\"S\"],(Positron,Electron) => [\"P\"],(Electron,Electron) => [\"S\",\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Positron,Positron) => [\"S\"] : scattering of incident positrons\n(Electron,Electron) => [\"S\"] : scattering of incident electrons\n(Positron,Electron) => [\"P\"] : production of electrons by incident positrons\n(Electron,Electron) => [\"P\"] : production of electrons by incident electrons\n\n\n\n\n\n","category":"type"},{"location":"api_inelastic_leptons/#Methods","page":"Inelastic_Leptons","title":"Methods","text":"","category":"section"},{"location":"api_inelastic_leptons/","page":"Inelastic_Leptons","title":"Inelastic_Leptons","text":"Radiant.set_density_correction(this::Radiant.Inelastic_Leptons,density_correction::String)\nRadiant.set_is_shell_correction(this::Radiant.Inelastic_Leptons,is_shell_correction::Bool)\nRadiant.set_is_subshells_dependant(this::Radiant.Inelastic_Leptons,is_subshells_dependant::Bool)\nRadiant.set_interaction_types(this::Radiant.Inelastic_Leptons,interaction_types)","category":"page"},{"location":"api_inelastic_leptons/#Radiant.set_density_correction-Tuple{Inelastic_Leptons, String}","page":"Inelastic_Leptons","title":"Radiant.set_density_correction","text":"set_density_correction(this::Inelastic_Leptons,density_correction::String)\n\nSet the Fermi density correction.\n\nInput Argument(s)\n\nthis::Inelastic_Leptons : inelastic leptons structure.\ndensity_correction::String : type of density effect:\nfano : Fano density effect.\nsternheimer : Sternheimer semi-empirical density effect.\nnone : no density effect.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Inelastic_Leptons()\njulia> elastic_leptons.set_density_correction(\"sternheimer\")\n\n\n\n\n\n","category":"method"},{"location":"api_inelastic_leptons/#Radiant.set_is_shell_correction-Tuple{Inelastic_Leptons, Bool}","page":"Inelastic_Leptons","title":"Radiant.set_is_shell_correction","text":"set_is_shell_correction(this::Inelastic_Leptons,is_shell_correction::Bool)\n\nActivate or desactivate shell correction for stopping powers.\n\nInput Argument(s)\n\nthis::Inelastic_Leptons : inelastic leptons structure.\nis_shell_correction::Bool : activate (true) or desactivate (false) the shell correction.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Inelastic_Leptons()\njulia> elastic_leptons.set_is_shell_correction(false)\n\n\n\n\n\n","category":"method"},{"location":"api_inelastic_leptons/#Radiant.set_is_subshells_dependant-Tuple{Inelastic_Leptons, Bool}","page":"Inelastic_Leptons","title":"Radiant.set_is_subshells_dependant","text":"set_is_subshells_dependant(this::Inelastic_Leptons,is_subshells_dependant::Bool)\n\nCompute the inelastic cross-sections assuming bounded or unbounded electrons.\n\nInput Argument(s)\n\nthis::Inelastic_Leptons : inelastic leptons structure.\nis_subshells_dependant::Bool : bounded (true) or unbounded (false) electrons.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Inelastic_Leptons()\njulia> elastic_leptons.set_is_subshells_dependant(false)\n\n\n\n\n\n","category":"method"},{"location":"api_inelastic_leptons/#Radiant.set_interaction_types-Tuple{Inelastic_Leptons, Any}","page":"Inelastic_Leptons","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Inelastic_Leptons,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for inelastic leptons processes.\n\nInput Argument(s)\n\nthis::Inelastic_Leptons : inelastic leptons structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Positron,Positron) => [\"S\"] : scattering of incident positrons\n(Electron,Electron) => [\"S\"] : scattering of incident electrons\n(Positron,Electron) => [\"P\"] : production of electrons by incident positrons\n(Electron,Electron) => [\"P\"] : production of electrons by incident electrons\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Inelastic_Leptons()\njulia> elastic_leptons.set_interaction_types( Dict((Electron,Electron) => [\"S\"]) ) # No knock-on electrons.\n\n\n\n\n\n","category":"method"},{"location":"theory_quadrature/#3.2-Quadratures","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"","category":"section"},{"location":"theory_quadrature/#3.2.1-Gauss-Legendre-quadrature","page":"3.2 Quadratures","title":"3.2.1 Gauss-Legendre quadrature","text":"","category":"section"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The N-order Gauss-Legendre quadrature is defined over x in -11. It gives exact result for polynomial of degree 2N-1 or less. The i-th node x_i correspond to the i-th root of the Legendre polynomial P_N(x). It can be found using Newton iteration method, if a good choice of initial node is done. Such a choice is proposed by Tricomi [70, 71]:","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"x_i^0 = left1 - fracN-18N^3 - frac1384N^4left(39-frac28sin^2(phi_i)right)rightcos(phi_i)","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"with","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"phi_i = fracpi2left(frac4i-12N+1right)","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The derivative of Legendre polynomial, needed for the Newton method, is given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"P_N(x) = fracNleft(P_N-1(x)-xP_N(x)right)1-x^2","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"Finally, the weights are given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"omega_i = frac2(1-x_i^2)left(P_N(x_i)right)^2","category":"page"},{"location":"theory_quadrature/#3.2.2-Gauss-Lobatto-quadrature","page":"3.2 Quadratures","title":"3.2.2 Gauss-Lobatto quadrature","text":"","category":"section"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The N-order Gauss-Lobatto quadrature is defined over x in -11. It gives accurate result for polynomial of degree 2N-3 or less. The i-th node x_i correspond to the (i-1)-th root of the Legendre polynomial derivative P_N-1(x). The first and last node are respectively x_1 = -1 and x_N = 1. It can be found using Newton iteration method, if a good choice of initial node is done. A good choice of initial value is","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"x_i = cosleft((i-1)fracpiN-1right)","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The second derivative of Legendre polynomial, needed for the Newton method, is given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"P_N(x) = frac2xP_N(x)-N(N+1)P_N(x)1-x^2","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"Finally, the weights are given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"omega_i = begincasesdfrac2n(n-1)left(P_N-1(x_i)right)^2  x_i neq pm 1 dfrac2n(n-1)  textotherwiseendcases","category":"page"},{"location":"theory_quadrature/#3.2.3-Product-quadrature-with-Chebychev-azimuthal-quadrature","page":"3.2 Quadratures","title":"3.2.3 Product quadrature with Chebychev azimuthal quadrature","text":"","category":"section"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The N-order product quadrature with Chebychev azimuthal quadrature is defined over the unit sphere. This method is symmetric over 8 octants and has no evaluation point along the reference frame axis. The points distribution over the sphere is uneven. The quadrature has N level containing 2N points each. The total number of directions is","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"N_d = 2N^2","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"For a level n in 1N and the point m in 12N on that level, corresponding to an index i = 2N(n-1)+m, with mu_n and w_n being the nodes and weights of the N-order quadrature over a line segment (e.g. Gauss-Legendre), the direction cosines are given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"beginsplit mu_i = mu_n  eta_i = sqrt1-mu_n^2cos(phi_m)  xi_i = sqrt1-mu_n^2sin(phi_m) endsplit","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"where ","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"phi_m = frac(2m-1)pi2N","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"and the corresponding weight is given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"w_i = w_n fracpiN","category":"page"},{"location":"theory_quadrature/#3.2.4-Carlson-quadrature","page":"3.2 Quadratures","title":"3.2.4 Carlson quadrature","text":"","category":"section"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The Carlson quadrature [72] is defined over the unit sphere and require less evaluation point than product quadrature. This method is symmetric over 8 octants and has no evaluation point along the reference frame axis. In the octant with positive cosines, with N-order Carlson quadrature, the weight are given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"omega_m = frac4(N-2n+2)N(N+2)","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"with m in left1N2right. The main director cosine is given by","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"mu_m = barmu_m + fmu_m-12","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"with","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"barmu_m = 1 - frac(N-2n+2)^2N(N+2)","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"and","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"mu_m-12 = 1 - frac(N-2n+2)(N-2n+4)N(N+2)","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"The factor f is determined by finding the root of the following equation ","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"sum_m=1^N2omega_mmu_m^2 = 13","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"using the Newton-bisection method. The two other director cosines are given","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"eta_mk = sqrt1-mu_m^2sintheta_mk quad textand quad xi_mk = sqrt1-mu_m^2costheta_mk","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"where","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"theta_mk = fracpi2leftfrac2m-1N-2k+2A_n+frac1-A_n2right","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"with k in left1N2-m+1right. The A_n factors are determined by finding the root of the following equation ","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"omega_0sum_m=1^N2sum_m=1^N2-m+1eta_mk = sum_m=1^N2omega_mmu_m","category":"page"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"using the Newton-bisection.","category":"page"},{"location":"theory_quadrature/#3.2.5-Lebedev-quadrature","page":"3.2 Quadratures","title":"3.2.5 Lebedev quadrature","text":"","category":"section"},{"location":"theory_quadrature/","page":"3.2 Quadratures","title":"3.2 Quadratures","text":"warning: Warning\nIncomplete - Work in progress","category":"page"},{"location":"api_elastic_leptons/#Structure","page":"Elastic_Leptons","title":"Structure","text":"","category":"section"},{"location":"api_elastic_leptons/","page":"Elastic_Leptons","title":"Elastic_Leptons","text":"Radiant.Elastic_Leptons","category":"page"},{"location":"api_elastic_leptons/#Radiant.Elastic_Leptons","page":"Elastic_Leptons","title":"Radiant.Elastic_Leptons","text":"Elastic_Leptons\n\nStructure used to define parameters for production of multigroup elastic cross-sections for leptons.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Electron,Electron) => [\"S\"],(Positron,Positron) => [\"S\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Electron,Electron) => [\"S\"] : elastic interaction of electrons.\n(Positron,Positron) => [\"S\"] : elastic interaction of positrons.\n\n\n\n\n\n","category":"type"},{"location":"api_elastic_leptons/#Methods","page":"Elastic_Leptons","title":"Methods","text":"","category":"section"},{"location":"api_elastic_leptons/","page":"Elastic_Leptons","title":"Elastic_Leptons","text":"Radiant.set_model(this::Radiant.Elastic_Leptons,model::String)\nRadiant.set_transport_correction(this::Radiant.Elastic_Leptons,is_ETC::Bool)\nRadiant.set_solver(this::Radiant.Elastic_Leptons,solver::String)\nRadiant.set_interaction_types(this::Radiant.Elastic_Leptons,interaction_types)","category":"page"},{"location":"api_elastic_leptons/#Radiant.set_model-Tuple{Elastic_Leptons, String}","page":"Elastic_Leptons","title":"Radiant.set_model","text":"set_model(this::Elastic_Leptons,model::String,is_KC::Bool=true)\n\nTo define the elastic scattering model.\n\nInput Argument(s)\n\nthis::Elastic_Leptons : elastic leptons structure.\nmodel::String : model of elastic scattering:\nrutherford : screened Rutherford cross-sections.\nmott : screened Mott cross-sections.\nis_KC::Bool : Apply Karakow correction (true) or not (false).\nis_SC::Bool : Apply Seltzer correction (true) or not (false).\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Elastic_Leptons()\njulia> elastic_leptons.set_model(\"rutherford\")\n\n\n\n\n\n","category":"method"},{"location":"api_elastic_leptons/#Radiant.set_transport_correction-Tuple{Elastic_Leptons, Bool}","page":"Elastic_Leptons","title":"Radiant.set_transport_correction","text":"set_transport_correction(this::Elastic_Leptons,is_ETC::Bool)\n\nEnable or not extended transport correcton.\n\nInput Argument(s)\n\nthis::Elastic_Leptons : elastic leptons structure.\nis_ETC::Bool : Enable (true) or not (false) extended transport correcton.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Elastic_Leptons()\njulia> elastic_leptons.is_ETC(false)\n\n\n\n\n\n","category":"method"},{"location":"api_elastic_leptons/#Radiant.set_solver-Tuple{Elastic_Leptons, String}","page":"Elastic_Leptons","title":"Radiant.set_solver","text":"set_solver(this::Elastic_Leptons,solver::String)\n\nDictate how the cross-sections is distributed to the Boltzmann and the Fokker-Planck operators.\n\nInput Argument(s)\n\nthis::Elastic_Leptons : elastic leptons structure.\nsolver::String :  model of elastic scattering:\nBTE : the cross-sections are made to be used with the Boltzmann operator.\nFP : the cross-sections are made to be used with the Fokker-Planck operator.\nBFP : the cross-sections are distributed to the Boltzmann and Fokker-Planck operator.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Elastic_Leptons()\njulia> elastic_leptons.is_AFP(false)\n\n\n\n\n\n","category":"method"},{"location":"api_elastic_leptons/#Radiant.set_interaction_types-Tuple{Elastic_Leptons, Any}","page":"Elastic_Leptons","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Elastic_Leptons,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for Elastic_Leptons processes.\n\nInput Argument(s)\n\nthis::Elastic_Leptons : elastic leptons structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Electron,Electron) => [\"S\"] : elastic interaction of electrons.\n(Positron,Positron) => [\"S\"] : elastic interaction of positrons.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> elastic_leptons = Elastic_Leptons()\njulia> elastic_leptons.set_interaction_types( Dict((Positron,Positron) => [\"S\"]) ) # Elastic only for positrons\n\n\n\n\n\n","category":"method"},{"location":"api_fixed_source/#Structure","page":"Fixed_Sources","title":"Structure","text":"","category":"section"},{"location":"api_fixed_source/","page":"Fixed_Sources","title":"Fixed_Sources","text":"Radiant.Fixed_Sources","category":"page"},{"location":"api_fixed_source/#Radiant.Fixed_Sources","page":"Fixed_Sources","title":"Radiant.Fixed_Sources","text":"Fixed_Sources\n\nStructure used to define a collection of fixed sources and their properties.\n\nMandatory field(s)\n\nsources_list::Vector{Source} : list of VolumeSource or SurfaceSource sources.\ncross_sections : Cross_Sections structure.\ngeometry : Geometry structure.\nsolvers : Solvers structure.\n\nOptional field(s) - with default values\n\nN/A\n\n\n\n\n\n","category":"type"},{"location":"api_fixed_source/#Methods","page":"Fixed_Sources","title":"Methods","text":"","category":"section"},{"location":"api_fixed_source/","page":"Fixed_Sources","title":"Fixed_Sources","text":"Radiant.add_source(this::Radiant.Fixed_Sources,fixed_source::Union{Radiant.Surface_Source,Radiant.Volume_Source})","category":"page"},{"location":"api_fixed_source/#Radiant.add_source-Tuple{Fixed_Sources, Union{Surface_Source, Volume_Source}}","page":"Fixed_Sources","title":"Radiant.add_source","text":"add_source(this::Fixed_Sources,fixed_source::Union{Surface_Source,Volume_Source})\n\nTo add a surface or volume source to the Fixed_Sources structure.\n\nInput Argument(s)\n\nthis::Fixed_Sources : collection of fixed sources.\nfixed_source::Union{Surface_Source,Volume_Source} : volume or surface source.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> vs = Volume_Source()\njulia> ... # Define the volume source properties\njulia> fs = Fixed_Sources()\njulia> fs.add_source(vs)\n\n\n\n\n\n","category":"method"},{"location":"theory_interpolation/#3.3-Interpolations","page":"3.3 Interpolations","title":"3.3 Interpolations","text":"","category":"section"},{"location":"theory_interpolation/","page":"3.3 Interpolations","title":"3.3 Interpolations","text":"warning: Warning\nIncomplete - Work in progress","category":"page"},{"location":"api_discrete_ordinates/#Structure","page":"Discrete_Ordinates","title":"Structure","text":"","category":"section"},{"location":"api_discrete_ordinates/","page":"Discrete_Ordinates","title":"Discrete_Ordinates","text":"Radiant.Discrete_Ordinates","category":"page"},{"location":"api_discrete_ordinates/#Radiant.Discrete_Ordinates","page":"Discrete_Ordinates","title":"Radiant.Discrete_Ordinates","text":"Discrete_Ordinates\n\nStructure used to define the discretization method associated with the transport of a particle.\n\nMandatory field(s)\n\nparticle::Particle : particle for which the discretization methods is defined\nsolver_type::String : type of solver for the transport calculations.\nquadrature_type::String : type of quadrature for the angular domain.\nquadrature_order::Int64 : order of the quadrature for the angular domain.\nlegendre_order::Int64 : maximum order of the Legendre expansion for the differential cross-sections.\nscheme_type::Dict{String,String} : type of schemes for the spatial or energy discretization.\nscheme_order::Dict{String,Int64} : order of the expansion for the discretization schemes.\n\nOptional field(s) - with default values\n\nangular_fokker_planck::String = \"finite-difference\" : type of discretization for the angular Fokker-Planck operation.\nangular_boltzmann::String = \"galerkin-d\" : type of discretization for the Boltzmann operation.\nconvergence_criterion::Float64 = 1e-7 : convergence criterion of in-group iterations.\nmaximum_iteration::Int64 = 300 : maximum number of in-group iterations.\nacceleration::Int64 = \"none\" : acceleration method for the in-group iterations.\n\n\n\n\n\n","category":"type"},{"location":"api_discrete_ordinates/#Methods","page":"Discrete_Ordinates","title":"Methods","text":"","category":"section"},{"location":"api_discrete_ordinates/","page":"Discrete_Ordinates","title":"Discrete_Ordinates","text":"Radiant.set_particle(this::Radiant.Discrete_Ordinates,particle::Particle)\nRadiant.set_solver_type(this::Radiant.Discrete_Ordinates,solver_type::String)\nRadiant.set_quadrature(this::Radiant.Discrete_Ordinates,type::String,order::Int64)\nRadiant.set_legendre_order(this::Radiant.Discrete_Ordinates,legendre_order::Int64)\nRadiant.set_angular_fokker_planck(this::Radiant.Discrete_Ordinates,angular_fokker_planck::String)\nRadiant.set_angular_boltzmann(this::Radiant.Discrete_Ordinates,angular_boltzmann::String)\nRadiant.set_convergence_criterion(this::Radiant.Discrete_Ordinates,convergence_criterion::Float64)\nRadiant.set_maximum_iteration(this::Radiant.Discrete_Ordinates,maximum_iteration::Int64)\nRadiant.set_scheme(this::Radiant.Discrete_Ordinates,axis::String,scheme_type::String,scheme_order::Int64)\nRadiant.set_acceleration(this::Radiant.Discrete_Ordinates,acceleration::String)","category":"page"},{"location":"api_discrete_ordinates/#Radiant.set_particle-Tuple{Discrete_Ordinates, Particle}","page":"Discrete_Ordinates","title":"Radiant.set_particle","text":"set_particle(this::Discrete_Ordinates,particle::Particle)\n\nTo set the particle for which the transport discretization method is for. \n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nparticle::Particle : particle.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_particle(electron) \n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_solver_type-Tuple{Discrete_Ordinates, String}","page":"Discrete_Ordinates","title":"Radiant.set_solver_type","text":"set_solver_type(this::Discrete_Ordinates,solver_type::String)\n\nTo set the solver for the particle transport.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nsolver_type::String : solver type, which can takes the following values:\nsolver_type = \"BTE\" : Boltzmann transport equation\nsolver_type = \"BFP\" : Boltzmann Fokker-Planck equation\nsolver_type = \"BCSD\" : Boltzmann-CSD equation\nsolver_type = \"FP\" : Fokker-Planck equation\nsolver_type = \"CSD\" : Continuous slowing-down only equation\nsolver_type = \"BFP-EF\" : Boltzmann Fokker-Planck without elastic\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_particle(\"BFP\")\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_quadrature-Tuple{Discrete_Ordinates, String, Int64}","page":"Discrete_Ordinates","title":"Radiant.set_quadrature","text":"set_quadrature(this::Discrete_Ordinates,type::String,order::Int64,Qdims::Int64=0)\n\nTo set the quadrature properties for the discretization of the angular domain.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\ntype::String : type of quadrature, which can takes the following values:\ntype = \"gauss-legendre\" : Gauss-Legendre quadrature (1D Cartesian geometry only).\ntype = \"gauss-lobatto\" : Gauss-Lobatto quadrature (1D Cartesian geometry only).\ntype = \"carlson\" : Carlson quadrature (2D or 3D Cartesian geometry only).\ntype = \"gauss-legendre-chebychev\" : product quadrature between Gauss-Legendre and Chebychev quadratures (2D or 3D Cartesian geometry only).\ntype = \"lebedev\" : Lebedev quadrature (2D or 3D Cartesian geometry only).\norder::Int64 : order of the quadrature, which is any integer greater than 2.\nQdims::Int64 : quadrature dimension, which can takes the following values:\nQdims = 0 : default value, Qdims = 1 with 1D quadrature, Qdims = 2 with quadrature over the unit sphere in 1D or in 2D geometry and Qdims = 3 in 3D geometry.\nQdims = 1 : 1D quadrature.\nQdims = 2 : quadrature over half the unit-sphere.\nQdims = 3 : quadrature over the unit sphere. \n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_quadrature(\"gauss-legendre\",4)\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_legendre_order-Tuple{Discrete_Ordinates, Int64}","page":"Discrete_Ordinates","title":"Radiant.set_legendre_order","text":"set_legendre_order(this::Discrete_Ordinates,legendre_order::Int64)\n\nTo set the maximum order of the Legendre expansion of the differential cross-sections.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nlegendre_order::Int64 : maximum order of the Legendre expansion of the differential cross-sections.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_legendre_order(7)\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_angular_fokker_planck-Tuple{Discrete_Ordinates, String}","page":"Discrete_Ordinates","title":"Radiant.set_angular_fokker_planck","text":"set_angular_fokker_planck(this::Discrete_Ordinates,angular_fokker_planck::String)\n\nTo set the discretization method for the angular Fokker-Planck term.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nangular_fokker_planck::String : discretization method for the angular Fokker-Planck term, which can takes the following values:\nangular_fokker_planck = \"finite-difference\" : finite difference discretization.\nangular_fokker_planck = \"galerkin\" : galerkin moment-based discretization.\nangular_fokker_planck = \"differential-quadrature\" : finite difference discretization (1D Cartesian geometry only).\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_angular_fokker_planck(\"differential-quadrature\")\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_angular_boltzmann-Tuple{Discrete_Ordinates, String}","page":"Discrete_Ordinates","title":"Radiant.set_angular_boltzmann","text":"set_angular_boltzmann(this::Discrete_Ordinates,angular_boltzmann::String)\n\nTo set the angular discretization method for the Boltzmann operator.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nangular_boltzmann::String : angular discretization method for the Boltzmann operator, which can takes the following values:\nangular_boltzmann = \"standard\" : standard discrete ordinates (SN) method.\nangular_boltzmann = \"galerkin-m\" : Galerkin method by inversion of the discrete-to-moment M matrix.\nangular_boltzmann = \"galerkin-d\" : Galerkin method by inversion of the moment-to-discrete D matrix.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_angular_boltzmann(\"standard\")\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_convergence_criterion-Tuple{Discrete_Ordinates, Float64}","page":"Discrete_Ordinates","title":"Radiant.set_convergence_criterion","text":"set_convergence_criterion(this::Discrete_Ordinates,convergence_criterion::Float64)\n\nTo set the convergence criterion for the in-group iterations.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nconvergence_criterion::Float64 : convergence criterion.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_convergence_criterion(1e-5)\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_maximum_iteration-Tuple{Discrete_Ordinates, Int64}","page":"Discrete_Ordinates","title":"Radiant.set_maximum_iteration","text":"set_maximum_iteration(this::Discrete_Ordinates,maximum_iteration::Int64)\n\nTo set the maximum number of in-group iterations.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nmaximum_iteration::Int64 : maximum number of in-group iterations.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_maximum_iteration(50)\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_scheme-Tuple{Discrete_Ordinates, String, String, Int64}","page":"Discrete_Ordinates","title":"Radiant.set_scheme","text":"set_scheme(this::Discrete_Ordinates,axis::String,scheme_type::String,scheme_order::Int64)\n\nTo set the type of discretization scheme for derivative along the specified spatial or energy axis.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\naxis::String : variable of the derivative for which the scheme is applied, which can takes the following values:\naxis = \"x\" : spatial x axis (discretization of the streaming term)\naxis = \"y\" : spatial y axis (discretization of the streaming term)\naxis = \"z\" : spatial z axis (discretization of the streaming term)\naxis = \"E\" : spatial E axis (discretization of the continuous slowing-down term)\nscheme_type::String : type of scheme to be applied, which can takes the following values:\nscheme_type = \"DD\" : diamond difference scheme (any order)\nscheme_type = \"DG\" : discontinuous Galerkin scheme (any order)\nscheme_type = \"AWD\" : adaptive weighted scheme (1st and 2nd order only)\nscheme_order::Int64 : scheme order, which takes values greater than 1.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_scheme(\"x\",\"DD\",1)\njulia> m.set_scheme(\"E\",\"DG\",2)\n\n\n\n\n\n","category":"method"},{"location":"api_discrete_ordinates/#Radiant.set_acceleration-Tuple{Discrete_Ordinates, String}","page":"Discrete_Ordinates","title":"Radiant.set_acceleration","text":"set_acceleration(this::Discrete_Ordinates,acceleration::String)\n\nTo set the acceleration method for the in-group iteration process.\n\nInput Argument(s)\n\nthis::Discrete_Ordinates : discretization method.\nacceleration::String : acceleration method, which takes the following values\nacceleration = \"none\" : none\nacceleration = \"livolant\" : livolant acceleration method\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> m.set_acceleration(\"livolant\")\n\n\n\n\n\n","category":"method"},{"location":"api_rayleigh/#Structure","page":"Rayleigh","title":"Structure","text":"","category":"section"},{"location":"api_rayleigh/","page":"Rayleigh","title":"Rayleigh","text":"Radiant.Rayleigh","category":"page"},{"location":"api_rayleigh/#Radiant.Rayleigh","page":"Rayleigh","title":"Radiant.Rayleigh","text":"Rayleigh\n\nStructure used to define parameters for production of multigroup Rayleigh cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Photon,Photon) => [\"S\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Photon,Photon) => [\"S\"] : elastic scattering of photons\n\n\n\n\n\n","category":"type"},{"location":"api_rayleigh/#Methods","page":"Rayleigh","title":"Methods","text":"","category":"section"},{"location":"api_rayleigh/","page":"Rayleigh","title":"Rayleigh","text":"","category":"page"},{"location":"user_guide_solvers/#6-Solvers","page":"6 Solvers","title":"6 Solvers","text":"","category":"section"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"In Radiant, solvers and their methodologies are represented by the Radiant.Solvers object. Once instantiated, the user can add solvers using","category":"page"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"solvers = Solvers()\nsolvers.add_solver(sn)","category":"page"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"where sn is a Radiant.Discrete_Ordinates objects, defined in the following section. Nonetheless, the user can specify a maximum number of particle generations to produce in coupled particle transport with","category":"page"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"solvers.set_number_of_generations(3)","category":"page"},{"location":"user_guide_solvers/#6.1-Discrete-Ordinates-Solvers","page":"6 Solvers","title":"6.1 Discrete Ordinates Solvers","text":"","category":"section"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"A discrete ordinates solver is represented by a Radiant.Discrete_Ordinates object. Once instantiated, the user associate it with a particle and defined its properties. For example, for 1D transport of photons using the Boltzmann transport equation (BTE), the user could write:","category":"page"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"sn = Discrete_Ordinates()\nsn.set_particle(photon)                            # Set particle\nsn.set_solver_type(\"BTE\")                          # Set the solver to be the BTE\nsn.set_acceleration(\"livolant\")                    # Accelerate using Livolant acceleration\nsn.set_quadrature(\"gauss-lobatto\",8)               # Set a 8-points Gauss-Lobatto quadrature\nsn.set_legendre_order(7)                           # Set a Legendre truncation order\nsn.set_angular_boltzmann(\"galerkin\")               # Apply a Galerkin quadrature method\nsn.set_convergence_criterion(4e-7)                 # Set a convergence criterion \nsn.set_maximum_iteration(300)                      # Set a maximum number of iterations\nsn.set_scheme(\"x\",\"AWD\",1)                         # Set the spatial difference scheme","category":"page"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"Another example, for 3D transport of electrons using the Boltzmann Fokker-Planck (BFP) equation, the user could write:","category":"page"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"sn = Discrete_Ordinates()\nsn.set_particle(electron)                          # Set particle\nsn.set_solver_type(\"BFP\")                          # Set the solver to be the BFP\nsn.set_acceleration(\"livolant\")                    # Accelerate using Livolant acceleration\nsn.set_quadrature(\"lebedev\",8)                     # Set a Lebedev quadrature\nsn.set_legendre_order(15)                          # Set a Legendre truncation order\nsn.set_angular_boltzmann(\"galerkin\")               # Apply a Galerkin quadrature method\nsn.set_angular_fokker_planck(\"finite-difference\")  # Set angular Fokker-Planck scheme\nsn.set_convergence_criterion(4e-7)                 # Set a convergence criterion \nsn.set_maximum_iteration(300)                      # Set a maximum number of iterations\nsn.set_scheme(\"E\",\"DG\",2)                          # Set the spatial difference scheme\nsn.set_scheme(\"x\",\"DD\",1)                          # Set the spatial difference scheme\nsn.set_scheme(\"y\",\"DD\",1)                          # Set the spatial difference scheme\nsn.set_scheme(\"z\",\"DD\",1)                          # Set the spatial difference scheme","category":"page"},{"location":"user_guide_solvers/#6.2-Other-Kind-of-Solvers","page":"6 Solvers","title":"6.2 Other Kind of Solvers","text":"","category":"section"},{"location":"user_guide_solvers/","page":"6 Solvers","title":"6 Solvers","text":"note: Note\nAt the moment, Radiant only treat discrete ordinates solvers.","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3-Bremsstrahlung","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The bremsstrahlung interaction occurs when an incoming electron or positron interacts with the field of the atomic nucleus and its electrons. This interaction, vital at high energies, slows the incoming particle by producing a bremsstrahlung photon. The tables of Seltzer and Berger [57] are used for both differential cross-sections and stopping powers, which are considered the most accurate and comprehensive energy-dependent bremsstrahlung data available [32], and a modified dipole distribution of emitted photons distribution is used [58, 59].","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.1-Catastrophic-Bremsstrahlung-Cross-Section","page":"2.2.3 Bremsstrahlung","title":"2.2.3.1 Catastrophic Bremsstrahlung Cross-Section","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The bremsstrahlung cross-section describes the interaction of an incoming electron (p=texttte-) or positron (p=texttte+) with the field of the atomic nucleus and its electrons. The incoming particle scatter (p=texttte- or p=texttte+), while photon are produced (p=gamma). Seltzer and Berger proposed tables to compute the differential cross-section as a function of the energy of the produced photon, which includes both electron-nucleus and electron-electron interactions, and for monoelemental material i, it is given by [57]","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"sigma_s^i(E rightarrow E_gamma) = begincases dfracF_pi^pmZ_i^2tildesigma_s(Z_iEE_gamma)E_gammabeta^2  E_gamma le E  0  textotherwise endcases ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where E is incoming electron or positron energy, E_gamma is the produced photon energy and tildesigma_s(Z_iEE_gamma) is the total scaled bremsstrahlung energy-weighted cross-section, given in textcm^2, from interpolation of the Seltzer and Berger tables [57]. These cross-sections are defined for Z_i le 100 and energies between 1 keV and 10 GeV. The factor F_pi^pm is given by [37]","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"beginsplit F_pi^+ = 1 - expleft -12359times10^-1t_i + 61274times10^-2t_i^2 - 31516times10^-2t_i^3 + 77446times10^-3t_i^4 right  left - 10595times10^-3t_i^5 + 70568times10^-5t_i^6 - 18080times 10^-6t_i^7 right  endsplit","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"with","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"t_i = lnleft(1+frac10^6EZ_i^2right)","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"for incoming positrons, which is based on the tabulated positron-to-electron ratios from Kim et al. [60], and F_pi^- = 1 for incoming electrons. The double differential cross-sections are given by [3]","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"sigma_s^i(Erightarrow E_emu) = dfrac12pisigma_s^i(Erightarrow E_e)delta(mu-1) quad textand quad sigma_s^i(Erightarrow E_gammamu) = dfrac12pisigma_s^i(Erightarrow E_gamma)Theta(Emu) ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where it is assumed, as in CEPXS [3], that the incoming electron does not deflect from its trajectory after interaction (mu_e = 1). The bremsstrahlung photon angular distribution, greatly inspired by the modified dipole distribution from Acosta et al. [58, 61], is given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"Theta(EE_gammamu) = frac3(1-C^2)4(2A+B)(1-mu C)^2left (A+B) + (A-B)left(fracmu-C1-mu Cright)^2 right ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where the parameters A=A(EE_gamma), B=B(EE_gamma) and C=C(EE_gamma), which have values strictly between 0 and 1, are adjusted by least-square method to fit the shape function from Pochecktextskus [62] for E le 3 MeV, and are set to give the dipole distribution (A = 1, B = 0 and C = beta) for energy E  3 MeV.","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.1.1-Scattering-cross-sections-for-deflected-electron-or-positron","page":"2.2.3 Bremsstrahlung","title":"2.2.3.1.1 Scattering cross-sections for deflected electron or positron","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The bremsstrahlung Legendre moments of the differential scattering cross-sections for the incoming lepton are given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"sigma_sell^i(Erightarrow E_e) = 2piint_-1^1dmuP_ell(mu)sigma_s^i(Erightarrow E_emu) = sigma_s^i(Erightarrow E_e) ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"Sigma_sellg^texttterightarrowtexttte(E) = sum_i=1^N_e mathcalN_ni f_i displaystyleint_E_g+12^minleftE_g-12E_c(E)rightdE_esigma_sell^i(Erightarrow E_e) mathcalH_b ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"This equation is evaluated using numerical quadrature.","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.1.2-Scattering-cross-sections-for-produced-photon","page":"2.2.3 Bremsstrahlung","title":"2.2.3.1.2 Scattering cross-sections for produced photon","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The Legendre moments of the differential scattering cross-sections for the produced bremsstrahlung photon are given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"sigma_sell^i(Erightarrow E_gamma) = 2piint_-1^1dmuP_ell(mu)sigma_s^i(Erightarrow E_gammamu) = sigma_s^i(Erightarrow E_gamma) Theta_ell(E) ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where the moment of the angular distributionis given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"Theta_ell(E) = int_-1^1dmuP_ell(mu)Theta(Emu) ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"These Legendre moments of the angular distribution can be computed analytically by expanding the Legendre polynomials in power of mu such as","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"beginsplit Theta_ell(EE_gamma) = frac3(1-C^2)4(2A+B) frac12^ell sum_k=0^lfloorell2rfloor C_ellk left(A+B)I^ell-2k2(C) + (A-B) sum_j=0^2 alpha_j I^ell-2k+j4(C) right endsplit","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where alpha_0 = C^2, alpha_1 = -2C and alpha_2 = 1. The remaining integrals are given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"I^nm(a) = int_-1^1dmu fracmu^n(1-amu)^m = mathcalG_3^nm(a1)-mathcalG_3^nm(a-1)","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"and is solved using integral expressions from Gradshteyn et al. (Sect. 2.153) [52]","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"mathcalG_3^nm(ax) = begincases -dfrac1alogleft1-axright  n = 0 text and  m neq 1  dfrac(1-ax)^1-m1-m  n = 0 text and  m = 1  -dfrac1a(n-m+1)leftvphantomdfrac12 (1-ax)^1-mx^n-nmathcalG_3^n-1m(ax)right  n  0 text and  n-m neq -1  -dfrac1(1-m)leftvphantomdfrac12 (1-ax)^1-mx^n+1-(n-m+2)mathcalG_3^nm+1(ax)right  n  0 text and  n-m = -1 endcases ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"Sigma_sellg^texttterightarrowgamma(E) = sum_i=1^N_e mathcalN_ni f_i displaystyleint_E_g+12^minleftE_g-12ErightdE_gammasigma_sell^i(Erightarrow E_gamma) mathcalH_b ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"This equation is evaluated using numerical quadrature.","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.1.3-Catastrophic-total-cross-sections","page":"2.2.3 Bremsstrahlung","title":"2.2.3.1.3 Catastrophic total cross-sections","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The catastrophic bremsstrahlung total cross-sections are defined by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"Sigma_t^texttte(E) = sum_i=1^N_e mathcalN_ni f_i int_0^E_c(E)dE_esigma_s0^i(Erightarrow E_e)","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"and are evaluated using numerical quadrature.","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.1.4-Absorption-cross-sections-for-incoming-positrons","page":"2.2.3 Bremsstrahlung","title":"2.2.3.1.4 Absorption cross-sections for incoming positrons","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The bremsstrahlung catastrophic absorption cross-sections, for annihilation calculations, are given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"Sigma_a^textttbrem(E) = sum_i=1^N_e mathcalN_ni f_i int_0^E_G+12dE_esigma_s0^i(Erightarrow E_e)","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"and are evaluated using numerical quadrature.","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.2-Soft-stopping-power","page":"2.2.3 Bremsstrahlung","title":"2.2.3.2 Soft stopping power","text":"","category":"section"},{"location":"theory_bremsstrahlung/#2.2.3.2.1-Total-stopping-power","page":"2.2.3 Bremsstrahlung","title":"2.2.3.2.1 Total stopping power","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The radiative stopping powers of electron are given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"S_t(E) = alpha r_e^2 (E+1) sum_i=1^N_e mathcalN_ni f_i F_pi^pm Z_i^2 phi_textttrad(Z_iE) ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where phi_textttrad(Z_iE) are also given by the tables of Selzer and Berger [57].","category":"page"},{"location":"theory_bremsstrahlung/#2.2.3.2.2-Soft-stopping-power","page":"2.2.3 Bremsstrahlung","title":"2.2.3.2.2 Soft stopping power","text":"","category":"section"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"The soft radiative stopping powers, S^texttte(E), are given by removing catastrophic bremsstrahlung stopping powers from total stopping powers. They are given by","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"S^texttte(E) = S_t(E) - sum_i=1^N_e mathcalN_ni f_i int_0^E_c(E)dE_e(E-E_e)sigma_s0^i(Erightarrow E_e) ","category":"page"},{"location":"theory_bremsstrahlung/","page":"2.2.3 Bremsstrahlung","title":"2.2.3 Bremsstrahlung","text":"where the integral is evaluated with numerical quadrature.","category":"page"},{"location":"theory_compton/#2.1.2-Compton-Scattering","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"","category":"section"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The Compton scattering, often called incoherent scattering, consists of the ionization of an atomic electron by an incoming photon, which loses energy in the process. This interaction is dominant for intermediate energies ranging from the hundreds of keV to a few MeV. Penelope and EGSnrc models are based on the subshell-dependent relativistic impulse approximation from Brusa et al. [18]. While using this model is desirable for multigroup deterministic transport, it is challenging to implement to have fast and accurate results. The production of Legendre moments of these cross-sections is an outstanding challenge since two very challenging integrations, in angle and energy of the scattered photon, must be performed, one following the other, in an accurate and fast enough way. Therefore, until such multigroup cross-sections can be developed, the proposed model uses the Waller-Hartree incoherent function, which is applied to the Klein-Nishina cross-section [19], in order to encompass most electron binding effects [18].","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The Compton cross-section describes the interaction of an incoming photon (p=gamma) with atomic electrons, resulting in a scattered photon (p=gamma) and a produced electron (p=texttte+). The Klein-Nishina differential cross-section in the energy of the scattered photon for a single interaction with an assumed free atomic electron is given by [3, 19]","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"sigma_s(Erightarrow E) = fracpi r_e^2E^2leftfracEE+fracEE-2left(frac1E-frac1Eright)+left(frac1E-frac1Eright)^2right ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"where E is the incoming photon energy, E is the scattered photon energy and W = E - E is the produced electron energy. The scattering angles for the scattered photon and the produced electron are respectively","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"mu_gamma = 1 + frac1E - frac1E quad textand quad mu_e = frac1+EEleft1+frac2Wright^-frac12 ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The double differential cross-sections for the scattered photon and the produced electron, with an incoherent scattering factor S_i(Emu) extracted from JENDL-5 library [16] taking into account some binding effects [18], are given by","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"sigma_s^i(Erightarrow Emu) = dfrac12piS_i(Emu)sigma_s(Erightarrow E)delta(mu-mu_gamma)","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"and","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"sigma_s^i(Erightarrow Wmu) = dfrac12piS_i(Emu)sigma_s(Erightarrow W)delta(mu-mu_e) ","category":"page"},{"location":"theory_compton/#2.1.2.1-Scattering-cross-sections-of-the-incoming-photon","page":"2.1.2 Compton Scattering","title":"2.1.2.1 Scattering cross-sections of the incoming photon","text":"","category":"section"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The Compton Legendre moments of the differential scattering cross-sections of the incoming photon are given by","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"sigma_sell^i(Erightarrow E) = 2piint_-1^1dmuP_ell(mu)sigma_s^i(Erightarrow Emu) = P_ell(mu_gamma)S_i(Emu_gamma)sigma_s(Erightarrow E) ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"Sigma_sellg^gammarightarrowgamma(E) = sum_i=1^N_e mathcalN_ni f_i int_maxleftE_g+12fracE1+2Eright^minleftE_g-12Eright dE sigma_sell^i(Erightarrow E) ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"which are integratedby numerical quadrature.","category":"page"},{"location":"theory_compton/#2.1.2.2-Scattering-cross-sections-of-the-produced-electron","page":"2.1.2 Compton Scattering","title":"2.1.2.2 Scattering cross-sections of the produced electron","text":"","category":"section"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The Compton Legendre moments of the differential scattering cross-sections of the produced electron are given by","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"sigma_sell^i(Erightarrow W) = 2piint_-1^1dmuP_ell(mu)sigma_s^i(Erightarrow Wmu) = P_ell(mu_e)S_i(Emu_e)sigma_s(Erightarrow W) ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"Sigma_sellg^gammarightarrowtexttte-(E) = sum_i=1^N_e mathcalN_ni f_i int_E_g+12^minleftE_g-12frac2E^21+2Eright dW sigma_ell^i(Erightarrow W) ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"which are integrated by numerical quadrature.","category":"page"},{"location":"theory_compton/#2.1.2.3-Total-cross-sections","page":"2.1.2 Compton Scattering","title":"2.1.2.3 Total cross-sections","text":"","category":"section"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"The Compton total cross-sections are defined by","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"Sigma_t^gamma(E) = sum_i=1^N_e mathcalN_ni f_i int_fracE1+2E^EdES_i(Emu_gamma)sigma_s0(Erightarrow E) ","category":"page"},{"location":"theory_compton/","page":"2.1.2 Compton Scattering","title":"2.1.2 Compton Scattering","text":"which are integrated by numerical quadrature.","category":"page"},{"location":"theory_pair_production/#2.1.4-Pair-Production","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"","category":"section"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"An electron-positron pair is produced from the incoming photon energy in the neighbours of the atom. The threshold for pair production is approximately 1.022 MeV, the required energy to constitute at least the electron and positron mass energy, the extra energy going into their kinetic energies. This phenomenon is the dominant photon process at high energy, about 10 MeV and more. A variation of the model of Baró et al. [22], based on the screening function of Tsai [23], is employed.","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"The pair production cross-section describes the absorption of a photon (p = gamma) and the production of an electron (p=texttte-) and a positron (p=texttte+). A variation of the semi-empirical model of Baró [22] is used and, in a monoelemental material i, the differential cross-section is given by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"sigma_s^i(E rightarrow E) = begincases A(Z_iE)left 2left(dfrac12-dfracE+1Eright)^2 phi_i1(E) + phi_i2(E) right  E  2  0  textotherwise endcases ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"where E is the incoming photon energy and E is the outgoing electron or positron energy. The screening function, derived from the one of Tsai [23], are given by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"phi_i1(E) = maxleftg_i1(E) + g_i00right quad textand quad phi_i2(E) = maxleftg_i2(E) + g_i00right ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"where","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"beginsplit g_i1(E) = frac73 - 2ln(1+b_i^2) -6b_iarctanleft(frac1b_iright) - b_i^2left 4 - 4b_iarctanleft(frac1b_iright) - 3lnleft(1+frac1b_i^2right) right   g_i2(E) = frac116 - 2ln(1+b_i^2) -3b_iarctanleft(frac1b_iright) - fracb_i^22left 4 - 4b_iarctanleft(frac1b_iright) - 3lnleft(1+frac1b_i^2right) right  endsplit","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"g_i0 = 4ln(r_si) - 4f_Ci ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"with","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"b_i = fracr_si2fracE(E+1)(E-E-1) ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"The variable r_si corresponds to the reduced screening radius, tabulated in Baró [22] for Z_i le 92 and extended up to Z_i le 99 in PENELOPE [12]. The high-energy Coulomb correction f_Ci is given by [24]","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"f_Ci = alpha^2 Z_i^2 displaystylesum_k=1^inftyfrac1k(k^2+alpha^2 Z_i^2) ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"As it is done in EGSnrc [25], a normalization factor A(Z_iE) is added to the pair production cross-section, which is defined as the ratio between the total cross-sections obtained with A(Z_iE)=1 and the tabulated values from JENDL-5 for the pair production in both the nuclear and electron field [16]","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"A(Z_iE) = fracsigma_t^textttJENDL-5(Z_iE)leftsigma_t(Z_iE)right_A=1 ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"Since pair production and bremsstrahlung are closely related through a substitution rule, the same angular distribution can be used for the electron and positron emission [3, 23]. The double differential cross-section is given by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"sigma_s^i(Erightarrow Emu) = dfrac12pisigma_s^i(Erightarrow E)Theta(Emu) ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"This distribution is the Sommerfield distribution.","category":"page"},{"location":"theory_pair_production/#2.1.4.1-Scattering-cross-sections-for-the-produced-electron-and-positron","page":"2.1.4 Pair Production","title":"2.1.4.1 Scattering cross-sections for the produced electron and positron","text":"","category":"section"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"The pair production Legendre moments of the differential scattering cross-sections for the produced leptons are given by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"sigma_sell^i(Erightarrow E) = 2piint_-1^1dmuP_ell(mu)sigma_s^i(Erightarrow Emu) = sigma_s^i(Erightarrow E) Theta_ell(E) ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"Sigma_sellg^gammarightarrowtexttte(E) = sum_i=1^N_e mathcalN_ni f_i displaystyleint_E_g+12^minleftE_g-12E - 2rightdE_esigma_sell^i(Erightarrow E) mathcalH_b ","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"which are integrated by numerical quadrature. ","category":"page"},{"location":"theory_pair_production/#2.1.4.2-Total-cross-sections","page":"2.1.4 Pair Production","title":"2.1.4.2 Total cross-sections","text":"","category":"section"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"The pair production total cross-sections are defined by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"Sigma_t^gamma(E) =  sum_i=1^N_e mathcalN_ni f_i int_0^E-2dEsigma_s0^i(Erightarrow E) mathcalH_b","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"and are integrated using numerical quadrature.","category":"page"},{"location":"theory_pair_production/#2.1.4.3-Absorption-cross-sections","page":"2.1.4 Pair Production","title":"2.1.4.3 Absorption cross-sections","text":"","category":"section"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"The pair production absorption cross-sections, which are required for annihilation calculations, are given by","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"Sigma_a^textttpp(E) = sum_i=1^N_e mathcalN_nif_iint_0^minleftE-2E_G+12rightdEsigma_s0^i(Erightarrow E) mathcalH_b","category":"page"},{"location":"theory_pair_production/","page":"2.1.4 Pair Production","title":"2.1.4 Pair Production","text":"and are integrated using numerical quadrature.","category":"page"},{"location":"theory_rayleigh/#2.1.1-Rayleigh-scattering","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh scattering","text":"","category":"section"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"Rayleigh scattering, also often called coherent scattering, consists of the elastic change of direction of an incoming photon by atomic electrons. The Rayleigh scattering model from PENELOPE [12], which is based on atomic form factors [13] and anomalous scattering factors [14], is used.","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"The Rayleigh cross-sections, which described the elastic scattering of photons (p=p=gamma) are given by [13–15]","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"sigma_s^i(Emu) = pi r_e^2 left(1+mu^2right) leftleft(F_i(Emu)+f_i(E)vphantomfrac12right)^2 + left(f_i(E)vphantomfrac12right)^2right ","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"where F_i(Emu) is the atomic form factor for the i^textth-element, where the factors f_i(E) and f_i(E) respectively are the real and imaginary parts of the anomalous scattering factors for the i^textth-element, which are all tabulated by the Japanese evaluated nuclear data library (JENDL-5) [16], which are based on the EPDL library [17]. The double differential cross-sections are given by","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"sigma_s^i(Erightarrow Emu) = sigma_s^i(Emu) delta(E-E) ","category":"page"},{"location":"theory_rayleigh/#2.1.1.1-Scattering-cross-sections-of-the-incoming-photon","page":"2.1.1 Rayleigh Scattering","title":"2.1.1.1 Scattering cross-sections of the incoming photon","text":"","category":"section"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"The Rayleigh Legendre moments of the differential scattering cross-sections of the incoming photon are simply given by","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"Sigma_sell^gammarightarrowgamma(E) = sum_i=1^N_e mathcalN_ni f_i int_-1^1 P_ell(mu)sigma_s^i(Emu) ","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"which are integrated using numerical quadrature.","category":"page"},{"location":"theory_rayleigh/#2.1.1.2-Total-cross-sections","page":"2.1.1 Rayleigh Scattering","title":"2.1.1.2 Total cross-sections","text":"","category":"section"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"The Rayleigh total cross-sections are given by","category":"page"},{"location":"theory_rayleigh/","page":"2.1.1 Rayleigh Scattering","title":"2.1.1 Rayleigh Scattering","text":"Sigma_sell^gamma(E) = Sigma_s0^gammarightarrowgamma(E) ","category":"page"},{"location":"api_computation_unit/#Structure","page":"Computation_Unit","title":"Structure","text":"","category":"section"},{"location":"api_computation_unit/","page":"Computation_Unit","title":"Computation_Unit","text":"Radiant.Computation_Unit","category":"page"},{"location":"api_computation_unit/#Radiant.Computation_Unit","page":"Computation_Unit","title":"Radiant.Computation_Unit","text":"Computation_Unit\n\nStructure used to consolidate the cross-sections, geometry, solvers and sources, execute transport calculations and extract its results.\n\nMandatory field(s)\n\ncross_sections::Cross_Sections : cross-section library.\ngeometry::Geometry : geometry.\nsolvers::Solvers : solvers.\nsources::Sources : fixed sources.\n\nOptional field(s) - with default values\n\nN/A\n\n\n\n\n\n","category":"type"},{"location":"api_computation_unit/#Methods","page":"Computation_Unit","title":"Methods","text":"","category":"section"},{"location":"api_computation_unit/","page":"Computation_Unit","title":"Computation_Unit","text":"Radiant.set_cross_sections(this::Radiant.Computation_Unit,cross_sections::Radiant.Cross_Sections)\nRadiant.set_geometry(this::Radiant.Computation_Unit,geometry::Radiant.Geometry)\nRadiant.set_solvers(this::Radiant.Computation_Unit,methods::Radiant.Solvers)\nRadiant.set_sources(this::Radiant.Computation_Unit,sources::Radiant.Fixed_Sources)\nRadiant.run(this::Radiant.Computation_Unit)\nRadiant.get_voxels_position(this::Radiant.Computation_Unit,axis::String)\nRadiant.get_energies(this::Radiant.Computation_Unit,particle::Particle)\nRadiant.get_flux(this::Radiant.Computation_Unit,particle::Particle)\nRadiant.get_energy_deposition(this::Radiant.Computation_Unit,particles::Particle)\nRadiant.get_energy_deposition(this::Radiant.Computation_Unit)\nRadiant.get_charge_deposition(this::Radiant.Computation_Unit,particles::Particle)\nRadiant.get_charge_deposition(this::Radiant.Computation_Unit)","category":"page"},{"location":"api_computation_unit/#Radiant.set_cross_sections-Tuple{Computation_Unit, Cross_Sections}","page":"Computation_Unit","title":"Radiant.set_cross_sections","text":"set_cross_sections(this::Computation_Unit,cross_sections::Cross_Sections)\n\nAssigns the cross-sections library to the computation unit.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\ncross_sections::Cross_Sections : cross-sections library.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> ... # Define cross-sections properties and generate multigroup cross-sections.\njulia> cu = Computation_Unit()\njulia> cu.set_cross_sections(cs)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.set_geometry-Tuple{Computation_Unit, Geometry}","page":"Computation_Unit","title":"Radiant.set_geometry","text":"set_geometry(this::Computation_Unit,geometry::Geometry)\n\nAssigns the geometry to the computation unit.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\ngeometry::Geometry : geometry.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> ... # Define geometry and its properties\njulia> cu = Computation_Unit()\njulia> cu.set_geometry(geo)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.set_solvers-Tuple{Computation_Unit, Solvers}","page":"Computation_Unit","title":"Radiant.set_solvers","text":"setsolvers(this::ComputationUnit,solvers::Solvers)\n\nAssigns the solvers to the computation unit.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\nsolvers::Solvers : collection of solvers per particle.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ms = Solvers()\njulia> ... # Define all the discretization solvers and their properties\njulia> cu = Computation_Unit()\njulia> cu.set_solvers(ms)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.set_sources-Tuple{Computation_Unit, Fixed_Sources}","page":"Computation_Unit","title":"Radiant.set_sources","text":"set_sources(this::Computation_Unit,sources::Fixed_Sources)\n\nAssigns the fixed sources to the computation unit.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\nsources::Fixed_Sources : collection of fixed sources.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> fs = Fixed_Sources()\njulia> ... # Define all the fixed sources and their properties\njulia> cu = Computation_Unit()\njulia> cu.set_sources(fs)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.run-Tuple{Computation_Unit}","page":"Computation_Unit","title":"Radiant.run","text":"run(this::Computation_Unit)\n\nExecute transport calculations and obtain the flux solution.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cu = Computation_Unit()\njulia> ... # Define the cross-sections, geometry, fixed sources and discretization solvers\njulia> cu.run()\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_voxels_position-Tuple{Computation_Unit, String}","page":"Computation_Unit","title":"Radiant.get_voxels_position","text":"get_voxels_position(this::Computation_Unit,axis::String)\n\nGet the mid-point voxels position along the specified axis.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\naxis::String : axis, which can takes the following values:\nboundary = \"x\" : along x-axis\nboundary = \"y\" : along y-axis\nboundary = \"z\" : along z-axis\n\nOutput Argument(s)\n\nx::Vector{Float64} : mid-point voxels position along the specified axis.\n\nExamples\n\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> x = cu.get_voxels_position(\"x\")\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_energies-Tuple{Computation_Unit, Particle}","page":"Computation_Unit","title":"Radiant.get_energies","text":"get_energies(this::Computation_Unit,particle::Particle)\n\nGet the mid-point energy in each group for the specified particle.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\nparticle::Particle : particle.\n\nOutput Argument(s)\n\nE::Vector{Float64} : mid-point energy in each group for the specified particle.\n\nExamples\n\njulia> electron = Electron() # Particle to be transported\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> E = cu.get_voxels_position(electron)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_flux-Tuple{Computation_Unit, Particle}","page":"Computation_Unit","title":"Radiant.get_flux","text":"get_flux(this::Computation_Unit,particle::Particle)\n\nGet the array containing the flux in each voxels and in each energy group for the specified particle.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\nparticle::Particle : particle.\n\nOutput Argument(s)\n\nflux::Array{Float64} : flux array.\n\nExamples\n\njulia> electron = Electron() # Particle to be transported\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> flux = cu.get_flux(electron)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_energy_deposition-Tuple{Computation_Unit, Particle}","page":"Computation_Unit","title":"Radiant.get_energy_deposition","text":"get_energy_deposition(this::Computation_Unit,particle::Particle)\n\nGet the array containing the energy deposition in each voxels by a given particle.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\nparticle::Particle : particle.\n\nOutput Argument(s)\n\nenergy_deposition::Array{Float64} : energy deposition array.\n\nExamples\n\njulia> electron = Electron() # Particle to be transported\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> electron_energy_deposition = cu.get_energy_deposition(electron)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_energy_deposition-Tuple{Computation_Unit}","page":"Computation_Unit","title":"Radiant.get_energy_deposition","text":"get_energy_deposition(this::Computation_Unit)\n\nGet the array containing the total energy deposition in each voxels.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\n\nOutput Argument(s)\n\nenergy_deposition::Array{Float64} : energy deposition array.\n\nExamples\n\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> energy_deposition = cu.get_energy_deposition()\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_charge_deposition-Tuple{Computation_Unit, Particle}","page":"Computation_Unit","title":"Radiant.get_charge_deposition","text":"get_charge_deposition(this::Computation_Unit,particle::Particle)\n\nGet the array containing the charge deposition in each voxels by a given particle.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\nparticle::Particle : particle.\n\nOutput Argument(s)\n\ncharge_deposition::Array{Float64} : charge deposition array.\n\nExamples\n\njulia> electron = Electron() # Particle to be transported\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> electron_charge_deposition = cu.get_charge_deposition(electron)\n\n\n\n\n\n","category":"method"},{"location":"api_computation_unit/#Radiant.get_charge_deposition-Tuple{Computation_Unit}","page":"Computation_Unit","title":"Radiant.get_charge_deposition","text":"get_charge_deposition(this::Computation_Unit)\n\nGet the array containing the total charge deposition in each voxels.\n\nInput Argument(s)\n\nthis::Computation_Unit : computation unit.\n\nOutput Argument(s)\n\ncharge_deposition::Array{Float64} : charge deposition array.\n\nExamples\n\njulia> electron = Electron() # Particle to be transported\njulia> cu = Computation_Unit()\njulia> ... # Define computation unit and run it.\njulia> charge_deposition = cu.get_charge_deposition()\n\n\n\n\n\n","category":"method"},{"location":"theory_photoelectric/#2.1.3-Photoelectric-Effect","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"","category":"section"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The photoelectric effect consists of the emission of electrons by absorption of photons. Tables from the subshell-dependent Evauated Photon Data Library (EPDL) [20], and the Sauter distribution is used.","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The photoelectric cross-section describes the absorption of an incoming photon (p=gamma) and the emission of an atomic electron (p=texttte-). The microscopic absorption cross-sections are given by","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"sigma_a^i(E) = sum_k=1^N_textttshells sigma_a^ik(E) ","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"where sigma_a^ik(E) is given by linear interpolation of the data given by the absorption cross-sections per subshells from the JENDL-5 library [16], which are available for Z_i le 100 and for energies up to 100 GeV. ","category":"page"},{"location":"theory_photoelectric/#2.1.3.1-Scattering-cross-sections-of-the-produced-electron","page":"2.1.3 Photoelectric Effect","title":"2.1.3.1 Scattering cross-sections of the produced electron","text":"","category":"section"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The photoelectric scattering cross-sections are given by","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"sigma_s^ik(E rightarrow Emu) = sigma_a^ik(E) delta(E-E+U_ik) Theta(Emu) ","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"where E is the energy of the photo-electron, U_ik is the binding energy of the k^textth shell and the Sauter cross-section for the K-shell, normalized over the angular domain, is given by [21]","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Theta(Emu) = Gamma(E) frac1-mu^2(1-betamu)^4left1 + fracgamma(gamma-1)(gamma-2)2(1-betamu)right ","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"where the normalization factor is","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Gamma(E) = leftfrac43(1-beta^2)^2 + fracgamma(gamma-1)(gamma-2)2beta^3leftfrac2beta1-beta^2-lnleft(frac1+beta1-betaright)rightright^-1 ","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The Legendre moments of the normalized Sauter cross-section are given by","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Theta_ell(E) = int_-1^1dmu P_ell(mu) Theta(Emu) ","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The Legendre moments are computed analytically by expanding the Legendre polynomials in power of mu such as","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Theta_ell(E) = fracGamma(E)2^ell sum_k=0^lfloorell2rfloor C_ellk sum_j=0^1 (-1)^j left I^ell-2k+2j4(beta) + fracgamma(gamma-1)(gamma-2)2 I^ell-2k+2j3(beta) right","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The scattering cross-sections are given by","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Sigma_sellg^gammarightarrowtexttte-(E) = sum_i=1^N_e mathcalN_ni f_i int_E_g+12^E_g-12 dE sum_k=1^N_textttshells sigma_sell^ik(E rightarrow E) ","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"which can be rewritten as","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Sigma_sellg^gammarightarrowtexttte-(E) = sum_i=1^N_e mathcalN_ni f_i sum_k=1^N_textttshells sigma_a^ik(E) Theta_ell(E) times begincases 1  E-U_ik in E_g+12E_g-12  0  textotherwise endcases ","category":"page"},{"location":"theory_photoelectric/#2.1.3.2-Total-cross-sections","page":"2.1.3 Photoelectric Effect","title":"2.1.3.2 Total cross-sections","text":"","category":"section"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"The photoelectric total cross-sections are simply","category":"page"},{"location":"theory_photoelectric/","page":"2.1.3 Photoelectric Effect","title":"2.1.3 Photoelectric Effect","text":"Sigma_t^gamma(E) = sum_i=1^N_e  mathcalN_ni f_i sigma_a^i(E) ","category":"page"},{"location":"theory_closure_relations/#1.5-Closure-Relations","page":"1.5 Closure Relations","title":"1.5 Closure Relations","text":"","category":"section"},{"location":"theory_closure_relations/","page":"1.5 Closure Relations","title":"1.5 Closure Relations","text":"warning: Warning\nIncomplete - Work in progress","category":"page"},{"location":"theory_elastic_scattering/#2.2.2-Elastic-Scattering","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"","category":"section"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"An interaction in which the particle changes direction without losing energy is said to be elastic. Elastic interaction of electron and positron with matter is of utmost importance to accurately model the distribution of this particle in the medium up to hundreds of MeV. A combined Molière screened Mott-Rutherford cross-section is employed, based on an interpolation formula and data proposed by Lijian et al. [44, 45], jointly with the knock-on dependent correction from Kawrakow [46] and Seltzer's adjustment to Molière screening factor [47].","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"The Mott cross-section describes the elastic interaction of an incoming electron (p=p=texttte-) or positron (p=p=texttte+) with the Coulomb field of an atom. The microscopic differential scattering cross-section in a monoelemental material i is given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"sigma_s^i(Emu) = frac2pi Z_i(Z_i+xi^pm_i)r_e^2beta^2E(E+2)frac1(1-mu+2eta_i)^2mathcalR_textMott^i ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"with eta, the Molière screening factor with Seltzer's adjustment, obtained by [3, 47, 48]","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"eta_i = fracalpha^2Z_i^23left(113 + 376left(fracZ_ialphabetaright)^2sqrtfracEE+1right)4left(frac9pi^2128right)^23E(E+2) ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"where alphaapprox1137 is the fine structure constant. Note that when the incoming electron or positron has increasingly more kinetic energy, eta_i becomes tiny, and the scattering cross-section becomes increasingly large as mu tends to 1, producing highly forward-peaked scattering. Lijian et al. [44] proposed the following interpolation formula for mathcalR_textMott^i, the ratio of the unscreened Mott differential cross-section to Rutherford's cross-section:","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"mathcalR_textMott^i = sum_j=0^4a_ij(1-mu)^j2  quad textwhere quad a_ij = sum_k=1^6b_kj(Z_i)left(beta-barbetaright)^k-1","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"and barbeta=07181287. Boschini et al. [45] have generated b_kj(Z_i) parameters for any Z_i le 118, for both electron and positron, and these are valid for energies between 1 keV and 900 MeV.","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"For incoming electrons or positrons, to take into account atomic electron contribution to the multiple scattering of charged particle transport, Z^2 is often replaced by Z(Z+1) [49]. However, a double counting issue was observed in Monte Carlo codes due to an overlap with knock-on electrons [50], which are already taken into account by the Møller and Bhabha models. Kawrakow proposed a correction for this issue, which is significant for low Z material or when cutoff energy E_G+12 is low [46]. This correction is given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"xi^pm_i = 1-fracg_textttineli^pmg_texttteli ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"with g_texttteli, which is calculated using methodology described by Kawrakow for the Mott cross-sections rather than the screened Rutherford ones, is given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"g_texttteli = fractildesigma_s0^i(E)-tildesigma_s2^i(E)3 ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"where tildesigma_sell^i(E) is given by Eq.~\\ref{altsigma}, and with g_textttineli is given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"g_textttineli^pm = sum_k=1^N_textttshells fracZ_ikZ_i E(E+2) int_E_G+12^W_textttmax^pmdWleft(1-mu_p^2right) F^pm_ik(EW) mathcalH_b ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"where E_G+12 is the minimum energy transfer to knock-on electron. This equation is evaluated analytically.","category":"page"},{"location":"theory_elastic_scattering/#2.2.2.1-Legendre-moments-of-the-scattering-cross-sections","page":"2.2.2 Elastic Scattering","title":"2.2.2.1 Legendre moments of the scattering cross-sections","text":"","category":"section"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"For deterministic transport calculations, the Legendre moments of the elastic cross-sections are required, namely","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Sigma_sell^texttterightarrowtexttte(E) = sum_i=1^N_e mathcalN_ni f_i int_-1^1dmu P_ell(mu) sigma_s^i(Emu) = sum_i=1^N_e mathcalN_ni f_i frac2pi Z_i(Z_i+xi_i^pm)r_e^2beta^2E(E+2) tildesigma_sell^i(E) ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"with the following definition","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"tildesigma_sell^i(E) = int_-1^1dmu P_ell(mu) fracmathcalR_textMott^i(1-mu+2eta_i)^2 ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Calculating these Legendre moments using numerical quadrature is highly inefficient due to the near singularity that often occurs at mu = 1, when eta_i is small. As demonstrated in the following lines, the integration can be fast, done analytically and in a way that ensures numerical stability.","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"First, the Legendre polynomial can be expressed as a sum of powers of mu as [51]","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"P_ell(mu) = frac12^ell sum_k=0^lfloorell2rfloor C_ellk mu^ell-2k  quad textwhere quad C_ellk = frac(-1)^k(2ell-2k)k(ell-k)(ell-2k) ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"and therefore, the Legendre moments can be expressed as","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"tildesigma_sell^i(E)  = frac12^ell  sum_k=0^lfloorell2rfloor C_ellk int_-1^1 dmu fracmathcalR_textMott^i(1-mu+2eta_i)^2 mu^ell-2k = frac12^ell  sum_k=0^lfloorell2rfloor C_ellk sum_r=1^2I_r^ellk ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"where I_1^ellk is given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"beginsplit I_1^ellk = int_-1^1 dmu fracmu^ell-2k(1-mu+2eta_i)^2 left alpha_i0 + alpha_i1mu + alpha_i2mu^2 right  = sum_j=0^2 alpha_ij left( mathcalG_1^ell - 2k + j(1 + 2eta_i-11) - mathcalG_1^ell - 2k + j(1 + 2eta_i-1-1) right) endsplit","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"and I_2^ellk is given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"beginsplit I_2^ellk = int_-1^1 dmu fracmu^ell-2ksqrt(1-mu)(1-mu+2eta)^2 left alpha_3 + alpha_4mu right  = 2 sum_j=0^1 alpha_ij+3 sum_g=0^ell-2k+j (-1)^g  frac(ell-2k+j)g(ell-2k+j-g) mathcalG_2^2+2g(2eta_i1sqrt2)  endsplit","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"with alpha_i0 = a_i0+a_i2+a_i4, alpha_i1 = - (a_i2 + 2a_i4), alpha_i2 = a_i4, alpha_i3 = a_i1+a_i3 and alpha_i4 = -a_i3. The first integral is obtained using the following integral from Gradshteyn et al. (Eq.4, Sect. 2.111) [52]","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"mathcalG_1^n(abx) = sum_g=1^n-1(-1)^g-1fracga^g-1x^n-g(n-g)b^g+1 + (-1)^n-1fraca^nb^n+1(a+bx) + (-1)^n+1fracna^n-1b^n+1ln(a+bx) ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"while the second integral is evaluated by applying the change of variable u=sqrt1-mu, using the binomial theorem and then formulae from Gradshteyn et al. (Sect. 2.172, Eq.~1 Sect. 2.173 and Eq.~1 Sect. 2.174)","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"mathcalG_2^n(abx) = begincases dfracx2aR + dfrac12asqrtabarctanleft(fracbxsqrtabright)  n = 0  -dfracx^n-1(3-n)bR + dfrac(n-1)a(3-n)bmathcalG_2^n-2(abx)   n text even  0 endcases ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"This fully analytical solution can be numerically unstable, because of catastrophic cancellations for high-order Legendre terms when eta_i is large, which happens when the elastic scattering is becoming more or less isotropic, notably at low energies. Since an isotropic flux is characterized by ell ge 1 Legendre moments equal to zero, the following correction for ell_x ge 1 is proposed:","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"textbfif quad leftsigma_sell_x^i(E)right  leftsigma_s0^i(E)right quad textbfthen quad sigma_sell^i(E) = 0 quad forall  ell ge ell_x ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"which are based on the upper bound of high-order Legendre moments.","category":"page"},{"location":"theory_elastic_scattering/#2.2.2.2-Total-Cross-Sections","page":"2.2.2 Elastic Scattering","title":"2.2.2.2 Total Cross-Sections","text":"","category":"section"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"The elastic total cross-sections are simply given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Sigma_t^texttte(E) = Sigma_s0^texttterightarrowtexttte(E) ","category":"page"},{"location":"theory_elastic_scattering/#2.2.2.3-Transport-Correction-and-Elastic-Decomposition-in-Soft-and-Catastrophic-Components","page":"2.2.2 Elastic Scattering","title":"2.2.2.3 Transport Correction and Elastic Decomposition in Soft and Catastrophic Components","text":"","category":"section"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"The elastic scattering cross-sections can be decomposed into soft and catastrophic components [53]. Let L be the order of the cross-sections Legendre expansion and Sigma_sellg rightarrow g^texttterightarrowtexttte be the ell-order Legendre moment of the elastic scattering cross-section in group g. Let L_textttmax le L be the last non-zero Legendre moments of the scattering in group g. The Legendre moments of the soft are assumed to be given by","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Sigma_sellg rightarrow g^texttterightarrowtextttetextttsoft = Sigma_s0g rightarrow g^texttterightarrowtextttetextttsoft- T_gell(ell+1)","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"for ell in left1L_textttmaxright. This expression is obtained by establishing equality between the eigenvalues of the Boltzmann and the AFP operator applied to the Legendre polynomials \\cite{morel1981fokker}. This method sets a relation, which depends on two undefined parameters Sigma_s0g rightarrow g^texttterightarrowtextttetextttsoft and T_g, such as moments of the Boltzmann operator are preserved by the Fokker-Planck operator. Landesman and Morel proposed to equate Sigma_sL_textttmax-1^texttterightarrowtextttetextttsoft = Sigma_sL_textttmax-1g rightarrow g^texttterightarrowtexttte and Sigma_sL_textttmaxg rightarrow g^texttterightarrowtextttetextttsoft = Sigma_sL_textttmaxg rightarrow g^texttterightarrowtexttte to define these parameters, which results in","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"T_g = fracSigma_sL_textttmax-1g rightarrow g^texttterightarrowtexttte - Sigma_sL_textttmaxg rightarrow g^texttterightarrowtexttte2L_textttmax ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"and","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Sigma_s0g rightarrow g^texttterightarrowtextttetextttsoft = Sigma_sL_textttmaxg rightarrow g^texttterightarrowtexttte + T_gL_textttmax(L_textttmax+1)","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"The soft component of the elastic cross-sections should then be withdrawn from cross-sections, since the AFP operator, jointly with the momentum transfer, is used to treat that soft scattering. The total elastic cross-sections are redefined as","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Sigma_tg leftarrow Sigma_tg - Sigma_sL_textttmaxg rightarrow g^texttterightarrowtexttte - T_gL_textttmax(L_textttmax+1) ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"and the ell-order Legendre moment of the scattering cross-sections are redefined as","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"Sigma_sellg rightarrow g^texttterightarrowtexttte leftarrow Sigma_sellg rightarrow g^texttterightarrowtexttte - Sigma_sL_textttmaxg rightarrow g^texttterightarrowtexttte - T_gleftL_textttmax(L_textttmax+1)-ell(ell+1)right ","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"The goal of this operation is to transfer the handling of forward-peaked scattering from the Boltzmann operator, which encounters monotonicity issues with such scattering [10], to the Fokker-Planck operator, which can be tackled by finite-difference discretization schemes.","category":"page"},{"location":"theory_elastic_scattering/","page":"2.2.2 Elastic Scattering","title":"2.2.2 Elastic Scattering","text":"This method, as presented, includes the extended transport correction [2, 54, 55]. The transport correction is a method that reduces the amplitude of the elastic cross-sections for the BFP solver while leaving intact the flux solution, which requires the use of Galerkin quadrature [10]. This amplitude reduction aims to reduce the scattering ratio, which is very close to one in charged particle transport. Without this correction, the source iteration process would require an astounding number of iterations, thus a long time, to converge [56].","category":"page"},{"location":"api_geometry/#Structure","page":"Geometry","title":"Structure","text":"","category":"section"},{"location":"api_geometry/","page":"Geometry","title":"Geometry","text":"Radiant.Geometry","category":"page"},{"location":"api_geometry/#Radiant.Geometry","page":"Geometry","title":"Radiant.Geometry","text":"Geometry\n\nStructure used to define the geometry properties of the medium for transport calculations.\n\nMandatory field(s)\n\nname::String : name (or identifier) of the Geometry structure.\ndimension::Int64 : dimension of the geometry.\nmaterial_per_region::Array{Material} : multidimensional array of the material per regions.\nboundary_conditions::Dict{String,Int64} : boundary conditions along each axis.\nnumber_of_regions::Dict{String,Int64} : number of regions along each axis.\nvoxels_per_region::Dict{String,Vector{Int64}} : number of voxels inside each regions along each axis.\nregion_boundaries::Dict{String,Vector{Float64}} : boundaries of each regions along each axis.\n\nOptional field(s) - with default values\n\ntype::String=\"cartesian\" : type of geometry.\n\n\n\n\n\n","category":"type"},{"location":"api_geometry/#Methods","page":"Geometry","title":"Methods","text":"","category":"section"},{"location":"api_geometry/","page":"Geometry","title":"Geometry","text":"Radiant.set_type(this::Radiant.Geometry,type::String)\nRadiant.set_dimension(this::Radiant.Geometry,dimension::Int64)\nRadiant.set_boundary_conditions(this::Radiant.Geometry,boundary::String,boundary_condition::String)\nRadiant.set_number_of_regions(this::Radiant.Geometry,axis::String,number_of_regions::Int64)\nRadiant.set_voxels_per_region(this::Radiant.Geometry,axis::String,voxels_per_region::Vector{Int64})\nRadiant.set_region_boundaries(this::Radiant.Geometry,axis::String,region_boundaries::Vector{Float64})\n\nRadiant.set_material_per_region(this::Radiant.Geometry,material_per_region::Array{Radiant.Material})\nRadiant.build(this::Radiant.Geometry,cs::Radiant.Cross_Sections)","category":"page"},{"location":"api_geometry/#Radiant.set_type-Tuple{Geometry, String}","page":"Geometry","title":"Radiant.set_type","text":"set_type(this::Geometry,type::String)\n\nTo set the type of geometry.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\ntype::String : type of geometry, which can takes the following value:   -type = \"cartesian\" : Cartesian geometry.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> geo.set_type(\"cartesian\")\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.set_dimension-Tuple{Geometry, Int64}","page":"Geometry","title":"Radiant.set_dimension","text":"set_dimension(this::Geometry,dimension::Int64)\n\nTo set the dimension of geometry.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\ndimension::Int64 : dimension of the geometry, which can be either 1, 2 or 3.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> geo.set_dimension(2) # For 2D geometry\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.set_boundary_conditions-Tuple{Geometry, String, String}","page":"Geometry","title":"Radiant.set_boundary_conditions","text":"set_boundary_conditions(this::Geometry,boundary::String,boundary_condition::String)\n\nTo set the boundary conditions at the specified boundary.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\nboundary::String : boundary for which the boundary condition is applied, which can takes the following value:\nboundary = \"x-\" : the lower bound along x-axis\nboundary = \"x+\" : the upper bound along x-axis\nboundary = \"y-\" : the lower bound along y-axis\nboundary = \"y+\" : the upper bound along y-axis\nboundary = \"z-\" : the lower bound along z-axis\nboundary = \"z+\" : the upper bound along z-axis\nboundary_condition::String : boundary conditions, which can takes the following value:   -boundary = \"void\" : void boundary conditions.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> geo.set_boundary_conditions(\"x-\",\"void\")\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.set_number_of_regions-Tuple{Geometry, String, Int64}","page":"Geometry","title":"Radiant.set_number_of_regions","text":"set_number_of_regions(this::Geometry,axis::String,number_of_regions::Int64)\n\nTo set the number of regions along a specified axis.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\naxis::String : axis along which the number of regions is specified, which can takes the following values:\nboundary = \"x\" : along x-axis\nboundary = \"y\" : along y-axis\nboundary = \"z\" : along z-axis\nnumber_of_regions::Int64 : number of regions.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> geo.set_number_of_regions(\"x\",3)\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.set_voxels_per_region-Tuple{Geometry, String, Vector{Int64}}","page":"Geometry","title":"Radiant.set_voxels_per_region","text":"set_voxels_per_region(this::Geometry,axis::String,voxels_per_region::Vector{Int64})\n\nTo set the number of voxels for each regions along a specified axis.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\naxis::String : axis along which the number of regions is specified, which can takes the following values:\nboundary = \"x\" : along x-axis\nboundary = \"y\" : along y-axis\nboundary = \"z\" : along z-axis\nvoxels_per_region::Vector{Int64} : vector with the number of voxels for each regions along the specified axis.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> geo.set_number_of_regions(\"x\",3)\njulia> geo.set_voxels_per_region(\"x\",[10,5,2])\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.set_region_boundaries-Tuple{Geometry, String, Vector{Float64}}","page":"Geometry","title":"Radiant.set_region_boundaries","text":"set_region_boundaries(this::Geometry,axis::String,region_boundaries::Vector{Float64})\n\nTo set the boundaries of each regions along a specified axis.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\naxis::String : axis along which the number of regions is specified, which can takes the following values:\nboundary = \"x\" : along x-axis\nboundary = \"y\" : along y-axis\nboundary = \"z\" : along z-axis\nregion_boundaries::Vector{Float64} : vector with the regions boundaries along the specified axis in ascending order.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> geo = Geometry()\njulia> geo.set_number_of_regions(\"x\",3)\njulia> geo.set_voxels_per_region(\"x\",[10,5,2])\njulia> geo.set_voxels_per_region(\"x\",[0.0 0.3 0.5 1.0])\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.set_material_per_region-Tuple{Geometry, Array{Material}}","page":"Geometry","title":"Radiant.set_material_per_region","text":"set_material_per_region(this::Geometry,material_per_region::Array{Material})\n\nTo set the material in each regions of the geometry.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\nmaterial_per_region::Array{Material} : array containing the material for each regions. Its size should fit the number of regions per axis.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\n# Define material\njulia> mat1 = Material(); mat2 = Material()\njulia> ... # Define the material properties\n\n# 1D geometry case\njulia> geo1D = Geometry()\njulia> geo1D.set_type(\"cartesian\")\njulia> geo1D.set_dimension(1)\njulia> geo1D.set_number_of_regions(\"x\",3)\njulia> geo1D.set_material_per_region([mat1 mat2 mat1])\n\n# 2D geometry case\njulia> geo1D = Geometry()\njulia> geo1D.set_type(\"cartesian\")\njulia> geo1D.set_dimension(2)\njulia> geo1D.set_number_of_regions(\"x\",2)\njulia> geo1D.set_number_of_regions(\"y\",3)\njulia> geo1D.set_material_per_region([mat1 mat2 mat1 ; mat2 mat1 mat2])\n\n\n\n\n\n\n","category":"method"},{"location":"api_geometry/#Radiant.build-Tuple{Geometry, Cross_Sections}","page":"Geometry","title":"Radiant.build","text":"build(this::Geometry,cs::Cross_Sections)\n\nTo build the geometry structure.\n\nInput Argument(s)\n\nthis::Geometry : geometry.\ncs::Cross_Sections : geometry.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> ... # Defining the cross-sections library properties\njulia> cs.build()\njulia> geo = Geometry()\njulia> ... # Defining the geometry properties\njulia> geo.build(cs)\n\n\n\n\n\n","category":"method"},{"location":"user_guide_getting_started/#1-Getting-Started-with-Radiant","page":"1 Getting Started with Radiant","title":"1 Getting Started with Radiant","text":"","category":"section"},{"location":"user_guide_getting_started/#1.1-What-is-Radiant","page":"1 Getting Started with Radiant","title":"1.1 What is Radiant","text":"","category":"section"},{"location":"user_guide_getting_started/","page":"1 Getting Started with Radiant","title":"1 Getting Started with Radiant","text":"Radiant is an open-source and general-purpose package to simulate the transport of particles in matter based on deterministic calculations, in opposition to Monte-Carlo codes such a GEANT4 or EGSnrc. It is written in Julia, an open-source programming language providing Python-like readability and flexibility, combined with execution times comparable to those of C++ and FORTRAN [73].","category":"page"},{"location":"user_guide_getting_started/#1.2-How-does-it-works","page":"1 Getting Started with Radiant","title":"1.2 How does it works","text":"","category":"section"},{"location":"user_guide_getting_started/","page":"1 Getting Started with Radiant","title":"1 Getting Started with Radiant","text":"In order to proceed to calculations, Radiant requires input from the user about the particles, the materials, the cross-sections, the discretization methods, the geometry, the sources, etc. It provides the user data structure (also called objects), which are defined in the following sections of the User's Guide, and corresponding functions (also called methods) to defines their properties. The user then does not have to understand the internal programming structure of Radiant to make it works.","category":"page"},{"location":"api_cross_sections/#Structure","page":"Cross_Sections","title":"Structure","text":"","category":"section"},{"location":"api_cross_sections/","page":"Cross_Sections","title":"Cross_Sections","text":"Radiant.Cross_Sections","category":"page"},{"location":"api_cross_sections/#Radiant.Cross_Sections","page":"Cross_Sections","title":"Radiant.Cross_Sections","text":"Cross_Sections\n\nStructure used to define the parameters to extract or build a multigroup cross-sections library.\n\nMandatory field(s)\n\nsource::String : source of the cross-sections.\nmaterials::Vector{Material} : material list.\nif source = \"fmac-m\"\nfile::String : file containing cross-sections data.\nif source = \"physics-models\"\nparticles::Vector{String} : particle list.\nenergy::Float64 : midpoint energy of the highest energy group [in MeV].\nnumber_of_groups::Int64 : number of energy groups.\ngroup_structure::String=\"log\" : type of group discretization.\nlegendre_order::Int64 : maximum order of the angular Legendre moments of the differential cross-sections.\ninteractions::Vector{Interaction} : list of interaction.\n** if source = \"custom\"**\nparticles::Vector{String} : particle list.\n\nOptional field(s) - with default values\n\nif source = \"physics-models\"\ncutoff::Float64 = 0.001 : lower energy bound of the lowest energy group (cutoff energy) [in MeV].\n** if source = \"custom\"**\ncustom_absorption::Vector{Real} : absorption cross-sections per material.\ncustom_scattering::Vector{Real} : scattering (isotropic) cross-sections per material.\n\n\n\n\n\n","category":"type"},{"location":"api_cross_sections/#Methods","page":"Cross_Sections","title":"Methods","text":"","category":"section"},{"location":"api_cross_sections/","page":"Cross_Sections","title":"Cross_Sections","text":"Radiant.set_source(this::Radiant.Cross_Sections,source::String)\nRadiant.set_file(this::Radiant.Cross_Sections,file::String)\nRadiant.set_materials(this::Radiant.Cross_Sections,materials::Vector{Radiant.Material})\nRadiant.set_particles(this::Radiant.Cross_Sections,particles::Vector{Particle})\nRadiant.set_energy(this::Radiant.Cross_Sections,energy::Real)\nRadiant.set_cutoff(this::Radiant.Cross_Sections,cutoff::Real)\nRadiant.set_number_of_groups(this::Radiant.Cross_Sections,number_of_groups::Vector{Int64})\nRadiant.set_group_structure(this::Radiant.Cross_Sections,group_structure::Vector{String})\nRadiant.set_interactions(this::Radiant.Cross_Sections,interactions::Vector{Radiant.Interaction})\nRadiant.set_legendre_order(this::Radiant.Cross_Sections,legendre_order::Int64)\nRadiant.build(this::Radiant.Cross_Sections)\nRadiant.write(this::Radiant.Cross_Sections,file::String)","category":"page"},{"location":"api_cross_sections/#Radiant.set_source-Tuple{Cross_Sections, String}","page":"Cross_Sections","title":"Radiant.set_source","text":"set_source(this::Cross_Sections,source::String)\n\nTo define the source of the cross-sections library.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nsource::String : source of the cross-sections library which is either:\nsource = \"physics-models\" : multigroup cross-sections are produced by Radiant\nsource = \"FMAC-M\" : multigroup cross-sections are extracted from FMAC-M file.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_source(\"FMAC-M\")\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_file-Tuple{Cross_Sections, String}","page":"Cross_Sections","title":"Radiant.set_file","text":"set_file(this::Cross_Sections,file::String)\n\nTo read a FMAC-M formatted file containing the cross-sections library.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nfile::String : file name and directory.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_file(\"fmac_m.txt\")\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_materials-Tuple{Cross_Sections, Vector{Material}}","page":"Cross_Sections","title":"Radiant.set_materials","text":"set_materials(this::Cross_Sections,materials::Vector{Material})\n\nTo set the list of material, either contained in FMAC-M file in order, or to produce in Radiant.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nmaterials::Vector{Material} : material list.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> mat1 = Material(); mat2 = Material()\njulia> ... # Defining the material properties\njulia> cs = Cross_Sections()\njulia> cs.set_materials([mat1,mat2])\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_particles-Tuple{Cross_Sections, Vector{Particle}}","page":"Cross_Sections","title":"Radiant.set_particles","text":"set_particles(this::Cross_Sections,particles::Union{Vector{Particle},Particle})\n\nTo set the list of particles for which to produce coupled library of cross-sections.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nparticles::Vector{Particle} : particles list.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_particles([electron,photon,positron])\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_energy-Tuple{Cross_Sections, Real}","page":"Cross_Sections","title":"Radiant.set_energy","text":"set_energy(this::Cross_Sections,energy::Real)\n\nTo set the midpoint energy of the highest energy group.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nenergy::Real : midpoint energy of the highest energy group.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_energy(3.0)\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_cutoff-Tuple{Cross_Sections, Real}","page":"Cross_Sections","title":"Radiant.set_cutoff","text":"set_cutoff(this::Cross_Sections,cutoff::Real)\n\nTo set the cutoff energy (lower bound of the lowest energy group).\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\ncutoff::Real : cutoff energy (lower bound of the lowest energy group)\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_cutoff(0.05)\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_number_of_groups-Tuple{Cross_Sections, Vector{Int64}}","page":"Cross_Sections","title":"Radiant.set_number_of_groups","text":"set_number_of_groups(this::Cross_Sections,number_of_groups::Vector{Int64})\n\nTo set the number of energy groups per particle.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nnumber_of_groups::Vector{Int64} : number of energy groups per particle in order with the particle list.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_particles([electron,photon,positron])\njulia> cs.set_number_of_groups([80,20,80]) # 80 groups with leptons, 20 with photons\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_group_structure-Tuple{Cross_Sections, Vector{String}}","page":"Cross_Sections","title":"Radiant.set_group_structure","text":"set_group_structure(this::Cross_Sections,group_structure::Union{Vector{String},String})\n\nTo set the type of energy discretization structure per particle.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\ngroup_structure::Vector{String} : type of energy discretization structure per particle, where value per particle can take the following value:\ngroup_structure[i] = \"linear\" : linearly spaced discretization.\ngroup_structure[i] = \"log\" : logarithmically spaced discretization.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_particles([electron,photon,positron])\njulia> cs.set_group_structure([\"log\",\"linear\",\"log\"]) # 80 groups with leptons, 20 with photons\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_interactions-Tuple{Cross_Sections, Vector{Radiant.Interaction}}","page":"Cross_Sections","title":"Radiant.set_interactions","text":"set_interactions(this::Cross_Sections,interactions::Vector{Interaction})\n\nTo set the interaction to take into account in the library of cross-sections.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\ninteractions::Vector{Interaction} : list of interactions to use in the production of the cross-sections library.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_particles([electron])\njulia> cs.set_interactions([Elastic_Leptons(),Inelastic_Leptons(),Bremsstrahlung(), Auger()])\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.set_legendre_order-Tuple{Cross_Sections, Int64}","page":"Cross_Sections","title":"Radiant.set_legendre_order","text":"set_legendre_order(this::Cross_Sections,legendre_order::Int64)\n\nTo set the maximum order of the Legendre expansion of the differential cross-sections.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nlegendre_order::Int64 : maximum order of the Legendre expansion of the differential cross-sections.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> cs.set_legendre_order(7)\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.build-Tuple{Cross_Sections}","page":"Cross_Sections","title":"Radiant.build","text":"build(this::Cross_Sections)\n\nTo build the cross-section library.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> ... # Defining the cross-sections library properties\njulia> cs.build()\n\n\n\n\n\n","category":"method"},{"location":"api_cross_sections/#Radiant.write-Tuple{Cross_Sections, String}","page":"Cross_Sections","title":"Radiant.write","text":"write(this::Cross_Sections,file::String)\n\nTo write a FMAC-M formatted file containing the cross-sections library.\n\nInput Argument(s)\n\nthis::Cross_Sections : cross-sections library.\nfile::String : file name and directory.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> cs = Cross_Sections()\njulia> ... # Defining the cross-sections library properties\njulia> cs.write(\"fmac_m.txt\")\n\n\n\n\n\n","category":"method"},{"location":"theory_annihilation/#2.2.4-Annihilation","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"","category":"section"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The annihilation interaction consists of an incoming positron that annihilates with an atomic electron to produce two photons. The combined photon's energy is equivalent to the sum of kinetic and mass energies of the annihilated atomic electron and incoming positron. As the kinetic energy of an incoming positron approaches zero, this interaction becomes inevitable. The model of Nelson et al. [63] is employed. The presented annihilation model is an improvement over CEPXS since it is explicitly defined as a positron cross-section.","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The following cross-sections describe the annihilation of an incoming positron (p=texttte+) with an atomic electron producing two photons (p=gamma), assuming that the electrons are free and at rest. The differential cross-sections in the energy of the lowest energy photon [19, 35]","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"sigma_s(E rightarrow E_gamma_-) = fracpi r_e^2(gamma+1)^2(gamma^2-1) left S(zeta) + S(1-zeta) vphantomfrac12 right","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"with","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"S(zeta) = -(gamma+1)^2 + (gamma^2+4gamma+1)frac1zeta - frac1zeta^2 ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"where E is the incoming positron energy, E_gamma_- is the lowest photon energy, E_gamma_+ = E + 2 - E_gamma_- is the highest photon energy and zeta = E_gamma_-(E+2) is the ratio of the lowest energy photon to the total (kinetic + mass) energy. The value of the lowest photon energy is bounded by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"E^textttmax = fracgamma+12 quad textand quad E^textttmin = fracgamma+1gamma+1+sqrtgamma^2-1 ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The scattering angles of the lowest and highest energy photons are respectively","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"mu_- = frac1sqrtgamma^2-1 left gamma+1-frac1zeta right quad textand quad mu_+ = frac1sqrtgamma^2-1 left gamma+1-frac11-zeta right ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"and the double differential cross-sections for the lowest and highest energy photons are given by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"sigma_s(E rightarrow E_gamma_-mu) = frac12pisigma_s(E rightarrow E_gamma_-)delta(mu-mu_-)","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"and","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"sigma_s(E rightarrow E_gamma_+mu) = frac12pisigma_s(E rightarrow E_gamma_+)delta(mu-mu_+) ","category":"page"},{"location":"theory_annihilation/#2.2.4.1-Scattering-cross-sections-for-the-lowest-energy-photons","page":"2.2.4 Annihilation","title":"2.2.4.1 Scattering cross-sections for the lowest energy photons","text":"","category":"section"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The annihilation Legendre moments of the differential scattering cross-sections for the lowest energy photons are given by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"sigma_sell(Erightarrow E_gamma_-) = 2piint_-1^1dmuP_ell(mu)sigma_s(Erightarrow E_gamma_-mu) = P_ell(mu_-)sigma_s(Erightarrow E_gamma_-) ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"Sigma_sellg^texttte+rightarrowgamma(E) = sum_i=1^N_e mathcalN_ni f_i Z_i displaystyleint_maxleftE^gamma_g+12E^textttminright^minleftE^gamma_g-12E^textttmaxrightdE_gamma_-sigma_sell(Erightarrow E_gamma_-) mathcalH_b ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"This equation is evaluated using numerical quadrature.","category":"page"},{"location":"theory_annihilation/#2.2.4.2-Scattering-cross-sections-for-the-highest-energy-photons","page":"2.2.4 Annihilation","title":"2.2.4.2 Scattering cross-sections for the highest energy photons","text":"","category":"section"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The annihilation Legendre moments of the differential scattering cross-sections for the highest energy photons are given by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"sigma_sell(Erightarrow E_gamma_+) = 2piint_-1^1dmuP_ell(mu)sigma_s(Erightarrow E_gamma_+mu) = P_ell(mu_+)sigma_s(Erightarrow E_gamma_+) ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The multigroup Legendre moments of the scattering cross-sections are therefore given by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"Sigma_sellg^texttte+rightarrowgamma(E) = sum_i=1^N_e mathcalN_ni f_i Z_i displaystyleint_maxleftE^gamma_g+12E^textttmaxright^minleftE^gamma_g-12(gamma+1)-E^textttminrightdE_gamma_+sigma_sell(Erightarrow E_gamma_+) mathcalH_b ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"This equation is evaluated using numerical quadrature.","category":"page"},{"location":"theory_annihilation/#2.2.4.3-Total-cross-sections","page":"2.2.4 Annihilation","title":"2.2.4.3 Total cross-sections","text":"","category":"section"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"The annihilation total cross-sections are defined by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"Sigma_t^texttte+(E) = sum_i=1^N_e mathcalN_ni f_i Z_i int_E^textttmin^E^textttmax dE_gamma_- sigma_s0(E rightarrow E_gamma_-)","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"and are evaluated analytically.","category":"page"},{"location":"theory_annihilation/#2.2.4.4-Annihilation-when-positrons-scatter-under-the-cutoff-energy","page":"2.2.4 Annihilation","title":"2.2.4.4 Annihilation when positrons scatter under the cutoff energy","text":"","category":"section"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"Positrons (p=texttte+) will inevitably annihilate with atomic electrons and produce two photons (p=gamma). Therefore, all positrons scattered under the cutoff energy E_G+12 should annihilate. The positron energy under the cutoff is small enough that the annihilation photon can be assumed to have isotropic scattering, as done in GEANT4 [64]. It is then assumed that two 511 keV photons are produced. The positrons are scattered under the cutoff following either an inelastic interaction or a bremsstrahlung interaction, and positrons can also be produced under the cutoff following pair production interaction. The ell = 0 Legendre moments of the scattering cross-sections are given by","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"Sigma_s0g rightarrow g^texttte+rightarrowgamma =  2leftSigma_ag^textttinel+Sigma_ag^textttbremvphantomdfrac11right times begincases 1  1 in E_g+12E_g-12  0  textotherwise endcases","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"and","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"Sigma_s0g rightarrow g^gammarightarrowgamma =  2Sigma_ag^textttpp times begincases 1  1 in E_g+12E_g-12  0  textotherwise endcases ","category":"page"},{"location":"theory_annihilation/","page":"2.2.4 Annihilation","title":"2.2.4 Annihilation","text":"where the ell ge 1 moments are equal to zero since scattering is isotropic. While these scattering cross-sections account for catastrophic impact ionization interactions, they do not include positrons reaching the cutoff energy by soft impact ionization interactions. In order to accurately estimate the production of annihilation photons following all impact ionization interactions, the lower bounds of integrals over energy loss W should be E-E_G+12 rather than E-minleftE_G+12E_cright, because the latter excluding soft interactions. However, the Bhabha-based impact ionization model is inaccurate for small energy losses, i.e. for soft interaction, and it can lead to substantial error in the solution when used to describe such interactions. Since these soft events require an improved impact ionization model for positron, which would required enormous effort, the annihilation photons produced by absorption of positrons at the cutoff energy are neglected. This will result in an underestimation of the production of annihilation photon, which have an impact on the accuracy of transport calculations.","category":"page"},{"location":"api_solvers/#Structure","page":"Solvers","title":"Structure","text":"","category":"section"},{"location":"api_solvers/","page":"Solvers","title":"Solvers","text":"Radiant.Solvers","category":"page"},{"location":"api_solvers/#Radiant.Solvers","page":"Solvers","title":"Radiant.Solvers","text":"Solvers\n\nStructure used to define the collection of discretization methods for transport calculations associated with each of the particle and additionnal coupled transport informations.\n\nMandatory field(s)\n\nmethods_list::Vector{Discrete_Ordinates} : list of the particle methods\nmaximum_number_of_generations::Int64 : number of particle generations to transport.\n\nOptional field(s) - with default values\n\nN/A\n\n\n\n\n\n","category":"type"},{"location":"api_solvers/#Methods","page":"Solvers","title":"Methods","text":"","category":"section"},{"location":"api_solvers/","page":"Solvers","title":"Solvers","text":"Radiant.add_solver(this::Radiant.Solvers,method::Radiant.Discrete_Ordinates)\nRadiant.set_maximum_number_of_generations(this::Radiant.Solvers,maximum_number_of_generations::Int64)\nRadiant.set_convergence_criterion(this::Radiant.Solvers,convergence_criterion::Real)\nRadiant.set_convergence_type(this::Radiant.Solvers,convergence_type::String)","category":"page"},{"location":"api_solvers/#Radiant.add_solver-Tuple{Solvers, Discrete_Ordinates}","page":"Solvers","title":"Radiant.add_solver","text":"add_solver(this::Solvers,method::Discrete_Ordinates)\n\nTo add a particle and is associated methods to the Solvers structure.\n\nInput Argument(s)\n\nthis::Solvers : collection of discretization method.\nmethod::Discrete_Ordinates : discretization method.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> m = Discrete_Ordinates()\njulia> ... # Define the methods properties\njulia> ms = Solvers()\njulia> ms.add_solver(m)\n\n\n\n\n\n","category":"method"},{"location":"api_solvers/#Radiant.set_maximum_number_of_generations-Tuple{Solvers, Int64}","page":"Solvers","title":"Radiant.set_maximum_number_of_generations","text":"set_maximum_number_of_generations(this::Solvers,maximum_number_of_generations::Int64)\n\nTo set the maximum number of particle generation to transport during calculations.\n\nInput Argument(s)\n\nthis::Solvers : collection of discretization method.\nmaximum_number_of_generations::Int64 : maximum number of particle generation to  transport during calculations.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ms = Solvers()\njulia> ms.set_maximum_number_of_generations(2)\n\n\n\n\n\n","category":"method"},{"location":"api_solvers/#Radiant.set_convergence_criterion-Tuple{Solvers, Real}","page":"Solvers","title":"Radiant.set_convergence_criterion","text":"set_convergence_criterion(this::Solvers,convergence_criterion::Real)\n\nTo set the convergence criterion for coupled particle transport.\n\nInput Argument(s)\n\nthis::Solvers : collection of discretization method.\nconvergence_criterion::Real : convergence criterion.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ms = Solvers()\njulia> ms.set_convergence_criterion(1e-7)\n\n\n\n\n\n","category":"method"},{"location":"api_solvers/#Radiant.set_convergence_type-Tuple{Solvers, String}","page":"Solvers","title":"Radiant.set_convergence_type","text":"set_convergence_type(this::Solvers,convergence_type::String)\n\nTo set the convergence type.\n\nInput Argument(s)\n\nthis::Solvers : collection of discretization method.\nconvergence_type::String : convergence type, which can be:\nconvergence_type = \"flux\" : convergence of the fluxes per particle.\nconvergence_type = \"energy-deposition\" : convergence of the total energy deposition.\nconvergence_type = \"charge-deposition\" : convergence of the total charge deposition.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ms = Solvers()\njulia> ms.set_convergence_type(\"energy-deposition\")\n\n\n\n\n\n","category":"method"},{"location":"user_guide_particles/#3-Particles","page":"3 Particles","title":"3 Particles","text":"","category":"section"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"In Radiant, particles are represented by the Radiant.Particle object. There are two primary ways to instantiate such an object:","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"Using Reserved Particle Constructors: Reserved constructors are designed for predefined particles like photons, electrons, or positrons. For example:","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"photon = Photon()\nelectron = Electron()\npositron = Positron()","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"Each of these generates a Radiant.Particle object preloaded with the properties specific to that particle type.","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"Using the General Constructor: The general constructor allows the creation of custom particles. For instance:","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"photon = Particle()","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"This generates a Radiant.Particle object without any predefined properties.","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"These Radiant.Particle object has the following features:","category":"page"},{"location":"user_guide_particles/","page":"3 Particles","title":"3 Particles","text":"Unique Identifiers: Every instantiation of a Radiant.Particle object, whether using a reserved or general constructor, is assigned a unique ID. This ensures that each particle can be distinguished, even if their properties are identical.\nExclusive Reserved Particles: Reserved particle types (e.g., photons, electrons) can only be instantiated through their specific constructors. This guarantees that these particles retain their predefined properties, enabling safe identification and treatment in computations.","category":"page"},{"location":"quick_start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"There are many ways to install Radiant on your computer.","category":"page"},{"location":"quick_start/#Prerequisites","page":"Quick Start","title":"Prerequisites","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Before installing the Radiant package, ensure you have the following prerequisites:","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Julia: Make sure Julia (> 1.6.7) is installed on your system. You can download it from the official Julia website.","category":"page"},{"location":"quick_start/#Installation-from-Julia's-Package-Manager","page":"Quick Start","title":"Installation from Julia's Package Manager","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"This installation method is recommended for users of Radiant.","category":"page"},{"location":"quick_start/#Step-1:-Open-Julia-REPL","page":"Quick Start","title":"Step 1: Open Julia REPL","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"First, open Julia REPL interactive session by launching Julia from a terminal or command prompt typing","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"> julia","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"in it.","category":"page"},{"location":"quick_start/#Step-2:-Add-Radiant","page":"Quick Start","title":"Step 2: Add Radiant","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"To add your package from the Julia prompt, you can either use","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> using Pkg\njulia> Pkg.add(\"Radiant\")","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"or","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> ]\npkg> add Radiant","category":"page"},{"location":"quick_start/#Step-3:-Use-Radiant","page":"Quick Start","title":"Step 3: Use Radiant","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"After installation, you can start using the Radiant package by including it in your project by adding the","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"using Radiant","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"line in the project's code.","category":"page"},{"location":"quick_start/#Installation-from-Github-repository","page":"Quick Start","title":"Installation from Github repository","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"This installation method is recommended for developers of Radiant.","category":"page"},{"location":"quick_start/#Step-1:-Create-a-Local-Repository","page":"Quick Start","title":"Step 1: Create a Local Repository","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Create a new local repository, in which the development of new feature for Radiant will take place. Then, open the terminal or command prompt in that repository.","category":"page"},{"location":"quick_start/#Step-2:-Clone-the-Radiant-Github-Repository","page":"Quick Start","title":"Step 2: Clone the Radiant Github Repository","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Clone the Radiant Github repository to your local machine by running the following command in the terminal or command prompt:","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"> git clone https://github.com/CBienvenue/Radiant.jl.git","category":"page"},{"location":"quick_start/#Step-3:-Install-the-Radiant-Package","page":"Quick Start","title":"Step 3: Install the Radiant Package","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Open Julia REPL interactive session by launching Julia from a terminal or command prompt typing","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"> julia","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"in it. Create a new environment in the project directory using","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> ]\npkg> activate .","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"This creates a new environment in the current directory and switch to it. Your local package and its dependencies will be managed separately from the global environment. Then, navigate to the package directory by running the following command in the terminal or command prompt:","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> cd(\"Radiant.jl\")","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"In the Julia REPL, run","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"pkg> dev .\npkg> instantiate","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"This command tells Julia to develop the package located in the current directory. The dev command sets up the package for development, including adding it to your Julia environment. Then, the instantiate command is used to resolve and install any dependencies.","category":"page"},{"location":"quick_start/#Step-4:-Using-the-Local-Radiant-Package","page":"Quick Start","title":"Step 4: Using the Local Radiant Package","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"After setting up the package, you can start using it by including it in your project with the using keyword:","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"using Radiant","category":"page"},{"location":"api_volume_source/#Structure","page":"Volume_Source","title":"Structure","text":"","category":"section"},{"location":"api_volume_source/","page":"Volume_Source","title":"Volume_Source","text":"Radiant.Volume_Source","category":"page"},{"location":"api_volume_source/#Radiant.Volume_Source","page":"Volume_Source","title":"Radiant.Volume_Source","text":"Volume_Source\n\nStructure used to define an isotropic volume source and its properties.\n\nMandatory field(s)\n\nname::String : name (or identifier) of the Volume_Source structure.\nparticle::Particle : type of particle emitted.\nenergy_group::Int64 : energy group index in which the particle are emitted.\nboundaries::Vector{Float64} : boundaries of the source along each axis [in cm].\n\nOptional field(s) - with default values\n\nintensity::Float64=1.0 : intensity [# particles/cmᴺ, where N is the geometry dimension].\n\n\n\n\n\n","category":"type"},{"location":"api_volume_source/#Methods","page":"Volume_Source","title":"Methods","text":"","category":"section"},{"location":"api_volume_source/","page":"Volume_Source","title":"Volume_Source","text":"Radiant.set_particle(this::Radiant.Volume_Source,particle::Particle)\nRadiant.set_intensity(this::Radiant.Volume_Source,intensity::Real)\nRadiant.set_energy_group(this::Radiant.Volume_Source,energy_group::Int64)\nRadiant.set_boundaries(this::Radiant.Volume_Source,axis::String,boundaries::Vector{Float64})","category":"page"},{"location":"api_volume_source/#Radiant.set_particle-Tuple{Volume_Source, Particle}","page":"Volume_Source","title":"Radiant.set_particle","text":"set_particle(this::Volume_Source,particle::String)\n\nTo define the source particle.\n\nInput Argument(s)\n\nthis::Volume_Source : volume source.\nparticle::Particle : particle.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> vs = Volume_Source()\njulia> vs.set_particle(electron)\n\n\n\n\n\n","category":"method"},{"location":"api_volume_source/#Radiant.set_intensity-Tuple{Volume_Source, Real}","page":"Volume_Source","title":"Radiant.set_intensity","text":"set_intensity(this::Volume_Source,intensity::Real)\n\nTo define the intensity of the source.\n\nInput Argument(s)\n\nthis::Volume_Source : volume source.\nintensity::Float64 : intensity [# particles/cmᴺ, where N is the geometry dimension]\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> vs = Volume_Source()\njulia> vs.set_intensity(100)\n\n\n\n\n\n","category":"method"},{"location":"api_volume_source/#Radiant.set_energy_group-Tuple{Volume_Source, Int64}","page":"Volume_Source","title":"Radiant.set_energy_group","text":"set_energy_group(this::Volume_Source,energy_group::Int64)\n\nTo define the energy of the source by setting the energy group in which they are produced.\n\nInput Argument(s)\n\nthis::Volume_Source : volume source.\nenergy_group::Int64 : energy group index.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> vs = Volume_Source()\njulia> vs.set_energy_group(1)\n\n\n\n\n\n","category":"method"},{"location":"api_volume_source/#Radiant.set_boundaries-Tuple{Volume_Source, String, Vector{Float64}}","page":"Volume_Source","title":"Radiant.set_boundaries","text":"set_boundaries(this::Volume_Source,axis::String,boundaries::Vector{Float64})\n\nTo define the boundaries of the source along the specified axis.\n\nInput Argument(s)\n\nthis::Volume_Source : volume source.\naxis::String : axis along which the boundaries are defined.\nboundaries::Vector{Float64} : boundaries of the source in accending order [in cm]\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> vs = Volume_Source()\njulia> vs.set_boundaries(\"x\",[1.0,3.0])\n\n\n\n\n\n","category":"method"},{"location":"api_bremsstrahlung/#Structure","page":"Bremsstrahlung","title":"Structure","text":"","category":"section"},{"location":"api_bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"Radiant.Bremsstrahlung","category":"page"},{"location":"api_bremsstrahlung/#Radiant.Bremsstrahlung","page":"Bremsstrahlung","title":"Radiant.Bremsstrahlung","text":"Bremsstrahlung\n\nStructure used to define parameters for production of multigroup bremsstrahlung cross-sections.\n\nMandatory field(s)\n\nN/A\n\nOptional field(s) - with default values\n\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} = Dict((Electron,Electron) => [\"S\"],(Electron,Photon) => [\"P\"],(Positron,Positron) => [\"S\"],(Positron,Photon) => [\"P\"]) : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which values correspond:\n(Electron,Electron) => [\"S\"] : scattering of incident electron following Bremsstrahlung interaction.\n(Electron,Photon) => [\"P\"] : produced photon following Bremsstrahlung interaction by incident electron.\n(Positron,Positron) => [\"S\"] : scattering of incident positron following Bremsstrahlung interaction.\n(Positron,Photon) => [\"P\"] : produced photon following Bremsstrahlung interaction by incident positron.\nangular_scattering_type::String=modified_dipole : type of angular scattering, which can takes the following values:\nangular_scattering_type = modified_dipole : modified dipôle distribution, based on Poskus (2019) shape functions.\nangular_scattering_type = sommerfield : Sommerfield distribution.\n\n\n\n\n\n","category":"type"},{"location":"api_bremsstrahlung/#Methods","page":"Bremsstrahlung","title":"Methods","text":"","category":"section"},{"location":"api_bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"Radiant.set_interaction_types(this::Radiant.Bremsstrahlung,interaction_types)\nRadiant.set_angular_scattering_type(this::Radiant.Bremsstrahlung,angular_scattering_type::String)","category":"page"},{"location":"api_bremsstrahlung/#Radiant.set_interaction_types-Tuple{Bremsstrahlung, Any}","page":"Bremsstrahlung","title":"Radiant.set_interaction_types","text":"set_interaction_types(this::Bremsstrahlung,interaction_types::Dict{Tuple{DataType,DataType},Vector{String}})\n\nTo define the interaction types for bremsstrahlung processes.\n\nInput Argument(s)\n\nthis::Bremsstrahlung : bremsstrahlung structure.\ninteraction_types::Dict{Tuple{DataType,DataType},Vector{String}} : Dictionary of the interaction processes types, of the form (incident particle,outgoing particle) => associated list of interaction type, which can be:\n(Electron,Electron) => [\"S\"] : scattering of incident electron following Bremsstrahlung interaction.\n(Electron,Photon) => [\"P\"] : produced photon following Bremsstrahlung interaction by incident electron.\n(Positron,Positron) => [\"S\"] : scattering of incident positron following Bremsstrahlung interaction.\n(Positron,Photon) => [\"P\"] : produced photon following Bremsstrahlung interaction by incident positron.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> bremsstrahlung = Bremsstrahlung()\njulia> bremsstrahlung.set_interaction_types( Dict((Electron,Electron) => [\"S\"]) ) # Only electron scattering, with photon absorption.\n\n\n\n\n\n","category":"method"},{"location":"api_bremsstrahlung/#Radiant.set_angular_scattering_type-Tuple{Bremsstrahlung, String}","page":"Bremsstrahlung","title":"Radiant.set_angular_scattering_type","text":"set_angular_scattering_type(this::Bremsstrahlung,angular_scattering_type::String)\n\nTo define the bremsstrahlung photons angular distribution.\n\nInput Argument(s)\n\nthis::Bremsstrahlung : bremsstrahlung structure.\nangular_scattering_type::String : angular scattering type.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> bremsstrahlung = Bremsstrahlung()\njulia> bremsstrahlung.set_angular_scattering_type(\"sommerfield\")\n\n\n\n\n\n","category":"method"},{"location":"theory_spatial_discretization/#1.4-Spatial-discretization","page":"1.4 Spatial Discretization","title":"1.4 Spatial discretization","text":"","category":"section"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"The spatial domain is discretized using finite-element methods.","category":"page"},{"location":"theory_spatial_discretization/#1.4.1-Cartesian-geometry","page":"1.4 Spatial Discretization","title":"1.4.1 Cartesian geometry","text":"","category":"section"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"<figure>\n    <img src=\"../spatial_meshes.png\" alt=\"drawing\" style=\"width: min(550px, 100vw);\"/>\n    <figcaption> Figure 1: Spatial Discretization.</figcaption>\n</figure>","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"The spatial domain is divided N_x meshes along the x axis, N_y meshes along the y axis and N_z meshes along the z axis. The midpoint energy of the mesh i (j or k) along the x (y or z) axis is x_i (y_j or z_k), its width is Delta x_i (Delta y_j or Delta z_k), and its upper and lower boundaries are respectively x_i+12 (y_j+12 or z_k+12) and x_i-12 (y_j-12 or z_k-12), as shown in Fig.1. The classical Galerkin method of weighted residuals [11] is applied to the spatial domain. The changes of variable","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"u_x = frac2x-x_i-12-x_i+122Delta x_i in -1212 ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"u_y = frac2y-y_j-12-y_j+122Delta y_j in -1212 ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"u_z = frac2z-z_k-12-z_k+122Delta z_k in -1212 ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"is applied. The atomic data are assumed to be constant within each spatial element, such as the resulting discrete ordinates multigroup BFP equation is given by","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"beginsplit fracmu_nDelta x_i fracpartial Phi_pgnijk^(m_textttE)partial u_x(u_xu_yu_z) + fraceta_nDelta y_j fracpartial Phi_pgnijk^(m_textttE)partial u_y(u_xu_yu_z) + fracxi_nDelta z_k fracpartial Phi_pgnijk^(m_textttE)partial u_z(u_xu_yu_z)  + sqrt2m_textttE+1 sum_j_2=0^M_textttE sum_j_3=0^M_textttE sqrt2j_2+1sqrt2j_3+1 mathcalW_m_textttEj_2j_3 Sigma_tgijk^p(j_2) Phi_pgnijk^(j_3)(u_xu_yu_z)  - fracsqrt2m_textttE+1Delta E_g left S^p_g-12ijkPhi_pg-12nijk(u_xu_yu_z) - (-1)^m_textttE S^p_g+12ijkPhi_pg+12nijk(u_xu_yu_z) right  left- sum_j_1=0^m_textttE-1 frac2j_1+12 left 1 - (-1)^m_E-j_1-1 right sum_j_2=0^M_textttE sum_j_3=0^M_textttE sqrt2j_2+1sqrt2j_3+1 mathcalW_j_1j_2j_3 S_gijk^p(j_2)Phi_pgnijk^(j_3)(u_xu_yu_z) right  = Phi_pgnijk^(m_textttE)(u_xu_yu_z) endsplit","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"where Phi_pgnijk^(m_textttE)(u_xu_yu_z) includes the Boltzmann, the angular Fokker-Planck and the external sources. The angular flux are expanded up the (M_textttEM_xM_yM_z) order such as","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnijk(u_Eu_xu_yu_z) = sum_m_textttE=0^M_textttE sum_m_x=0^M_x sum_m_y=0^M_y sum_m_z=0^M_z tildeP_m_textttE(u_textttE) tildeP_m_x(u_x) tildeP_m_y(u_y) tildeP_m_z(u_z) Phi_pgnijk^(m_textttEm_xm_ym_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"while the group boundary fluxes are given by an expansion up to the (M_xM_yM_z) order,","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgpm12nijk(u_xu_yu_z) = sum_m_x=0^M_x sum_m_y=0^M_y sum_m_z=0^M_z tildeP_m_x(u_x) tildeP_m_y(u_y) tildeP_m_z(u_z) Phi_pgpm12nijk^(m_xm_ym_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"the spatial mesh x-boundary fluxes are given by an expansion up to the (M_textttEM_yM_z) order,","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnipm12jk(u_textttEu_yu_z) = sum_m_textttE=0^M_textttE sum_m_y=0^M_y sum_m_z=0^M_z tildeP_m_textttE(u_textttE) tildeP_m_y(u_y) tildeP_m_z(u_z) Phi_pgnipm12jk^(m_textttEm_ym_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"the spatial mesh y-boundary fluxes are given by an expansion up to the (M_textttEM_xM_z) order,","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnijpm12k(u_textttEu_xu_z) = sum_m_textttE=0^M_textttE sum_m_x=0^M_x sum_m_z=0^M_z tildeP_m_textttE(u_textttE) tildeP_m_x(u_x) tildeP_m_z(u_z) Phi_pgnijpm12k^(m_textttEm_xm_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"the spatial mesh z-boundary fluxes are given by an expansion up to the (M_textttEM_xM_y) order,","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnijkpm12(u_textttEu_xu_y) = sum_m_textttE=0^M_textttE sum_m_x=0^M_x sum_m_y=0^M_y tildeP_m_textttE(u_textttE) tildeP_m_x(u_x) tildeP_m_y(u_y) Phi_pgnijkpm12^(m_textttEm_xm_y) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"The moment of the angular flux are given by","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnijk^(m_textttEm_xm_ym_z) = int_-12^12du_textttE int_-12^12du_x int_-12^12du_y int_-12^12du_z tildeP_m_textttE(u_textttE) tildeP_m_x(u_x) tildeP_m_y(u_y) tildeP_m_z(u_z) Phi_pgnijk(u_textttEu_xu_yu_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"while the boundary moments are given by","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgpm12nijk^(m_xm_ym_z) = int_-12^12du_x int_-12^12du_y int_-12^12du_z tildeP_m_x(u_x) tildeP_m_y(u_y) tildeP_m_z(u_z) Phi_pgpm12nijk(u_xu_yu_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnipm12jk^(m_textttEm_ym_z) = int_-12^12du_textttE int_-12^12du_y int_-12^12du_z tildeP_m_textttE(u_textttE) tildeP_m_y(u_y) tildeP_m_z(u_z) Phi_pgnipm12jk(u_textttEu_yu_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnijpm12k^(m_textttEm_xm_z) = int_-12^12du_textttE int_-12^12du_x int_-12^12du_z tildeP_m_textttE(u_textttE) tildeP_m_x(u_x) tildeP_m_z(u_z) Phi_pgnijpm12k(u_textttEu_xu_z) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Phi_pgnijkpm12^(m_textttEm_xm_y) = int_-12^12du_textttE int_-12^12du_x int_-12^12du_y tildeP_m_textttE(u_textttE) tildeP_m_x(u_x) tildeP_m_y(u_y) Phi_pgnijkpm12(u_textttEu_xu_y) ","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"Multiplying the BFP equation by the normalized Legendre polynomials P_m_x(u) and integrating over u_x in -1212, the m_x-th moment equation become","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"beginsplit  sqrt2m_x+1fracmu_nDelta x_i left Phi_pgni+12jk^(m_textttEm_ym_z) - (-1)^m_x Phi_pgni-12jk^(m_textttEm_ym_z) - sum_j_1=0^m_x-1 sqrt2j_1+1 left 1 - (-1)^m_x-j_1-1 right Phi_pgnijk^(m_textttEj_1m_ym_z) right  + sqrt2m_y+1fraceta_nDelta y_j left Phi_pgnij+12k^(m_textttEm_xm_z) - (-1)^m_y Phi_pgnij-12k^(m_textttEm_xm_z) - sum_j_1=0^m_y-1 sqrt2j_1+1 left 1 - (-1)^m_y-j_1-1 right Phi_pgnijk^(m_textttEm_xj_1m_z) right  + sqrt2m_z+1fracxi_nDelta z_k left Phi_pgnijk+12^(m_textttEm_xm_y) - (-1)^m_z Phi_pgnijk-12^(m_textttEm_xm_y) - sum_j_1=0^m_z-1 sqrt2j_1+1 left 1 - (-1)^m_z-j_1-1 right Phi_pgnijk^(m_textttEm_xm_yj_1) right + sqrt2m_textttE+1 sum_j_2=0^M_textttE sum_j_3=0^M_textttE sqrt2j_2+1sqrt2j_3+1 mathcalW_m_textttEj_2j_3 Sigma_tgijk^p(j_2) Phi_pgnijk^(j_3m_xm_ym_z)  - fracsqrt2m_textttE+1Delta E_g left S^p_g-12ijkPhi_pg-12nijk^(m_xm_ym_z) - (-1)^m_textttE S^p_g+12ijkPhi_pg+12nijk^(m_xm_ym_z) right  left- sum_j_1=0^m_textttE-1 frac2j_1+12 left 1 - (-1)^m_E-j_1-1 right sum_j_2=0^M_textttE sum_j_3=0^M_textttE sqrt2j_2+1sqrt2j_3+1 mathcalW_j_1j_2j_3 S_gijk^p(j_2)Phi_pgnijk^(j_3m_xm_ym_z) right  = Phi_pgnijk^(m_textttEm_xm_ym_z) endsplit","category":"page"},{"location":"theory_spatial_discretization/","page":"1.4 Spatial Discretization","title":"1.4 Spatial Discretization","text":"The incoming and outgoing flux at energy group and spatial mesh boundaries require the definition of closure relations, which is describe in a further section.","category":"page"},{"location":"user_guide_geometry/#5-Geometry","page":"5 Geometry","title":"5 Geometry","text":"","category":"section"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"A geometry in Radiant is represented by the Radiant.Geometry object. Once instantiated, its properties can be configured, and calculation can be done to prepare for transport calculations.","category":"page"},{"location":"user_guide_geometry/#5.1-Cartesian-geometries","page":"5 Geometry","title":"5.1 Cartesian geometries","text":"","category":"section"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"Radiant provides the capabilities to produce heterogenous medium in Cartesian geometries. For 1D Cartesian geometry, only the axis x is defined, for 2D Cartesian geometry, only the axis x and y, and in 3D Cartesian geometry, the axis x, y and z are to be defined. Let's examine how to build a geometry object. The first step is to instantiate the Radiant.Geometry object, set the type of the geometry (Cartesian) and its dimension:","category":"page"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"geo = Geometry()\ngeo.set_type(\"cartesian\")\ngeo.set_dimension(1)","category":"page"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"Then, the geometry has to be divided in regions, such as each region can be associated with a material. For exemle, in 1D geometry, a Al-Au-Al slab can be described as","category":"page"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"geo.set_number_of_regions(\"x\",3)                  # Set the number of regions along x\ngeo.set_region_boundaries(\"x\",[0.0,0.2,0.4,0.6])  # Set the region boundaries.\ngeo.set_voxels_per_region(\"x\",[20,20,20])         # Set the number of voxels per regions\ngeo.set_boundary_conditions(\"x-\",\"void\")          # Set the x- boundary condition\ngeo.set_boundary_conditions(\"x+\",\"void\")          # Set the x+ boundary condition\ngeo.set_material_per_region([al,au,al])           # Set the material in each region","category":"page"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"Finally, the geometry component can be prepared for the further transport calculations using","category":"page"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"geo.build(cs)","category":"page"},{"location":"user_guide_geometry/#5.2-Other-Kind-of-Geometries","page":"5 Geometry","title":"5.2 Other Kind of Geometries","text":"","category":"section"},{"location":"user_guide_geometry/","page":"5 Geometry","title":"5 Geometry","text":"note: Note\nAt the moment, Radiant only treat 1D, 2D and 3D Cartesian geometries.","category":"page"},{"location":"api_surface_source/#Structure","page":"Surface_Source","title":"Structure","text":"","category":"section"},{"location":"api_surface_source/","page":"Surface_Source","title":"Surface_Source","text":"Radiant.Surface_Source","category":"page"},{"location":"api_surface_source/#Radiant.Surface_Source","page":"Surface_Source","title":"Radiant.Surface_Source","text":"Surface_Source\n\nStructure used to define a directionnal boundary source and its properties.\n\nMandatory field(s)\n\nname::String : name (or identifier) of the Surface_Source structure.\nparticle::Particle : type of particle emitted.\nenergy_group::Int64 : energy group index in which the particle are emitted.\ndirection::Vector{Float64} : direction cosine.\nlocation::String : boundary at which the source is located.\nboundaries::Vector{Float64} : boundaries of the source along each axis [in cm].\n\nOptional field(s) - with default values\n\nintensity::Float64=1.0 : intensity [# particles/cm⁽ᴺ⁻¹⁾, where N is the geometry dimension].\n\n\n\n\n\n","category":"type"},{"location":"api_surface_source/#Methods","page":"Surface_Source","title":"Methods","text":"","category":"section"},{"location":"api_surface_source/","page":"Surface_Source","title":"Surface_Source","text":"Radiant.set_particle(this::Radiant.Surface_Source,particle::Particle)\nRadiant.set_intensity(this::Radiant.Surface_Source,intensity::Real)\nRadiant.set_energy_group(this::Radiant.Surface_Source,energy_group::Int64)\nRadiant.set_direction(this::Radiant.Surface_Source,direction::Vector{Float64})\nRadiant.set_location(this::Radiant.Surface_Source,location::String)\nRadiant.set_boundaries(this::Radiant.Surface_Source,axis::String,boundaries::Vector{Float64})","category":"page"},{"location":"api_surface_source/#Radiant.set_particle-Tuple{Surface_Source, Particle}","page":"Surface_Source","title":"Radiant.set_particle","text":"set_particle(this::Surface_Source,particle::Particle)\n\nTo define the source particle.\n\nInput Argument(s)\n\nthis::Surface_Source : surface source.\nparticle::String : particle.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ss = Surface_Source()\njulia> ss.set_particle(electron)\n\n\n\n\n\n","category":"method"},{"location":"api_surface_source/#Radiant.set_intensity-Tuple{Surface_Source, Real}","page":"Surface_Source","title":"Radiant.set_intensity","text":"set_intensity(this::Surface_Source,intensity::Real)\n\nTo define the intensity of the source.\n\nInput Argument(s)\n\nthis::Surface_Source : surface source.\nintensity::Float64 : intensity [# particles/cmᴺ, where N is the geometry dimension]\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ss = Surface_Source()\njulia> ss.set_intensity(100)\n\n\n\n\n\n","category":"method"},{"location":"api_surface_source/#Radiant.set_energy_group-Tuple{Surface_Source, Int64}","page":"Surface_Source","title":"Radiant.set_energy_group","text":"set_energy_group(this::Surface_Source,energy_group::Int64)\n\nTo define the energy of the source by setting the energy group in which they are produced.\n\nInput Argument(s)\n\nthis::Surface_Source : surface source.\nenergy_group::Int64 : energy group index.\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ss = Surface_Source()\njulia> ss.set_energy_group(1)\n\n\n\n\n\n","category":"method"},{"location":"api_surface_source/#Radiant.set_direction-Tuple{Surface_Source, Vector{Float64}}","page":"Surface_Source","title":"Radiant.set_direction","text":"set_direction(this::Surface_Source,direction::Vector{Float64})\n\nTo set a direction of the source.\n\nInput Argument(s)\n\nthis::Surface_Source : surface source.\ndirection::Vector{Float64} : director cosines [μ,η,ξ]\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ss = Surface_Source()\njulia> ss.set_direction([1.0,0.0,0.0])\n\n\n\n\n\n","category":"method"},{"location":"api_surface_source/#Radiant.set_location-Tuple{Surface_Source, String}","page":"Surface_Source","title":"Radiant.set_location","text":"set_location(this::Surface_Source,location::String)\n\nTo set the location of the surface source.\n\nInput Argument(s)\n\nthis::Surface_Source : surface source.\nlocation::String : boundary on which the surface source is, which can takes the following value:\nboundary = \"x-\" : the lower bound along x-axis\nboundary = \"x+\" : the upper bound along x-axis\nboundary = \"y-\" : the lower bound along y-axis\nboundary = \"y+\" : the upper bound along y-axis\nboundary = \"z-\" : the lower bound along z-axis\nboundary = \"z+\" : the upper bound along z-axis\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ss = Surface_Source()\njulia> ss.set_location(\"x-\")\n\n\n\n\n\n","category":"method"},{"location":"api_surface_source/#Radiant.set_boundaries-Tuple{Surface_Source, String, Vector{Float64}}","page":"Surface_Source","title":"Radiant.set_boundaries","text":"set_boundaries(this::Surface_Source,axis::String,boundaries::Vector{Float64})\n\nTo define the boundaries of the source along the specified axis.\n\nInput Argument(s)\n\nthis::Surface_Source : surface source.\naxis::String : axis along which the boundaries are defined.\nboundaries::Vector{Float64} : boundaries of the source in accending order [in cm]\n\nOutput Argument(s)\n\nN/A\n\nExamples\n\njulia> ss = Surface_Source()\njulia> ss.set_boundaries(\"x\",[1.0,3.0])\n\n\n\n\n\n","category":"method"},{"location":"theory_atomic_relaxation/#2.3-Atomic-Relaxation","page":"2.3 Atomic Relaxation","title":"2.3 Atomic Relaxation","text":"","category":"section"},{"location":"theory_atomic_relaxation/","page":"2.3 Atomic Relaxation","title":"2.3 Atomic Relaxation","text":"The ionization of an atomic electron in shell k by an incoming particle leaves behind a vacancy in the atom's electronic structure i. The inner-shell vacancy in an atom is filled by an outer-shell electron, leading to the emission of a fluorescence photon or the ejection of an Auger electron. This process leaves additional vacancies in outer shells, triggering the production of more photons or electrons, resulting in a recursive process. These intricate relaxation processes are often referred to as relaxation cascades, for which a simplified visual diagram can be found in Lorence et al. [3] and Naceur et al. [65]. Because such calculation can be rather intensive for high-Z atoms, only particle productions with a probability of occurrence following an initial ionization event greater than 0.1 % are included in this work. Finally, only the N_t specific electron cascade transitions which result in electron or photon with energy greater than the cutoff energy E_G+12 are kept for the following calculations.","category":"page"},{"location":"theory_atomic_relaxation/","page":"2.3 Atomic Relaxation","title":"2.3 Atomic Relaxation","text":"The differential cross-sections corresponding to the production of either fluorescence (p=gamma) or Auger electron (p=texttte-) following a specific electron cascade transition j, where 1 le j le N_t, with the produced particle energy, Delta E_ikj, and the probability of occurrence of the j electron cascade, eta_ikj^p, is given by","category":"page"},{"location":"theory_atomic_relaxation/","page":"2.3 Atomic Relaxation","title":"2.3 Atomic Relaxation","text":"sigma_s^ikjprightarrow p(E rightarrow E) = eta_ikj^p delta(E-Delta E_ikj^p) sigma^ikp_t(E) ","category":"page"},{"location":"theory_atomic_relaxation/","page":"2.3 Atomic Relaxation","title":"2.3 Atomic Relaxation","text":"where sigma^ikp_t(E) is the k-shell cross-sections of either inelastic electron (p=texttte-), inelastic positron (p=texttte+) or photoelectric interaction (p=gamma) given in previous sections. The values of Delta E_ikj^p and eta_ikj^p are computed using the relaxation data from the JENDL-5 library [16], based on the EADL library [36], as proposed by Hébert and Naceur [66]. The data is available for Z in left6100right for subshells K, L1 to L3, M1 to M5, N1 to N7, O1 to O7, P1 to P3 and Q1. For Z le 5, the produced relaxation radiation energy is very low and can be ignored in transport calculations. The production of fluorescence photon and Auger electron is assumed to be isotropic.","category":"page"}]
}
