"""
    multigroup(Z::Int64,Ei·µá::Vector{Float64},Ef·µá::Vector{Float64},L::Int64,
    interaction::Interaction,solver::String)

Produce the multigroup macroscopic cross sections.

# Input Argument(s)
- 'Z::Int64': atomic number of the element.
- 'Ei·µá::Vector{Float64}': energy boundaries of the incoming particle [in MeV].
- 'Ef·µá::Vector{Float64}': energy boundaries of the outgoing particle [in MeV].
- 'L::Int64': Legendre truncation order.
- 'interaction::Interaction': structure containing information about the interaction.

# Output Argument(s)
- 'Œ£s‚Ñì::Array{Float64,3}': Legendre moments of the differential cross section [in cm‚Åª¬π].
- 'Œ£t::Vector{Float64}': total cross sections [in cm‚Åª¬π].
- 'Œ£a::Vector{Float64}': absorption cross sections [in cm‚Åª¬π].
- 'Œ£s::Vector{Float64}': secondary production cross sections [in cm‚Åª¬π].
- 'Œ£e::Vector{Float64}': energy deposition cross sections [in MeV √ó cm‚Åª¬π].
- 'Œ£c::Vector{Float64}': charge deposition cross sections [in cm‚Åª¬π].
- 'S::Vector{Float64}': stopping power [MeV √ó cm‚Åª¬π].
- 'Œ±::Vector{Float64}': momentum transfer [in cm‚Åª¬π].

# Reference(s)
- Lorence (1989), Physics Guide to CEPXS: A Multigroup Coupled Electron-Photon
  Cross-Section Generating Code.

"""
function multigroup(Z::Vector{Int64},œâz::Vector{Float64},œÅ::Float64,state_of_matter::String,Ei·µá::Vector{Float64},Ef·µá::Vector{Float64},L::Int64,interaction::Interaction,full_type::String,incoming_particle::String,scattered_particle::String,particles::Vector{String},Npts::Int64,isStandard)

if isStandard
    println("Start of ",interaction.name," calculations.") 
end

# Initialization
m‚Çëc¬≤ = 0.510999
Ngi = length(Ei·µá)-1; Ngf = length(Ef·µá)-1
Œ£t = zeros(Ngi); Œ£t‚Çë = zeros(Ngi); Œ£a = zeros(Ngi); Œ£s = zeros(Ngi); Œ£e = zeros(Ngi); Œ£c = zeros(Ngi); S = zeros(Ngi+1); Sm = zeros(Ngi); Œ± = zeros(Ngi)
Œ£s‚Ñì = zeros(Ngi,Ngf,L+1); Œ£s‚Çë = zeros(Ngi,Ngf)
ùìï = zeros(Ngf+1,L+1); ùìï‚Çë = zeros(Ngf+1)
charge = particle_charge(incoming_particle)
type = string(full_type[1])


# Multigroup cross sections preparation

# Change of units (MeV ‚Üí m‚Çëc¬≤)
E_in = Ei·µá./m‚Çëc¬≤; E_out = Ef·µá./m‚Çëc¬≤;

# Incoming particle energy spectrum
is_dirac, Np, q_type = in_distribution_dispatch(interaction,full_type)
if is_dirac Np = 1; u = [0]; w = [2] else u,w = quadrature(Np,q_type) end

# Preloading data for calculations
if (interaction.is_preload_data) preload_data_dispatch(interaction,Z,E_in[1],E_in[end],L,œâz,œÅ,E_out,incoming_particle,full_type,E_in) end

# Compute cross sections in each energy group
@inbounds for gi in range(1,Ngi)

    # Initial energy group
    Ei‚Åª = E_in[gi]; Ei‚Å∫ = E_in[gi+1]
    if (gi < Ngi) Ei¬≤‚Å∫ = E_in[gi+2] else Ei¬≤‚Å∫ = 0.0 end
    ŒîEi = Ei‚Åª - Ei‚Å∫

    # Total and scattering differential cross section
    for ni in range(1,Np)

        # Incoming energy
        Ei = (u[ni]*ŒîEi + (Ei‚Åª+Ei‚Å∫))/2

        # Boundary between catastrophic and soft interactions
        ŒîE_soft = (Ei‚Å∫^2-Ei‚Åª*Ei¬≤‚Å∫)/(Ei‚Åª-Ei‚Å∫) + (Ei‚Åª-2*Ei‚Å∫+Ei¬≤‚Å∫)/(Ei‚Åª-Ei‚Å∫) * Ei
        Ec = Ei-ŒîE_soft
        if (interaction.scattering_model == "FP") Ec = 0.0 end

        # Total cross sections
        if type != "P" && ~(interaction.scattering_model == "FP" && type == "S")
            Nz = length(Z)
            Œ£t·µ¢ = 0.0
            for i in range(1,Nz)
                Œ£t·µ¢ += 1/2 * w[ni] * tcs_dispatch(interaction,Ei,Z[i],Ec,i,incoming_particle,E_in[end],E_out,Z,œâz,œÅ,full_type) * nuclei_density(Z[i],œÅ) * œâz[i]
            end
            if is_dirac Œ£t·µ¢ /= ŒîEi end
            Œ£t[gi] += Œ£t·µ¢
            if (~interaction.is_elastic)
                if typeof(interaction) == Pair_Production
                    Œ£t‚Çë[gi] += Œ£t·µ¢ * (Ei-2)
                elseif typeof(interaction) == Annihilation
                    Œ£t‚Çë[gi] += Œ£t·µ¢ * (Ei+2)
                else
                    Œ£t‚Çë[gi] += Œ£t·µ¢ * Ei
                end
            end
        end

        # Scattering cross sections
        if type == "A" continue end # No scattering for absorption interaction
        if ~(interaction.scattering_model == "FP" && type == "S")
            ùìï, ùìï‚Çë = feed(Z,œâz,œÅ,L,Ei,E_out,Ngf,interaction,gi,Ngi,particles,Npts,full_type,incoming_particle,scattered_particle,E_in,Ec)
            if is_dirac ùìï ./= ŒîEi; ùìï‚Çë ./= ŒîEi end
            for gf in range(1,Ngf)
                Œ£s‚Ñì[gi,gf,:] += 1/2 * w[ni] * ùìï[gf,:]
                if (~interaction.is_elastic) Œ£s‚Çë[gi,gf] += 1/2 * w[ni] * ùìï‚Çë[gf] end
            end
        end

        # Momentum transfer
        if  (interaction.name == "mott" && interaction.scattering_model == "FP") || (interaction.is_CSD && type != "P")
            Nz = length(Z)
            Œ±[gi] = 0.0
            for i in range(1,Nz)
                Œ±[gi] += 1/2 * w[ni] * mt_dispatch(interaction,Ei,Ec) * nuclei_density(Z[i],œÅ) * œâz[i]
            end
            if is_dirac Œ±[gi] ./= ŒîEi end
        end

        # Stopping power
        if (interaction.is_CSD) && type != "P"
            Sm[gi] += 1/2 * w[ni] * sp_dispatch(interaction,Z,œâz,œÅ,state_of_matter,Ei,Ec,incoming_particle,E_in[end],E_out)
            if is_dirac Sm[gi] ./= ŒîEi end
        end

    end

    # Stopping power at boundaries
    if (interaction.is_CSD) && type != "P" && full_type != "A‚Çê"
        S[gi] = sp_dispatch(interaction,Z,œâz,œÅ,state_of_matter,Ei‚Åª,Ei‚Å∫,incoming_particle,E_in[end],E_out)
        if (gi == Ngi) S[gi+1] += sp_dispatch(interaction,Z,œâz,œÅ,state_of_matter,Ei‚Å∫,0.0,incoming_particle,E_in[end],E_out) end
    end

    # Elastic transport corrections
    Œ£t[gi],Œ£s‚Ñì[gi,gi,:],Œ±[gi] = transport_correction(interaction,L,Œ£t[gi],Œ£s‚Ñì[gi,gi,:],Œ±[gi],interaction.scattering_model)

end

@inbounds for gi in range(1,Ngi)

    if type == "A"

        # Absorption cross section
        Œ£a[gi] = Œ£t[gi]

        # Energy deposition cross sections
        Œ£e[gi] = Œ£t‚Çë[gi]

        # No secondary production cross section
        # ‚àÖ

        # Charge deposition cross sections
        Œ£c[gi] = Œ£a[gi] * charge

    elseif type == "S"

        # Absorption cross section
        Œ£a[gi] = Œ£t[gi] - sum(Œ£s‚Ñì[gi,:,1])

        # Energy deposition cross sections
        Œ£e[gi] = Œ£t‚Çë[gi] - sum(Œ£s‚Çë[gi,:]) + Sm[gi]

        # No secondary production cross section
        # ‚àÖ

        # Charge deposition cross sections
        Œ£c[gi] = Œ£a[gi] * charge

    elseif type == "P"

        # Total cross-section
        Œ£t[gi] = 0.0

        # No absorption cross section
        # ‚àÖ

        # Energy deposition cross sections
        Œ£e[gi] = -sum(Œ£s‚Çë[gi,:])

        # Secondary production cross section
        Œ£s[gi] = sum(Œ£s‚Ñì[gi,:,1])

        # Charge deposition cross sections
        Œ£c[gi] = -Œ£s[gi] * charge

    end

    # Particle conservation
    if Œ£a[gi] != Œ£t[gi] + Œ£s[gi] - sum(Œ£s‚Ñì[gi,:,1])
        error("Particle conservation is not satisfied: ",[Œ£a[gi],Œ£t[gi],Œ£s[gi],sum(Œ£s‚Ñì[gi,:,1])])
    end

end

# Change of units (m‚Çëc¬≤ ‚Üí MeV)
Œ£e *= m‚Çëc¬≤; S *= m‚Çëc¬≤;

if isStandard println("End of ",interaction.name," calculations."); println() end

return Œ£s‚Ñì, Œ£t, Œ£a, Œ£s, Œ£e, Œ£c, S, Œ±
end