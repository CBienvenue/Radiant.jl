"""
    atomic_weight(Z::Int64)

Extract the atomic weight for atomic number Z ∈ {1,100}.

# Input Argument(s)
- 'Z::Int64': atomic number of the element.

# Output Argument(s)
- 'A::Float64': atomic weight [u].

# Author(s)
Charles Bienvenue

# Reference(s)
- Kawrakow (2021), The EGSnrc Code System: Monte Carlo Simulation of Electron and Photon
  Transport.

"""
function atomic_weight(Z::Int64)
    
    # Dictionary mapping atomic numbers to atomic weights
    atomic_weight_dict = Dict(
        1 => 1.00797,   2 => 4.00260,   3 => 6.93900,   4 => 9.01220,   5 => 10.81100,
        6 => 12.01115,  7 => 14.00670,  8 => 15.99940,  9 => 18.99840,  10 => 20.18300,
        11 => 22.98980, 12 => 24.31200, 13 => 26.98150, 14 => 28.08800, 15 => 30.97380,
        16 => 32.06400, 17 => 35.45300, 18 => 39.94800, 19 => 39.10200, 20 => 40.08000,
        21 => 44.95600, 22 => 47.90000, 23 => 50.94200, 24 => 51.99800, 25 => 54.93800,
        26 => 55.84700, 27 => 58.93320, 28 => 58.71000, 29 => 63.54000, 30 => 65.37000,
        31 => 69.72000, 32 => 72.59000, 33 => 74.92160, 34 => 78.96000, 35 => 79.80800,
        36 => 83.80000, 37 => 85.47000, 38 => 87.62000, 39 => 88.90500, 40 => 91.22000,
        41 => 92.90600, 42 => 95.94000, 43 => 99.00000, 44 => 101.07000, 45 => 102.90500,
        46 => 106.40000, 47 => 107.87000, 48 => 112.40000, 49 => 114.82000, 50 => 118.69000,
        51 => 121.75000, 52 => 127.60000, 53 => 126.90440, 54 => 131.30000, 55 => 132.90500,
        56 => 137.34000, 57 => 138.91000, 58 => 140.12000, 59 => 140.90700, 60 => 144.24001,
        61 => 147.00000, 62 => 150.35001, 63 => 151.98000, 64 => 157.25000, 65 => 158.92400,
        66 => 162.50000, 67 => 164.92999, 68 => 167.25999, 69 => 168.93401, 70 => 173.03999,
        71 => 174.97000, 72 => 178.49001, 73 => 180.94800, 74 => 183.85001, 75 => 186.20000,
        76 => 190.20000, 77 => 192.20000, 78 => 195.08000, 79 => 196.98700, 80 => 200.59000,
        81 => 204.37000, 82 => 207.19000, 83 => 208.98000, 84 => 210.00000, 85 => 210.00000,
        86 => 222.00000, 87 => 223.00000, 88 => 226.00000, 89 => 227.00000, 90 => 232.03600,
        91 => 231.00000, 92 => 238.03000, 93 => 237.00000, 94 => 242.00000, 95 => 243.00000,
        96 => 247.00000, 97 => 247.00000, 98 => 248.00000, 99 => 254.00000, 100 => 253.00000
    )
    
    # Check if Z exists in the dictionary
    if haskey(atomic_weight_dict, Z)
        return atomic_weight_dict[Z]
    else
        error("The input atomic number Z is invalid (Z ∉ {1,100}).")
    end
end