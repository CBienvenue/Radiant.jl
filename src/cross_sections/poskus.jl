"""
    poskus(Z::Int64,Ei::Float64,EŒ≥::Float64,L::Int64)

Gives the Legendre moments of the Bremsstrahlung angular distribution based on the shape
functions of Po≈°kus.

# Input Argument(s)
- `Z::Int64` : atomic number.
- `Ei::Float64` : incoming particle energy.
- `EŒ≥::Float64` : Bremsstrahlung photon energy.
- `L::Int64` : Legendre truncation order.

# Output Argument(s)
- `W‚Ñì::Vector{W‚Ñì}` : Legendre moments of the Po≈°kus angular distribution.

# Reference(s)
- Po≈°kus (2019), Shape functions and singly differential cross sections of bremsstrahlung
  at electron energies from 10 eV to 3 MeV for Z = 1‚Äì100.
- Bienvenue et al. (2025), Toward highly accurate multigroup coupled 
  photon-electron-positron cross-sections for the Boltzmann Fokker-Planck equation.

"""
function poskus(Z::Int64,Ei::Float64,EŒ≥::Float64,L::Int64)

    #----
    # Compute and save in cache, if not already in cache
    #----
    if ~haskey(cache_radiant[],"C‚Ñìk") || length(cache_radiant[]["C‚Ñìk"][:,1]) < L+1 
    C‚Ñìk = zeros(L+1,div(L,2)+1)
    for ‚Ñì in range(0,L), k in range(0,div(L,2))
        C‚Ñìk[‚Ñì+1,k+1] = (-1)^k * exp( sum(log.(1:2*‚Ñì-2*k)) - sum(log.(1:k)) - sum(log.(1:‚Ñì-k)) - sum(log.(1:‚Ñì-2*k)) )
    end
    cache_radiant[]["C‚Ñìk"] = C‚Ñìk
    end

    #----
    # Extract data from cache
    #----
    C‚Ñìk = cache_radiant[]["C‚Ñìk"]
    data = fast_load("bremsstrahlung_photons_distribution_poskus_2019.jld2")
    A = data["A"]; B = data["B"]; C = data["C"]
    E = data["E"]; r = data["r"]

    #----
    # Interpolation of parameters A, B and C
    #----
    m‚Çëc¬≤ = 0.510999
    if Ei ‚â• 3/m‚Çëc¬≤
        Œ≤ = sqrt(Ei*(Ei+2))/(Ei+1)
        A = 1.0
        B = 0.0
        C = Œ≤
    else
        ri = EŒ≥/Ei
        i = searchsortedfirst(E[Z],Ei)
        i‚Åª = searchsortedfirst(r[Z][i-1,:],ri)
        i‚Å∫ = searchsortedfirst(r[Z][i,:],ri)
        if i‚Åª < 13
            A‚Åª = linear_interpolation(ri,r[Z][i-1,i‚Åª-1:i‚Åª],A[Z][i-1,i‚Åª-1:i‚Åª])
            B‚Åª = linear_interpolation(ri,r[Z][i-1,i‚Åª-1:i‚Åª],B[Z][i-1,i‚Åª-1:i‚Åª])
            C‚Åª = linear_interpolation(ri,r[Z][i-1,i‚Åª-1:i‚Åª],C[Z][i-1,i‚Åª-1:i‚Åª])
        else
            A‚Åª = A[Z][i-1,end]
            B‚Åª = B[Z][i-1,end]
            C‚Åª = C[Z][i-1,end]
        end
        if i‚Å∫ < 13
            A‚Å∫ = linear_interpolation(ri,r[Z][i,i‚Å∫-1:i‚Å∫],A[Z][i,i‚Å∫-1:i‚Å∫])
            B‚Å∫ = linear_interpolation(ri,r[Z][i,i‚Å∫-1:i‚Å∫],B[Z][i,i‚Å∫-1:i‚Å∫])
            C‚Å∫ = linear_interpolation(ri,r[Z][i,i‚Å∫-1:i‚Å∫],C[Z][i,i‚Å∫-1:i‚Å∫])
        else
            A‚Å∫ = A[Z][i,end]
            B‚Å∫ = B[Z][i,end]
            C‚Å∫ = C[Z][i,end]
        end
        A = log_interpolation(Ei,E[Z][i-1:i],[A‚Åª,A‚Å∫])
        B = log_interpolation(Ei,E[Z][i-1:i],[B‚Åª,B‚Å∫])
        C = log_interpolation(Ei,E[Z][i-1:i],[C‚Åª,C‚Å∫])
    end

    #----
    # Compute Legendre moments of the Poskus angular distribution
    #----
    Œ±i = [C^2,-2*C,1] .* (A-B)
    ùí¢a = zeros(L+3)
    ùí¢b = zeros(L+3)
    for i in range(0,L+2)
        ùí¢a[i+1] = ùí¢‚ÇÉ(i,-2,1,-C,0,1,1)-ùí¢‚ÇÉ(i,-2,1,-C,0,1,-1)
        ùí¢b[i+1] = ùí¢‚ÇÉ(i,-4,1,-C,0,1,1)-ùí¢‚ÇÉ(i,-4,1,-C,0,1,-1)
    end
    W‚Ñì = zeros(L+1)
    for ‚Ñì in range(0,L)
        for k in range(0,div(‚Ñì,2))
            W‚Ñìk = 0.0
            W‚Ñìk += (A+B)*ùí¢a[‚Ñì-2*k+1]
            for i in range(0,2)
                W‚Ñìk += Œ±i[i+1] * ùí¢b[‚Ñì-2*k+i+1]
            end
            W‚Ñì[‚Ñì+1] += C‚Ñìk[‚Ñì+1,k+1] * W‚Ñìk
        end
        W‚Ñì[‚Ñì+1] *= 3/(4*(2*A+B)) * (1-C^2)/(2^‚Ñì)
    end

    #----
    # Correction to deal with high-order Legendre moments
    #----
    for ‚Ñì in range(1,L)
        if abs(W‚Ñì[1]) < abs(W‚Ñì[‚Ñì+1])
            W‚Ñì[‚Ñì+1:end] .= 0.0
            break
        end
    end
    return W‚Ñì
end