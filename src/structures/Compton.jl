
mutable struct Compton <: Interaction

    # Variable(s)
    name::String
    incoming_particle::Vector{String}
    interaction_particles::Vector{String}
    interaction_types::Dict{Tuple{String,String},Vector{String}}
    energy_integration_method::String
    C‚Ñìk::Array{Float64}
    C‚Ñìki::Array{Float64}
    is_CSD::Bool
    is_AFP::Bool
    is_elastic::Bool
    is_preload_data::Bool
    is_subshells_dependant::Bool
    incoherent_scattering_factor::Function

    # Constructor(s)
    function Compton()
        this = new()
        this.name = "compton"
        this.interaction_types = Dict(("photons","photons") => ["S"],("photons","electrons") => ["P"])
        this.incoming_particle = unique([t[1] for t in collect(keys(this.interaction_types))])
        this.interaction_particles = unique([t[2] for t in collect(keys(this.interaction_types))])
        this.energy_integration_method = "quadrature"
        this.is_CSD = false
        this.is_AFP = false
        this.is_elastic = false
        this.is_preload_data = true
        this.is_subshells_dependant = false
        return this
    end
end

# Method(s)
function in_distribution(this::Compton)
    is_dirac = false
    N = 8
    quadrature = "gauss-legendre"
    return is_dirac, N, quadrature
end

function out_distribution(this::Compton)
    if this.energy_integration_method == "analytic"
        is_dirac = true
        N = 1
        quadrature = "dirac"
    elseif this.energy_integration_method == "quadrature"
        is_dirac = false
        N = 8
        quadrature = "gauss-legendre"
    else
        error("Unknown energy integration method.")
    end
    return is_dirac, N, quadrature
end

function bounds(this::Compton,Ef‚Åª::Float64,Ef‚Å∫::Float64,Ei::Float64,type::String)
    # Scattered photon
    if type == "S" 
        Ef‚Åª = min(Ei,Ef‚Åª)
        Ef‚Å∫ = max(Ei/(1+2*Ei),Ef‚Å∫)
        if (Ef‚Åª-Ef‚Å∫ < 0) isSkip = true else isSkip = false end
    # Produced electron
    elseif type == "P" 
        Ef‚Åª = min(2*Ei^2/(1+2*Ei),Ef‚Åª)
        if (Ef‚Åª-Ef‚Å∫ < 0) isSkip = true else isSkip = false end
    else
        error("Unknown type of method for Klein-Nishina scattering.")
    end
    return Ef‚Åª,Ef‚Å∫,isSkip
end

function dcs(this::Compton,L::Int64,Ei::Float64,Ef::Float64,type::String,Efmax::Float64,Efmin::Float64,Z::Int64,iz::Int64)

    # Initialization
    r‚Çë = 2.81794092e-13 # (in cm)
    œÉs = 0
    œÉ‚Ñì = zeros(L+1)

    # Scattered photon
    if type == "S"

        # Exact integration
        if this.energy_integration_method == "analytic"
            Œì = Z * œÄ*r‚Çë^2/Ei^2
            Œ±i = [1,Ei-2-2/Ei,2/Ei+1/Ei^2,1/Ei]
            ùí¢Œ≥ = zeros(L+4)
            @inbounds for i in range(-(L+2),1)
                if i == -1
                    ùí¢Œ≥[(L+2)+i+1] = log(Efmax) - log(Efmin)
                else
                    ùí¢Œ≥[(L+2)+i+1] = ((Efmax)^(i+1) - (Efmin)^(i+1))/(i+1)
                end
            end
            @inbounds for ‚Ñì in range(0,L)
                for k in range(0,div(‚Ñì,2))
                    œÉ‚Ñìk = 0.0
                    for i in range(0,‚Ñì-2k)
                        œÉ‚Ñìki = 0.0
                        for j in range(0,3)
                            œÉ‚Ñìki += Œ±i[j+1] * ùí¢Œ≥[(L+2)+(j-i-2)+1]
                        end
                        œÉ‚Ñìk += (1+1/Ei)^(‚Ñì-2*k-i) * this.C‚Ñìki[‚Ñì+1,k+1,i+1] * œÉ‚Ñìki
                    end 
                    œÉ‚Ñì[‚Ñì+1] += this.C‚Ñìk[‚Ñì+1,k+1] * œÉ‚Ñìk
                end
                œÉ‚Ñì[‚Ñì+1] *= Œì/(2^‚Ñì)
            end
            # Correction to deal with high-order Legendre moments
            for ‚Ñì in range(1,L)
                if abs(œÉ‚Ñì[1]) < abs(œÉ‚Ñì[‚Ñì+1])
                    œÉ‚Ñì[‚Ñì+1:end] .= 0.0
                    break
                end
            end
        # Quadrature-based integration
        elseif this.energy_integration_method == "quadrature"
            # Compute the differential scattering cross section
            if Ei/(1+2*Ei) ‚â§ Ef ‚â§ Ei
                œÉs = œÄ * r‚Çë^2 / Ei^2 * (Ei/Ef + Ef/Ei - 2*(1/Ef-1/Ei) + (1/Ef-1/Ei)^2)
            end
            # Compute the Legendre moments of the flux
            if œÉs != 0
                Œº = max(min(1 + 1/Ei - 1/Ef,1),-1)
                S = this.incoherent_scattering_factor(iz,Ei,Œº)
                P‚ÑìŒº = legendre_polynomials(L,Œº)
                for ‚Ñì in range(0,L) œÉ‚Ñì[‚Ñì+1] += P‚ÑìŒº[‚Ñì+1] * œÉs * S end
            end
        else
            error("Unknown energy integration method.")
        end

    # Produced electron
    elseif type == "P"
        # Exact integration
        if this.energy_integration_method == "analytic"
            Œì = Z*œÄ*r‚Çë^2/Ei^2
            Œ±i = [1,Ei^2-2*Ei-2,-1/Ei,1+2/Ei+1/Ei^2,-(Ei-2-2/Ei)]
            @inbounds for ‚Ñì in range(0,L)
                for k in range(0,div(‚Ñì,2))
                    œÉ‚Ñìk = 0.0
                    if mod(‚Ñì-2k,2) == 0
                        m = div(‚Ñì-2*k,2)
                        for i in range(0,1)
                            œÉ‚Ñìk += Œ±i[i+1] * (ùí¢‚ÇÉ(i-2,-m,1,2,-1,Ei,1/Efmin)-ùí¢‚ÇÉ(i-2,-m,1,2,-1,Ei,1/Efmax))
                        end
                        for i in range(0,2)
                            œÉ‚Ñìk += Œ±i[i+3] * (ùí¢‚ÇÉ(i-3,-m,1,2,0,1,1/Efmin)-ùí¢‚ÇÉ(i-3,-m,1,2,0,1,1/Efmax))
                        end
                    else
                        m = div(‚Ñì-2*k-1,2)
                        for i in range(0,1)
                            œÉ‚Ñìk += Œ±i[i+1] * (ùí¢‚ÇÑ(2-i,m,1,2,-1,Ei,1/Efmin)-ùí¢‚ÇÑ(2-i,m,1,2,-1,Ei,1/Efmax))
                        end
                        for i in range(0,2)
                            œÉ‚Ñìk += Œ±i[i+3] * (ùí¢‚ÇÑ(3-i,m,1,2,0,1,1/Efmin)-ùí¢‚ÇÑ(3-i,m,1,2,0,1,1/Efmax))
                        end
                    end
                    œÉ‚Ñì[‚Ñì+1] += (1+1/Ei)^(‚Ñì-2*k) * this.C‚Ñìk[‚Ñì+1,k+1] * œÉ‚Ñìk
                end
                œÉ‚Ñì[‚Ñì+1] *= Œì/(2^‚Ñì)
            end 
            # Correction to deal with high-order Legendre moments
            for ‚Ñì in range(1,L)
                if abs(œÉ‚Ñì[1]) < abs(œÉ‚Ñì[‚Ñì+1])
                    œÉ‚Ñì[‚Ñì+1:end] .= 0.0
                    break
                end
            end
        # Quadrature-based integration
        elseif this.energy_integration_method == "quadrature"
            # Change of variable
            E‚Çë = copy(Ef)
            Ef = Ei - E‚Çë
            # Compute the differential scattering cross section
            if 0 ‚â§ E‚Çë ‚â§ 2*Ei^2/(1+2*Ei)
                œÉs = œÄ * r‚Çë^2 / Ei^2 * (Ei/Ef + Ef/Ei - 2*(1/Ef-1/Ei) + (1/Ef-1/Ei)^2)
            end
            # Compute the Legendre moments of the flux
            if œÉs != 0
                Œº = max(min((1 + Ei)/Ei * 1/sqrt(2/E‚Çë+1),1),-1)
                ŒºŒ≥ = max(min(1 + 1/Ei - 1/Ef,1),-1)
                S = this.incoherent_scattering_factor(iz,Ei,ŒºŒ≥)
                P‚ÑìŒº = legendre_polynomials(L,Œº)
                for ‚Ñì in range(0,L) œÉ‚Ñì[‚Ñì+1] += P‚ÑìŒº[‚Ñì+1] * œÉs * S end
            end
        else
            error("Unknown energy integration method.")
        end
    else
        error("Unknown interaction.")
    end
    return œÉ‚Ñì
end

function tcs(this::Compton,Ei::Float64,Z::Int64,Eout::Vector{Float64},iz::Int64)

    #=
    r‚Çë = 2.81794092E-13 # (in cm)
    f_klein_nishina(x) = (Ei-2-2/Ei)*log(x) + (1/(2*Ei))*x^2 + (2/Ei+1/Ei^2)*x - 1/x
    œÉt = Z*œÄ*r‚Çë^2/Ei^2*( f_klein_nishina(Ei) - f_klein_nishina(Ei/(1+2*Ei)) )
    return œÉt
    =#

    œÉt = 0.0
    r‚Çë = 2.81794092E-13 # (in cm)
    Ngf = length(Eout)-1
    is_dirac, Np, q_type = out_distribution(this)
    if is_dirac Np = 1; u = [0]; w = [2] else u,w = quadrature(Np,q_type) end
    for gf in range(1,Ngf+1)
        Ef‚Åª = Eout[gf]
        if (gf != Ngf+1) Ef‚Å∫ = Eout[gf+1] else Ef‚Å∫ = 0.0 end
        Ef‚Åª,Ef‚Å∫,isSkip = bounds(this,Ef‚Åª,Ef‚Å∫,Ei,"S")
        if isSkip continue end
        ŒîEf = Ef‚Åª - Ef‚Å∫
        for n in range(1,Np)
            Ef = (u[n]*ŒîEf + (Ef‚Åª+Ef‚Å∫))/2

            # Compute the differential scattering cross section
            if Ei/(1+2*Ei) ‚â§ Ef ‚â§ Ei
                Œº = max(min(1 + 1/Ei - 1/Ef,1),-1)
                S = this.incoherent_scattering_factor(iz,Ei,Œº)
                œÉs = S * œÄ * r‚Çë^2 / Ei^2 * (Ei/Ef + Ef/Ei - 2*(1/Ef-1/Ei) + (1/Ef-1/Ei)^2)
            end
            
            # Cross-sections
            œÉt += ŒîEf/2 * w[n] * œÉs
        end
    end

    return œÉt
    
end

function preload_data(this::Compton,L::Int64,Z::Vector{Int64})

    # Precompute angular integration factors
    if this.energy_integration_method == "analytic"
        this.C‚Ñìk = zeros(L+1,div(L,2)+1)
        this.C‚Ñìki = zeros(L+1,div(L,2)+1,L+1)
        for ‚Ñì in range(0,L), k in range(0,div(L,2))
            this.C‚Ñìk[‚Ñì+1,k+1] = (-1)^k * exp( sum(log.(1:2*‚Ñì-2*k)) - sum(log.(1:k)) - sum(log.(1:‚Ñì-k)) - sum(log.(1:‚Ñì-2*k)) )
            for i in range(0,L)
                this.C‚Ñìki[‚Ñì+1,k+1,i+1] = (-1)^i * exp( sum(log.(1:‚Ñì-2k)) -  sum(log.(1:i)) -  sum(log.(1:‚Ñì-2k-i)) )
            end
        end
    end
    
    # Incoherent scattering factor
    Nz = length(Z)
    x = Vector{Vector{Float64}}(undef,Nz)
    S = Vector{Vector{Float64}}(undef,Nz)
    S_spline = Vector{Function}(undef,Nz)
    for iz in range(1,Nz)
        data = load("./data/compton_factors_JENDL5.jld2")
        x[iz] = data["x"][Z[iz]]
        S[iz] = data["F"][Z[iz]]
        S_spline[iz] = cubic_hermite_spline(x[iz],S[iz])
    end
    this.incoherent_scattering_factor = function incoherent_scattering_factor(iz::Int64,Ei::Float64,Œº::Float64)
        hc = 1/20.60744 # (hc in m‚Çëc¬≤ √ó ‚Ñ´)
        xi = 2*Ei/(hc)*sqrt((1-Œº)/2) * sqrt((1+(Ei^2+2*Ei)*(1-Œº)/2))/(1+Ei*(1-Œº))
        Si = S_spline[iz](xi)
        return Si
    end
    
end
